import { t as Hr, $ as il, i as al, a0 as rl, a1 as Br, a2 as zr, a3 as ol, a4 as ll, a5 as cl, a6 as ul, a7 as Ur, a8 as va, a9 as nn, g as L, p as Kt, a as en, C as ya, aa as xt, w as At, ab as wn, E as Ea, H as jt, ac as Fr, ad as Os, c as hl, ae as Ee, I as ui, K as hi, e as se, af as vn, ag as ge, f as ve, x as me, ah as dl, h as je, O as pl, ai as Re, z as Et, l as qt, aj as Gt, ak as fl, M as gl, al as Wr, y as _t, q as un, n as Hn, am as Ns, an as ml, ao as vl, ap as di, aq as xa, A as Le, ar as Sa, as as Xr, at as yl } from "./color-scale-utils-ycwO-Ibq.mjs";
import { y as at, $ as T, N as Tt, r as Te, q as Be, L as El, A as te, m as nt, s as Ae, W as Ke, S as kt, e as J, Z as ze, i as Xt, f as Ta, J as Ps, d as xl, F as Bn, n as $s, H as Vs, C as Gs, p as zn, b as ba, D as Hs, U as Sl, x as Me, a0 as Un, O as Bs } from "./axis-scales-CPuwbFQf.mjs";
import { R as lt } from "./a11y-ePqvrObQ.mjs";
import { t as ns, s as D, h as Oa, e as Ut, c as ss, f as we, g as le, m as zs, i as La, j as Aa, k as Je, l as Rt, n as Ma, o as Tl, q as bl, u as Hi, D as I, v as Ol, w as pi, G as wa, x as Bi, y as Ll, a as Al, p as bt, r as Ca, b as Ml } from "./angle-utils-CQDEbkP4.mjs";
import { b as Yr, c as pt, a as zi, s as wl } from "./array-j65rN_vo.mjs";
function Cl(i, t, e, n) {
  for (var s = -1, a = i == null ? 0 : i.length; ++s < a; )
    e = t(e, i[s], s, i);
  return e;
}
function kl(i) {
  return function(t) {
    return i == null ? void 0 : i[t];
  };
}
var _l = {
  // Latin-1 Supplement block.
  À: "A",
  Á: "A",
  Â: "A",
  Ã: "A",
  Ä: "A",
  Å: "A",
  à: "a",
  á: "a",
  â: "a",
  ã: "a",
  ä: "a",
  å: "a",
  Ç: "C",
  ç: "c",
  Ð: "D",
  ð: "d",
  È: "E",
  É: "E",
  Ê: "E",
  Ë: "E",
  è: "e",
  é: "e",
  ê: "e",
  ë: "e",
  Ì: "I",
  Í: "I",
  Î: "I",
  Ï: "I",
  ì: "i",
  í: "i",
  î: "i",
  ï: "i",
  Ñ: "N",
  ñ: "n",
  Ò: "O",
  Ó: "O",
  Ô: "O",
  Õ: "O",
  Ö: "O",
  Ø: "O",
  ò: "o",
  ó: "o",
  ô: "o",
  õ: "o",
  ö: "o",
  ø: "o",
  Ù: "U",
  Ú: "U",
  Û: "U",
  Ü: "U",
  ù: "u",
  ú: "u",
  û: "u",
  ü: "u",
  Ý: "Y",
  ý: "y",
  ÿ: "y",
  Æ: "Ae",
  æ: "ae",
  Þ: "Th",
  þ: "th",
  ß: "ss",
  // Latin Extended-A block.
  Ā: "A",
  Ă: "A",
  Ą: "A",
  ā: "a",
  ă: "a",
  ą: "a",
  Ć: "C",
  Ĉ: "C",
  Ċ: "C",
  Č: "C",
  ć: "c",
  ĉ: "c",
  ċ: "c",
  č: "c",
  Ď: "D",
  Đ: "D",
  ď: "d",
  đ: "d",
  Ē: "E",
  Ĕ: "E",
  Ė: "E",
  Ę: "E",
  Ě: "E",
  ē: "e",
  ĕ: "e",
  ė: "e",
  ę: "e",
  ě: "e",
  Ĝ: "G",
  Ğ: "G",
  Ġ: "G",
  Ģ: "G",
  ĝ: "g",
  ğ: "g",
  ġ: "g",
  ģ: "g",
  Ĥ: "H",
  Ħ: "H",
  ĥ: "h",
  ħ: "h",
  Ĩ: "I",
  Ī: "I",
  Ĭ: "I",
  Į: "I",
  İ: "I",
  ĩ: "i",
  ī: "i",
  ĭ: "i",
  į: "i",
  ı: "i",
  Ĵ: "J",
  ĵ: "j",
  Ķ: "K",
  ķ: "k",
  ĸ: "k",
  Ĺ: "L",
  Ļ: "L",
  Ľ: "L",
  Ŀ: "L",
  Ł: "L",
  ĺ: "l",
  ļ: "l",
  ľ: "l",
  ŀ: "l",
  ł: "l",
  Ń: "N",
  Ņ: "N",
  Ň: "N",
  Ŋ: "N",
  ń: "n",
  ņ: "n",
  ň: "n",
  ŋ: "n",
  Ō: "O",
  Ŏ: "O",
  Ő: "O",
  ō: "o",
  ŏ: "o",
  ő: "o",
  Ŕ: "R",
  Ŗ: "R",
  Ř: "R",
  ŕ: "r",
  ŗ: "r",
  ř: "r",
  Ś: "S",
  Ŝ: "S",
  Ş: "S",
  Š: "S",
  ś: "s",
  ŝ: "s",
  ş: "s",
  š: "s",
  Ţ: "T",
  Ť: "T",
  Ŧ: "T",
  ţ: "t",
  ť: "t",
  ŧ: "t",
  Ũ: "U",
  Ū: "U",
  Ŭ: "U",
  Ů: "U",
  Ű: "U",
  Ų: "U",
  ũ: "u",
  ū: "u",
  ŭ: "u",
  ů: "u",
  ű: "u",
  ų: "u",
  Ŵ: "W",
  ŵ: "w",
  Ŷ: "Y",
  ŷ: "y",
  Ÿ: "Y",
  Ź: "Z",
  Ż: "Z",
  Ž: "Z",
  ź: "z",
  ż: "z",
  ž: "z",
  Ĳ: "IJ",
  ĳ: "ij",
  Œ: "Oe",
  œ: "oe",
  ŉ: "'n",
  ſ: "s"
}, Il = kl(_l), Rl = /[\xc0-\xd6\xd8-\xf6\xf8-\xff\u0100-\u017f]/g, Dl = "\\u0300-\\u036f", Nl = "\\ufe20-\\ufe2f", Pl = "\\u20d0-\\u20ff", $l = Dl + Nl + Pl, Vl = "[" + $l + "]", Gl = RegExp(Vl, "g");
function Hl(i) {
  return i = Hr(i), i && i.replace(Rl, Il).replace(Gl, "");
}
var Bl = /[^\x00-\x2f\x3a-\x40\x5b-\x60\x7b-\x7f]+/g;
function zl(i) {
  return i.match(Bl) || [];
}
var Ul = /[a-z][A-Z]|[A-Z]{2}[a-z]|[0-9][a-zA-Z]|[a-zA-Z][0-9]|[^a-zA-Z0-9 ]/;
function Fl(i) {
  return Ul.test(i);
}
var Zr = "\\ud800-\\udfff", Wl = "\\u0300-\\u036f", Xl = "\\ufe20-\\ufe2f", Yl = "\\u20d0-\\u20ff", Zl = Wl + Xl + Yl, qr = "\\u2700-\\u27bf", jr = "a-z\\xdf-\\xf6\\xf8-\\xff", ql = "\\xac\\xb1\\xd7\\xf7", jl = "\\x00-\\x2f\\x3a-\\x40\\x5b-\\x60\\x7b-\\xbf", Kl = "\\u2000-\\u206f", Jl = " \\t\\x0b\\f\\xa0\\ufeff\\n\\r\\u2028\\u2029\\u1680\\u180e\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200a\\u202f\\u205f\\u3000", Kr = "A-Z\\xc0-\\xd6\\xd8-\\xde", Ql = "\\ufe0e\\ufe0f", Jr = ql + jl + Kl + Jl, Qr = "['’]", ka = "[" + Jr + "]", tc = "[" + Zl + "]", to = "\\d+", ec = "[" + qr + "]", eo = "[" + jr + "]", no = "[^" + Zr + Jr + to + qr + jr + Kr + "]", nc = "\\ud83c[\\udffb-\\udfff]", sc = "(?:" + tc + "|" + nc + ")", ic = "[^" + Zr + "]", so = "(?:\\ud83c[\\udde6-\\uddff]){2}", io = "[\\ud800-\\udbff][\\udc00-\\udfff]", Ye = "[" + Kr + "]", ac = "\\u200d", _a = "(?:" + eo + "|" + no + ")", rc = "(?:" + Ye + "|" + no + ")", Ia = "(?:" + Qr + "(?:d|ll|m|re|s|t|ve))?", Ra = "(?:" + Qr + "(?:D|LL|M|RE|S|T|VE))?", ao = sc + "?", ro = "[" + Ql + "]?", oc = "(?:" + ac + "(?:" + [ic, so, io].join("|") + ")" + ro + ao + ")*", lc = "\\d*(?:1st|2nd|3rd|(?![123])\\dth)(?=\\b|[A-Z_])", cc = "\\d*(?:1ST|2ND|3RD|(?![123])\\dTH)(?=\\b|[a-z_])", uc = ro + ao + oc, hc = "(?:" + [ec, so, io].join("|") + ")" + uc, dc = RegExp([
  Ye + "?" + eo + "+" + Ia + "(?=" + [ka, Ye, "$"].join("|") + ")",
  rc + "+" + Ra + "(?=" + [ka, Ye + _a, "$"].join("|") + ")",
  Ye + "?" + _a + "+" + Ia,
  Ye + "+" + Ra,
  cc,
  lc,
  to,
  hc
].join("|"), "g");
function pc(i) {
  return i.match(dc) || [];
}
function fc(i, t, e) {
  return i = Hr(i), t = t, t === void 0 ? Fl(i) ? pc(i) : zl(i) : i.match(t) || [];
}
var gc = "['’]", mc = RegExp(gc, "g");
function vc(i) {
  return function(t) {
    return Cl(fc(Hl(t).replace(mc, "")), i, "");
  };
}
function yc(i, t, e) {
  return i === i && (e !== void 0 && (i = i <= e ? i : e), t !== void 0 && (i = i >= t ? i : t)), i;
}
function oo(i, t, e) {
  return e === void 0 && (e = t, t = void 0), e !== void 0 && (e = ns(e), e = e === e ? e : 0), t !== void 0 && (t = ns(t), t = t === t ? t : 0), yc(ns(i), t, e);
}
var Ec = "Expected a function";
function xc(i, t, e) {
  if (typeof i != "function")
    throw new TypeError(Ec);
  return setTimeout(function() {
    i.apply(void 0, e);
  }, t);
}
var Sc = il(function(i, t, e) {
  return xc(i, ns(t) || 0, e);
});
function Tc(i, t) {
  var e = -1, n = al(i) ? Array(i.length) : [];
  return Yr(i, function(s, a, r) {
    n[++e] = t(s, a, r);
  }), n;
}
function bc(i, t) {
  var e = zr(i) ? rl : Tc;
  return e(i, Br(t));
}
var Oc = 1 / 0;
function Lc(i, t) {
  return ol(bc(i, t), Oc);
}
function lo(i, t) {
  return ll(i, t);
}
var Ue = vc(function(i, t, e) {
  return i + (e ? "-" : "") + t.toLowerCase();
});
function Ac(i, t) {
  var e;
  return Yr(i, function(n, s, a) {
    return e = t(n, s, a), !e;
  }), !!e;
}
function Mc(i, t, e) {
  var n = zr(i) ? cl : Ac;
  return n(i, Br(t));
}
class De {
  constructor() {
    this._partials = new Float64Array(32), this._n = 0;
  }
  add(t) {
    const e = this._partials;
    let n = 0;
    for (let s = 0; s < this._n && s < 32; s++) {
      const a = e[s], r = t + a, o = Math.abs(t) < Math.abs(a) ? t - (r - a) : a - (r - t);
      o && (e[n++] = o), t = r;
    }
    return e[n] = t, this._n = n + 1, this;
  }
  valueOf() {
    const t = this._partials;
    let e = this._n, n, s, a, r = 0;
    if (e > 0) {
      for (r = t[--e]; e > 0 && (n = r, s = t[--e], r = n + s, a = s - (r - n), !a); )
        ;
      e > 0 && (a < 0 && t[e - 1] < 0 || a > 0 && t[e - 1] > 0) && (s = a * 2, n = r + s, s == n - r && (r = n));
    }
    return r;
  }
}
function* wc(i) {
  for (const t of i)
    yield* t;
}
function co(i) {
  return Array.from(wc(i));
}
function Cc(i) {
  return i;
}
var is = 1, as = 2, fi = 3, yn = 4, Da = 1e-6;
function kc(i) {
  return "translate(" + i + ",0)";
}
function _c(i) {
  return "translate(0," + i + ")";
}
function Ic(i) {
  return (t) => +i(t);
}
function Rc(i, t) {
  return t = Math.max(0, i.bandwidth() - t * 2) / 2, i.round() && (t = Math.round(t)), (e) => +i(e) + t;
}
function Dc() {
  return !this.__axis;
}
function Ls(i, t) {
  var e = [], n = null, s = null, a = 6, r = 6, o = 3, c = typeof window < "u" && window.devicePixelRatio > 1 ? 0 : 0.5, l = i === is || i === yn ? -1 : 1, h = i === yn || i === as ? "x" : "y", d = i === is || i === fi ? kc : _c;
  function u(p) {
    var f = n ?? (t.ticks ? t.ticks.apply(t, e) : t.domain()), g = s ?? (t.tickFormat ? t.tickFormat.apply(t, e) : Cc), m = Math.max(a, 0) + o, y = t.range(), S = +y[0] + c, v = +y[y.length - 1] + c, E = (t.bandwidth ? Rc : Ic)(t.copy(), c), x = p.selection ? p.selection() : p, b = x.selectAll(".domain").data([null]), _ = x.selectAll(".tick").data(f, t).order(), k = _.exit(), G = _.enter().append("g").attr("class", "tick"), R = _.select("line"), A = _.select("text");
    b = b.merge(b.enter().insert("path", ".tick").attr("class", "domain").attr("stroke", "currentColor")), _ = _.merge(G), R = R.merge(G.append("line").attr("stroke", "currentColor").attr(h + "2", l * a)), A = A.merge(G.append("text").attr("fill", "currentColor").attr(h, l * m).attr("dy", i === is ? "0em" : i === fi ? "0.71em" : "0.32em")), p !== x && (b = b.transition(p), _ = _.transition(p), R = R.transition(p), A = A.transition(p), k = k.transition(p).attr("opacity", Da).attr("transform", function(H) {
      return isFinite(H = E(H)) ? d(H + c) : this.getAttribute("transform");
    }), G.attr("opacity", Da).attr("transform", function(H) {
      var N = this.parentNode.__axis;
      return d((N && isFinite(N = N(H)) ? N : E(H)) + c);
    })), k.remove(), b.attr("d", i === yn || i === as ? r ? "M" + l * r + "," + S + "H" + c + "V" + v + "H" + l * r : "M" + c + "," + S + "V" + v : r ? "M" + S + "," + l * r + "V" + c + "H" + v + "V" + l * r : "M" + S + "," + c + "H" + v), _.attr("opacity", 1).attr("transform", function(H) {
      return d(E(H) + c);
    }), R.attr(h + "2", l * a), A.attr(h, l * m).text(g), x.filter(Dc).attr("fill", "none").attr("font-size", 10).attr("font-family", "sans-serif").attr("text-anchor", i === as ? "start" : i === yn ? "end" : "middle"), x.each(function() {
      this.__axis = E;
    });
  }
  return u.scale = function(p) {
    return arguments.length ? (t = p, u) : t;
  }, u.ticks = function() {
    return e = Array.from(arguments), u;
  }, u.tickArguments = function(p) {
    return arguments.length ? (e = p == null ? [] : Array.from(p), u) : e.slice();
  }, u.tickValues = function(p) {
    return arguments.length ? (n = p == null ? null : Array.from(p), u) : n && n.slice();
  }, u.tickFormat = function(p) {
    return arguments.length ? (s = p, u) : s;
  }, u.tickSize = function(p) {
    return arguments.length ? (a = r = +p, u) : a;
  }, u.tickSizeInner = function(p) {
    return arguments.length ? (a = +p, u) : a;
  }, u.tickSizeOuter = function(p) {
    return arguments.length ? (r = +p, u) : r;
  }, u.tickPadding = function(p) {
    return arguments.length ? (o = +p, u) : o;
  }, u.offset = function(p) {
    return arguments.length ? (c = +p, u) : c;
  }, u;
}
function Nc(i) {
  return Ls(is, i);
}
function Pc(i) {
  return Ls(as, i);
}
function Ui(i) {
  return Ls(fi, i);
}
function uo(i) {
  return Ls(yn, i);
}
const gi = { capture: !0, passive: !1 };
function mi(i) {
  i.preventDefault(), i.stopImmediatePropagation();
}
function $c(i) {
  var t = i.document.documentElement, e = D(i).on("dragstart.drag", mi, gi);
  "onselectstart" in t ? e.on("selectstart.drag", mi, gi) : (t.__noselect = t.style.MozUserSelect, t.style.MozUserSelect = "none");
}
function Vc(i, t) {
  var e = i.document.documentElement, n = D(i).on("dragstart.drag", null);
  t && (n.on("click.drag", mi, gi), setTimeout(function() {
    n.on("click.drag", null);
  }, 0)), "onselectstart" in e ? n.on("selectstart.drag", null) : (e.style.MozUserSelect = e.__noselect, delete e.__noselect);
}
function Gc(i, t) {
  for (var e = new Array(t), n = 0; n < t; ++n) e[n] = i(n / (t - 1));
  return e;
}
const Hc = (i) => +i, Us = (i) => () => i;
function Bc(i, {
  sourceEvent: t,
  target: e,
  selection: n,
  mode: s,
  dispatch: a
}) {
  Object.defineProperties(this, {
    type: { value: i, enumerable: !0, configurable: !0 },
    sourceEvent: { value: t, enumerable: !0, configurable: !0 },
    target: { value: e, enumerable: !0, configurable: !0 },
    selection: { value: n, enumerable: !0, configurable: !0 },
    mode: { value: s, enumerable: !0, configurable: !0 },
    _: { value: a }
  });
}
function zc(i) {
  i.stopImmediatePropagation();
}
function Fs(i) {
  i.preventDefault(), i.stopImmediatePropagation();
}
var Na = { name: "drag" }, Ws = { name: "space" }, Fe = { name: "handle" }, We = { name: "center" };
const { abs: Pa, max: Dt, min: Nt } = Math;
function $a(i) {
  return [+i[0], +i[1]];
}
function Va(i) {
  return [$a(i[0]), $a(i[1])];
}
var rs = {
  name: "x",
  handles: ["w", "e"].map(vi),
  input: function(i, t) {
    return i == null ? null : [[+i[0], t[0][1]], [+i[1], t[1][1]]];
  },
  output: function(i) {
    return i && [i[0][0], i[1][0]];
  }
}, Xs = {}, fe = {
  overlay: "crosshair",
  selection: "move",
  n: "ns-resize",
  e: "ew-resize",
  s: "ns-resize",
  w: "ew-resize",
  nw: "nwse-resize",
  ne: "nesw-resize",
  se: "nwse-resize",
  sw: "nesw-resize"
}, Ga = {
  e: "w",
  w: "e",
  nw: "ne",
  ne: "nw",
  se: "sw",
  sw: "se"
}, Ha = {
  n: "s",
  s: "n",
  nw: "sw",
  ne: "se",
  se: "ne",
  sw: "nw"
}, Uc = {
  overlay: 1,
  selection: 1,
  n: null,
  e: 1,
  s: null,
  w: -1,
  nw: -1,
  ne: 1,
  se: 1,
  sw: -1
}, Fc = {
  overlay: 1,
  selection: 1,
  n: -1,
  e: null,
  s: 1,
  w: null,
  nw: -1,
  ne: -1,
  se: 1,
  sw: 1
};
function vi(i) {
  return { type: i };
}
function Wc(i) {
  return !i.ctrlKey && !i.button;
}
function Xc() {
  var i = this.ownerSVGElement || this;
  return i.hasAttribute("viewBox") ? (i = i.viewBox.baseVal, [[i.x, i.y], [i.x + i.width, i.y + i.height]]) : [[0, 0], [i.width.baseVal.value, i.height.baseVal.value]];
}
function Yc() {
  return navigator.maxTouchPoints || "ontouchstart" in this;
}
function Ys(i) {
  for (; !i.__brush; ) if (!(i = i.parentNode)) return;
  return i.__brush;
}
function Zc(i) {
  return i[0][0] === i[1][0] || i[0][1] === i[1][1];
}
function ho() {
  return qc(rs);
}
function qc(i) {
  var t = Xc, e = Wc, n = Yc, s = !0, a = ul("start", "brush", "end"), r = 6, o;
  function c(m) {
    var y = m.property("__brush", g).selectAll(".overlay").data([vi("overlay")]);
    y.enter().append("rect").attr("class", "overlay").attr("pointer-events", "all").attr("cursor", fe.overlay).merge(y).each(function() {
      var v = Ys(this).extent;
      D(this).attr("x", v[0][0]).attr("y", v[0][1]).attr("width", v[1][0] - v[0][0]).attr("height", v[1][1] - v[0][1]);
    }), m.selectAll(".selection").data([vi("selection")]).enter().append("rect").attr("class", "selection").attr("cursor", fe.selection).attr("fill", "#777").attr("fill-opacity", 0.3).attr("stroke", "#fff").attr("shape-rendering", "crispEdges");
    var S = m.selectAll(".handle").data(i.handles, function(v) {
      return v.type;
    });
    S.exit().remove(), S.enter().append("rect").attr("class", function(v) {
      return "handle handle--" + v.type;
    }).attr("cursor", function(v) {
      return fe[v.type];
    }), m.each(l).attr("fill", "none").attr("pointer-events", "all").on("mousedown.brush", u).filter(n).on("touchstart.brush", u).on("touchmove.brush", p).on("touchend.brush touchcancel.brush", f).style("touch-action", "none").style("-webkit-tap-highlight-color", "rgba(0,0,0,0)");
  }
  c.move = function(m, y, S) {
    m.tween ? m.on("start.brush", function(v) {
      h(this, arguments).beforestart().start(v);
    }).on("interrupt.brush end.brush", function(v) {
      h(this, arguments).end(v);
    }).tween("brush", function() {
      var v = this, E = v.__brush, x = h(v, arguments), b = E.selection, _ = i.input(typeof y == "function" ? y.apply(this, arguments) : y, E.extent), k = Ur(b, _);
      function G(R) {
        E.selection = R === 1 && _ === null ? null : k(R), l.call(v), x.brush();
      }
      return b !== null && _ !== null ? G : G(1);
    }) : m.each(function() {
      var v = this, E = arguments, x = v.__brush, b = i.input(typeof y == "function" ? y.apply(v, E) : y, x.extent), _ = h(v, E).beforestart();
      va(v), x.selection = b === null ? null : b, l.call(v), _.start(S).brush(S).end(S);
    });
  }, c.clear = function(m, y) {
    c.move(m, null, y);
  };
  function l() {
    var m = D(this), y = Ys(this).selection;
    y ? (m.selectAll(".selection").style("display", null).attr("x", y[0][0]).attr("y", y[0][1]).attr("width", y[1][0] - y[0][0]).attr("height", y[1][1] - y[0][1]), m.selectAll(".handle").style("display", null).attr("x", function(S) {
      return S.type[S.type.length - 1] === "e" ? y[1][0] - r / 2 : y[0][0] - r / 2;
    }).attr("y", function(S) {
      return S.type[0] === "s" ? y[1][1] - r / 2 : y[0][1] - r / 2;
    }).attr("width", function(S) {
      return S.type === "n" || S.type === "s" ? y[1][0] - y[0][0] + r : r;
    }).attr("height", function(S) {
      return S.type === "e" || S.type === "w" ? y[1][1] - y[0][1] + r : r;
    })) : m.selectAll(".selection,.handle").style("display", "none").attr("x", null).attr("y", null).attr("width", null).attr("height", null);
  }
  function h(m, y, S) {
    var v = m.__brush.emitter;
    return v && (!S || !v.clean) ? v : new d(m, y, S);
  }
  function d(m, y, S) {
    this.that = m, this.args = y, this.state = m.__brush, this.active = 0, this.clean = S;
  }
  d.prototype = {
    beforestart: function() {
      return ++this.active === 1 && (this.state.emitter = this, this.starting = !0), this;
    },
    start: function(m, y) {
      return this.starting ? (this.starting = !1, this.emit("start", m, y)) : this.emit("brush", m), this;
    },
    brush: function(m, y) {
      return this.emit("brush", m, y), this;
    },
    end: function(m, y) {
      return --this.active === 0 && (delete this.state.emitter, this.emit("end", m, y)), this;
    },
    emit: function(m, y, S) {
      var v = D(this.that).datum();
      a.call(
        m,
        this.that,
        new Bc(m, {
          sourceEvent: y,
          target: c,
          selection: i.output(this.state.selection),
          mode: S,
          dispatch: a
        }),
        v
      );
    }
  };
  function u(m) {
    if (o && !m.touches || !e.apply(this, arguments)) return;
    var y = this, S = m.target.__data__.type, v = (s && m.metaKey ? S = "overlay" : S) === "selection" ? Na : s && m.altKey ? We : Fe, E = i === Xs ? null : Uc[S], x = i === rs ? null : Fc[S], b = Ys(y), _ = b.extent, k = b.selection, G = _[0][0], R, A, H = _[0][1], N, M, O = _[1][0], P, $, C = _[1][1], V, q, X = 0, F = 0, Z, rt = E && x && s && m.shiftKey, j, Y, K = Array.from(m.touches || [m], (et) => {
      const yt = et.identifier;
      return et = nn(et, y), et.point0 = et.slice(), et.identifier = yt, et;
    });
    va(y);
    var ot = h(y, arguments, !0).beforestart();
    if (S === "overlay") {
      k && (Z = !0);
      const et = [K[0], K[1] || K[0]];
      b.selection = k = [[
        R = i === Xs ? G : Nt(et[0][0], et[1][0]),
        N = i === rs ? H : Nt(et[0][1], et[1][1])
      ], [
        P = i === Xs ? O : Dt(et[0][0], et[1][0]),
        V = i === rs ? C : Dt(et[0][1], et[1][1])
      ]], K.length > 1 && z(m);
    } else
      R = k[0][0], N = k[0][1], P = k[1][0], V = k[1][1];
    A = R, M = N, $ = P, q = V;
    var ct = D(y).attr("pointer-events", "none"), st = ct.selectAll(".overlay").attr("cursor", fe[S]);
    if (m.touches)
      ot.moved = B, ot.ended = U;
    else {
      var it = D(m.view).on("mousemove.brush", B, !0).on("mouseup.brush", U, !0);
      s && it.on("keydown.brush", Mt, !0).on("keyup.brush", Se, !0), $c(m.view);
    }
    l.call(y), ot.start(m, v.name);
    function B(et) {
      for (const yt of et.changedTouches || [et])
        for (const Zt of K)
          Zt.identifier === yt.identifier && (Zt.cur = nn(yt, y));
      if (rt && !j && !Y && K.length === 1) {
        const yt = K[0];
        Pa(yt.cur[0] - yt[0]) > Pa(yt.cur[1] - yt[1]) ? Y = !0 : j = !0;
      }
      for (const yt of K)
        yt.cur && (yt[0] = yt.cur[0], yt[1] = yt.cur[1]);
      Z = !0, Fs(et), z(et);
    }
    function z(et) {
      const yt = K[0], Zt = yt.point0;
      var Wt;
      switch (X = yt[0] - Zt[0], F = yt[1] - Zt[1], v) {
        case Ws:
        case Na: {
          E && (X = Dt(G - R, Nt(O - P, X)), A = R + X, $ = P + X), x && (F = Dt(H - N, Nt(C - V, F)), M = N + F, q = V + F);
          break;
        }
        case Fe: {
          K[1] ? (E && (A = Dt(G, Nt(O, K[0][0])), $ = Dt(G, Nt(O, K[1][0])), E = 1), x && (M = Dt(H, Nt(C, K[0][1])), q = Dt(H, Nt(C, K[1][1])), x = 1)) : (E < 0 ? (X = Dt(G - R, Nt(O - R, X)), A = R + X, $ = P) : E > 0 && (X = Dt(G - P, Nt(O - P, X)), A = R, $ = P + X), x < 0 ? (F = Dt(H - N, Nt(C - N, F)), M = N + F, q = V) : x > 0 && (F = Dt(H - V, Nt(C - V, F)), M = N, q = V + F));
          break;
        }
        case We: {
          E && (A = Dt(G, Nt(O, R - X * E)), $ = Dt(G, Nt(O, P + X * E))), x && (M = Dt(H, Nt(C, N - F * x)), q = Dt(H, Nt(C, V + F * x)));
          break;
        }
      }
      $ < A && (E *= -1, Wt = R, R = P, P = Wt, Wt = A, A = $, $ = Wt, S in Ga && st.attr("cursor", fe[S = Ga[S]])), q < M && (x *= -1, Wt = N, N = V, V = Wt, Wt = M, M = q, q = Wt, S in Ha && st.attr("cursor", fe[S = Ha[S]])), b.selection && (k = b.selection), j && (A = k[0][0], $ = k[1][0]), Y && (M = k[0][1], q = k[1][1]), (k[0][0] !== A || k[0][1] !== M || k[1][0] !== $ || k[1][1] !== q) && (b.selection = [[A, M], [$, q]], l.call(y), ot.brush(et, v.name));
    }
    function U(et) {
      if (zc(et), et.touches) {
        if (et.touches.length) return;
        o && clearTimeout(o), o = setTimeout(function() {
          o = null;
        }, 500);
      } else
        Vc(et.view, Z), it.on("keydown.brush keyup.brush mousemove.brush mouseup.brush", null);
      ct.attr("pointer-events", "all"), st.attr("cursor", fe.overlay), b.selection && (k = b.selection), Zc(k) && (b.selection = null, l.call(y)), ot.end(et, v.name);
    }
    function Mt(et) {
      switch (et.keyCode) {
        case 16: {
          rt = E && x;
          break;
        }
        case 18: {
          v === Fe && (E && (P = $ - X * E, R = A + X * E), x && (V = q - F * x, N = M + F * x), v = We, z(et));
          break;
        }
        case 32: {
          (v === Fe || v === We) && (E < 0 ? P = $ - X : E > 0 && (R = A - X), x < 0 ? V = q - F : x > 0 && (N = M - F), v = Ws, st.attr("cursor", fe.selection), z(et));
          break;
        }
        default:
          return;
      }
      Fs(et);
    }
    function Se(et) {
      switch (et.keyCode) {
        case 16: {
          rt && (j = Y = rt = !1, z(et));
          break;
        }
        case 18: {
          v === We && (E < 0 ? P = $ : E > 0 && (R = A), x < 0 ? V = q : x > 0 && (N = M), v = Fe, z(et));
          break;
        }
        case 32: {
          v === Ws && (et.altKey ? (E && (P = $ - X * E, R = A + X * E), x && (V = q - F * x, N = M + F * x), v = We) : (E < 0 ? P = $ : E > 0 && (R = A), x < 0 ? V = q : x > 0 && (N = M), v = Fe), st.attr("cursor", fe[S]), z(et));
          break;
        }
        default:
          return;
      }
      Fs(et);
    }
  }
  function p(m) {
    h(this, arguments).moved(m);
  }
  function f(m) {
    h(this, arguments).ended(m);
  }
  function g() {
    var m = this.__brush || { selection: null };
    return m.extent = Va(t.apply(this, arguments)), m.dim = i, m;
  }
  return c.extent = function(m) {
    return arguments.length ? (t = typeof m == "function" ? m : Us(Va(m)), c) : t;
  }, c.filter = function(m) {
    return arguments.length ? (e = typeof m == "function" ? m : Us(!!m), c) : e;
  }, c.touchable = function(m) {
    return arguments.length ? (n = typeof m == "function" ? m : Us(!!m), c) : n;
  }, c.handleSize = function(m) {
    return arguments.length ? (r = +m, c) : r;
  }, c.keyModifiers = function(m) {
    return arguments.length ? (s = !!m, c) : s;
  }, c.on = function() {
    var m = a.on.apply(a, arguments);
    return m === a ? c : m;
  }, c;
}
const yi = Math.PI, Ei = 2 * yi, Ce = 1e-6, jc = Ei - Ce;
function po(i) {
  this._ += i[0];
  for (let t = 1, e = i.length; t < e; ++t)
    this._ += arguments[t] + i[t];
}
function Kc(i) {
  let t = Math.floor(i);
  if (!(t >= 0)) throw new Error(`invalid digits: ${i}`);
  if (t > 15) return po;
  const e = 10 ** t;
  return function(n) {
    this._ += n[0];
    for (let s = 1, a = n.length; s < a; ++s)
      this._ += Math.round(arguments[s] * e) / e + n[s];
  };
}
let Fi = class {
  constructor(t) {
    this._x0 = this._y0 = // start of current subpath
    this._x1 = this._y1 = null, this._ = "", this._append = t == null ? po : Kc(t);
  }
  moveTo(t, e) {
    this._append`M${this._x0 = this._x1 = +t},${this._y0 = this._y1 = +e}`;
  }
  closePath() {
    this._x1 !== null && (this._x1 = this._x0, this._y1 = this._y0, this._append`Z`);
  }
  lineTo(t, e) {
    this._append`L${this._x1 = +t},${this._y1 = +e}`;
  }
  quadraticCurveTo(t, e, n, s) {
    this._append`Q${+t},${+e},${this._x1 = +n},${this._y1 = +s}`;
  }
  bezierCurveTo(t, e, n, s, a, r) {
    this._append`C${+t},${+e},${+n},${+s},${this._x1 = +a},${this._y1 = +r}`;
  }
  arcTo(t, e, n, s, a) {
    if (t = +t, e = +e, n = +n, s = +s, a = +a, a < 0) throw new Error(`negative radius: ${a}`);
    let r = this._x1, o = this._y1, c = n - t, l = s - e, h = r - t, d = o - e, u = h * h + d * d;
    if (this._x1 === null)
      this._append`M${this._x1 = t},${this._y1 = e}`;
    else if (u > Ce) if (!(Math.abs(d * c - l * h) > Ce) || !a)
      this._append`L${this._x1 = t},${this._y1 = e}`;
    else {
      let p = n - r, f = s - o, g = c * c + l * l, m = p * p + f * f, y = Math.sqrt(g), S = Math.sqrt(u), v = a * Math.tan((yi - Math.acos((g + u - m) / (2 * y * S))) / 2), E = v / S, x = v / y;
      Math.abs(E - 1) > Ce && this._append`L${t + E * h},${e + E * d}`, this._append`A${a},${a},0,0,${+(d * p > h * f)},${this._x1 = t + x * c},${this._y1 = e + x * l}`;
    }
  }
  arc(t, e, n, s, a, r) {
    if (t = +t, e = +e, n = +n, r = !!r, n < 0) throw new Error(`negative radius: ${n}`);
    let o = n * Math.cos(s), c = n * Math.sin(s), l = t + o, h = e + c, d = 1 ^ r, u = r ? s - a : a - s;
    this._x1 === null ? this._append`M${l},${h}` : (Math.abs(this._x1 - l) > Ce || Math.abs(this._y1 - h) > Ce) && this._append`L${l},${h}`, n && (u < 0 && (u = u % Ei + Ei), u > jc ? this._append`A${n},${n},0,1,${d},${t - o},${e - c}A${n},${n},0,1,${d},${this._x1 = l},${this._y1 = h}` : u > Ce && this._append`A${n},${n},0,${+(u >= yi)},${d},${this._x1 = t + n * Math.cos(a)},${this._y1 = e + n * Math.sin(a)}`);
  }
  rect(t, e, n, s) {
    this._append`M${this._x0 = this._x1 = +t},${this._y0 = this._y1 = +e}h${n = +n}v${+s}h${-n}Z`;
  }
  toString() {
    return this._;
  }
};
function As() {
  return new Fi();
}
As.prototype = Fi.prototype;
var vt = 1e-6, Jc = 1e-12, ht = Math.PI, Ft = ht / 2, Ba = ht / 4, Yt = ht * 2, Vt = 180 / ht, Ot = ht / 180, gt = Math.abs, fo = Math.atan, Ne = Math.atan2, mt = Math.cos, Qc = Math.exp, tu = Math.log, ft = Math.sin, be = Math.sign || function(i) {
  return i > 0 ? 1 : i < 0 ? -1 : 0;
}, ae = Math.sqrt, eu = Math.tan;
function nu(i) {
  return i > 1 ? 0 : i < -1 ? ht : Math.acos(i);
}
function xe(i) {
  return i > 1 ? Ft : i < -1 ? -Ft : Math.asin(i);
}
function Qt() {
}
function hs(i, t) {
  i && Ua.hasOwnProperty(i.type) && Ua[i.type](i, t);
}
var za = {
  Feature: function(i, t) {
    hs(i.geometry, t);
  },
  FeatureCollection: function(i, t) {
    for (var e = i.features, n = -1, s = e.length; ++n < s; ) hs(e[n].geometry, t);
  }
}, Ua = {
  Sphere: function(i, t) {
    t.sphere();
  },
  Point: function(i, t) {
    i = i.coordinates, t.point(i[0], i[1], i[2]);
  },
  MultiPoint: function(i, t) {
    for (var e = i.coordinates, n = -1, s = e.length; ++n < s; ) i = e[n], t.point(i[0], i[1], i[2]);
  },
  LineString: function(i, t) {
    xi(i.coordinates, t, 0);
  },
  MultiLineString: function(i, t) {
    for (var e = i.coordinates, n = -1, s = e.length; ++n < s; ) xi(e[n], t, 0);
  },
  Polygon: function(i, t) {
    Fa(i.coordinates, t);
  },
  MultiPolygon: function(i, t) {
    for (var e = i.coordinates, n = -1, s = e.length; ++n < s; ) Fa(e[n], t);
  },
  GeometryCollection: function(i, t) {
    for (var e = i.geometries, n = -1, s = e.length; ++n < s; ) hs(e[n], t);
  }
};
function xi(i, t, e) {
  var n = -1, s = i.length - e, a;
  for (t.lineStart(); ++n < s; ) a = i[n], t.point(a[0], a[1], a[2]);
  t.lineEnd();
}
function Fa(i, t) {
  var e = -1, n = i.length;
  for (t.polygonStart(); ++e < n; ) xi(i[e], t, 1);
  t.polygonEnd();
}
function Ze(i, t) {
  i && za.hasOwnProperty(i.type) ? za[i.type](i, t) : hs(i, t);
}
function Si(i) {
  return [Ne(i[1], i[0]), xe(i[2])];
}
function sn(i) {
  var t = i[0], e = i[1], n = mt(e);
  return [n * mt(t), n * ft(t), ft(e)];
}
function Fn(i, t) {
  return i[0] * t[0] + i[1] * t[1] + i[2] * t[2];
}
function ds(i, t) {
  return [i[1] * t[2] - i[2] * t[1], i[2] * t[0] - i[0] * t[2], i[0] * t[1] - i[1] * t[0]];
}
function Zs(i, t) {
  i[0] += t[0], i[1] += t[1], i[2] += t[2];
}
function Wn(i, t) {
  return [i[0] * t, i[1] * t, i[2] * t];
}
function Ti(i) {
  var t = ae(i[0] * i[0] + i[1] * i[1] + i[2] * i[2]);
  i[0] /= t, i[1] /= t, i[2] /= t;
}
function bi(i, t) {
  function e(n, s) {
    return n = i(n, s), t(n[0], n[1]);
  }
  return i.invert && t.invert && (e.invert = function(n, s) {
    return n = t.invert(n, s), n && i.invert(n[0], n[1]);
  }), e;
}
function Oi(i, t) {
  return gt(i) > ht && (i -= Math.round(i / Yt) * Yt), [i, t];
}
Oi.invert = Oi;
function go(i, t, e) {
  return (i %= Yt) ? t || e ? bi(Xa(i), Ya(t, e)) : Xa(i) : t || e ? Ya(t, e) : Oi;
}
function Wa(i) {
  return function(t, e) {
    return t += i, gt(t) > ht && (t -= Math.round(t / Yt) * Yt), [t, e];
  };
}
function Xa(i) {
  var t = Wa(i);
  return t.invert = Wa(-i), t;
}
function Ya(i, t) {
  var e = mt(i), n = ft(i), s = mt(t), a = ft(t);
  function r(o, c) {
    var l = mt(c), h = mt(o) * l, d = ft(o) * l, u = ft(c), p = u * e + h * n;
    return [
      Ne(d * s - p * a, h * e - u * n),
      xe(p * s + d * a)
    ];
  }
  return r.invert = function(o, c) {
    var l = mt(c), h = mt(o) * l, d = ft(o) * l, u = ft(c), p = u * s - d * a;
    return [
      Ne(d * s + u * a, h * e + p * n),
      xe(p * e - h * n)
    ];
  }, r;
}
function su(i) {
  i = go(i[0] * Ot, i[1] * Ot, i.length > 2 ? i[2] * Ot : 0);
  function t(e) {
    return e = i(e[0] * Ot, e[1] * Ot), e[0] *= Vt, e[1] *= Vt, e;
  }
  return t.invert = function(e) {
    return e = i.invert(e[0] * Ot, e[1] * Ot), e[0] *= Vt, e[1] *= Vt, e;
  }, t;
}
function iu(i, t, e, n, s, a) {
  if (e) {
    var r = mt(t), o = ft(t), c = n * e;
    s == null ? (s = t + n * Yt, a = t - c / 2) : (s = Za(r, s), a = Za(r, a), (n > 0 ? s < a : s > a) && (s += n * Yt));
    for (var l, h = s; n > 0 ? h > a : h < a; h -= c)
      l = Si([r, -o * mt(h), -o * ft(h)]), i.point(l[0], l[1]);
  }
}
function Za(i, t) {
  t = sn(t), t[0] -= i, Ti(t);
  var e = nu(-t[1]);
  return ((-t[2] < 0 ? -e : e) + Yt - vt) % Yt;
}
function mo() {
  var i = [], t;
  return {
    point: function(e, n, s) {
      t.push([e, n, s]);
    },
    lineStart: function() {
      i.push(t = []);
    },
    lineEnd: Qt,
    rejoin: function() {
      i.length > 1 && i.push(i.pop().concat(i.shift()));
    },
    result: function() {
      var e = i;
      return i = [], t = null, e;
    }
  };
}
function os(i, t) {
  return gt(i[0] - t[0]) < vt && gt(i[1] - t[1]) < vt;
}
function Xn(i, t, e, n) {
  this.x = i, this.z = t, this.o = e, this.e = n, this.v = !1, this.n = this.p = null;
}
function vo(i, t, e, n, s) {
  var a = [], r = [], o, c;
  if (i.forEach(function(f) {
    if (!((g = f.length - 1) <= 0)) {
      var g, m = f[0], y = f[g], S;
      if (os(m, y)) {
        if (!m[2] && !y[2]) {
          for (s.lineStart(), o = 0; o < g; ++o) s.point((m = f[o])[0], m[1]);
          s.lineEnd();
          return;
        }
        y[0] += 2 * vt;
      }
      a.push(S = new Xn(m, f, null, !0)), r.push(S.o = new Xn(m, null, S, !1)), a.push(S = new Xn(y, f, null, !1)), r.push(S.o = new Xn(y, null, S, !0));
    }
  }), !!a.length) {
    for (r.sort(t), qa(a), qa(r), o = 0, c = r.length; o < c; ++o)
      r[o].e = e = !e;
    for (var l = a[0], h, d; ; ) {
      for (var u = l, p = !0; u.v; ) if ((u = u.n) === l) return;
      h = u.z, s.lineStart();
      do {
        if (u.v = u.o.v = !0, u.e) {
          if (p)
            for (o = 0, c = h.length; o < c; ++o) s.point((d = h[o])[0], d[1]);
          else
            n(u.x, u.n.x, 1, s);
          u = u.n;
        } else {
          if (p)
            for (h = u.p.z, o = h.length - 1; o >= 0; --o) s.point((d = h[o])[0], d[1]);
          else
            n(u.x, u.p.x, -1, s);
          u = u.p;
        }
        u = u.o, h = u.z, p = !p;
      } while (!u.v);
      s.lineEnd();
    }
  }
}
function qa(i) {
  if (t = i.length) {
    for (var t, e = 0, n = i[0], s; ++e < t; )
      n.n = s = i[e], s.p = n, n = s;
    n.n = s = i[0], s.p = n;
  }
}
function qs(i) {
  return gt(i[0]) <= ht ? i[0] : be(i[0]) * ((gt(i[0]) + ht) % Yt - ht);
}
function au(i, t) {
  var e = qs(t), n = t[1], s = ft(n), a = [ft(e), -mt(e), 0], r = 0, o = 0, c = new De();
  s === 1 ? n = Ft + vt : s === -1 && (n = -Ft - vt);
  for (var l = 0, h = i.length; l < h; ++l)
    if (u = (d = i[l]).length)
      for (var d, u, p = d[u - 1], f = qs(p), g = p[1] / 2 + Ba, m = ft(g), y = mt(g), S = 0; S < u; ++S, f = E, m = b, y = _, p = v) {
        var v = d[S], E = qs(v), x = v[1] / 2 + Ba, b = ft(x), _ = mt(x), k = E - f, G = k >= 0 ? 1 : -1, R = G * k, A = R > ht, H = m * b;
        if (c.add(Ne(H * G * ft(R), y * _ + H * mt(R))), r += A ? k + G * Yt : k, A ^ f >= e ^ E >= e) {
          var N = ds(sn(p), sn(v));
          Ti(N);
          var M = ds(a, N);
          Ti(M);
          var O = (A ^ k >= 0 ? -1 : 1) * xe(M[2]);
          (n > O || n === O && (N[0] || N[1])) && (o += A ^ k >= 0 ? 1 : -1);
        }
      }
  return (r < -1e-6 || r < vt && c < -1e-12) ^ o & 1;
}
function yo(i, t, e, n) {
  return function(s) {
    var a = t(s), r = mo(), o = t(r), c = !1, l, h, d, u = {
      point: p,
      lineStart: g,
      lineEnd: m,
      polygonStart: function() {
        u.point = y, u.lineStart = S, u.lineEnd = v, h = [], l = [];
      },
      polygonEnd: function() {
        u.point = p, u.lineStart = g, u.lineEnd = m, h = co(h);
        var E = au(l, n);
        h.length ? (c || (s.polygonStart(), c = !0), vo(h, ou, E, e, s)) : E && (c || (s.polygonStart(), c = !0), s.lineStart(), e(null, null, 1, s), s.lineEnd()), c && (s.polygonEnd(), c = !1), h = l = null;
      },
      sphere: function() {
        s.polygonStart(), s.lineStart(), e(null, null, 1, s), s.lineEnd(), s.polygonEnd();
      }
    };
    function p(E, x) {
      i(E, x) && s.point(E, x);
    }
    function f(E, x) {
      a.point(E, x);
    }
    function g() {
      u.point = f, a.lineStart();
    }
    function m() {
      u.point = p, a.lineEnd();
    }
    function y(E, x) {
      d.push([E, x]), o.point(E, x);
    }
    function S() {
      o.lineStart(), d = [];
    }
    function v() {
      y(d[0][0], d[0][1]), o.lineEnd();
      var E = o.clean(), x = r.result(), b, _ = x.length, k, G, R;
      if (d.pop(), l.push(d), d = null, !!_) {
        if (E & 1) {
          if (G = x[0], (k = G.length - 1) > 0) {
            for (c || (s.polygonStart(), c = !0), s.lineStart(), b = 0; b < k; ++b) s.point((R = G[b])[0], R[1]);
            s.lineEnd();
          }
          return;
        }
        _ > 1 && E & 2 && x.push(x.pop().concat(x.shift())), h.push(x.filter(ru));
      }
    }
    return u;
  };
}
function ru(i) {
  return i.length > 1;
}
function ou(i, t) {
  return ((i = i.x)[0] < 0 ? i[1] - Ft - vt : Ft - i[1]) - ((t = t.x)[0] < 0 ? t[1] - Ft - vt : Ft - t[1]);
}
const ja = yo(
  function() {
    return !0;
  },
  lu,
  uu,
  [-ht, -Ft]
);
function lu(i) {
  var t = NaN, e = NaN, n = NaN, s;
  return {
    lineStart: function() {
      i.lineStart(), s = 1;
    },
    point: function(a, r) {
      var o = a > 0 ? ht : -ht, c = gt(a - t);
      gt(c - ht) < vt ? (i.point(t, e = (e + r) / 2 > 0 ? Ft : -Ft), i.point(n, e), i.lineEnd(), i.lineStart(), i.point(o, e), i.point(a, e), s = 0) : n !== o && c >= ht && (gt(t - n) < vt && (t -= n * vt), gt(a - o) < vt && (a -= o * vt), e = cu(t, e, a, r), i.point(n, e), i.lineEnd(), i.lineStart(), i.point(o, e), s = 0), i.point(t = a, e = r), n = o;
    },
    lineEnd: function() {
      i.lineEnd(), t = e = NaN;
    },
    clean: function() {
      return 2 - s;
    }
  };
}
function cu(i, t, e, n) {
  var s, a, r = ft(i - e);
  return gt(r) > vt ? fo((ft(t) * (a = mt(n)) * ft(e) - ft(n) * (s = mt(t)) * ft(i)) / (s * a * r)) : (t + n) / 2;
}
function uu(i, t, e, n) {
  var s;
  if (i == null)
    s = e * Ft, n.point(-ht, s), n.point(0, s), n.point(ht, s), n.point(ht, 0), n.point(ht, -s), n.point(0, -s), n.point(-ht, -s), n.point(-ht, 0), n.point(-ht, s);
  else if (gt(i[0] - t[0]) > vt) {
    var a = i[0] < t[0] ? ht : -ht;
    s = e * a / 2, n.point(-a, s), n.point(0, s), n.point(a, s);
  } else
    n.point(t[0], t[1]);
}
function hu(i) {
  var t = mt(i), e = 2 * Ot, n = t > 0, s = gt(t) > vt;
  function a(h, d, u, p) {
    iu(p, i, e, u, h, d);
  }
  function r(h, d) {
    return mt(h) * mt(d) > t;
  }
  function o(h) {
    var d, u, p, f, g;
    return {
      lineStart: function() {
        f = p = !1, g = 1;
      },
      point: function(m, y) {
        var S = [m, y], v, E = r(m, y), x = n ? E ? 0 : l(m, y) : E ? l(m + (m < 0 ? ht : -ht), y) : 0;
        if (!d && (f = p = E) && h.lineStart(), E !== p && (v = c(d, S), (!v || os(d, v) || os(S, v)) && (S[2] = 1)), E !== p)
          g = 0, E ? (h.lineStart(), v = c(S, d), h.point(v[0], v[1])) : (v = c(d, S), h.point(v[0], v[1], 2), h.lineEnd()), d = v;
        else if (s && d && n ^ E) {
          var b;
          !(x & u) && (b = c(S, d, !0)) && (g = 0, n ? (h.lineStart(), h.point(b[0][0], b[0][1]), h.point(b[1][0], b[1][1]), h.lineEnd()) : (h.point(b[1][0], b[1][1]), h.lineEnd(), h.lineStart(), h.point(b[0][0], b[0][1], 3)));
        }
        E && (!d || !os(d, S)) && h.point(S[0], S[1]), d = S, p = E, u = x;
      },
      lineEnd: function() {
        p && h.lineEnd(), d = null;
      },
      // Rejoin first and last segments if there were intersections and the first
      // and last points were visible.
      clean: function() {
        return g | (f && p) << 1;
      }
    };
  }
  function c(h, d, u) {
    var p = sn(h), f = sn(d), g = [1, 0, 0], m = ds(p, f), y = Fn(m, m), S = m[0], v = y - S * S;
    if (!v) return !u && h;
    var E = t * y / v, x = -t * S / v, b = ds(g, m), _ = Wn(g, E), k = Wn(m, x);
    Zs(_, k);
    var G = b, R = Fn(_, G), A = Fn(G, G), H = R * R - A * (Fn(_, _) - 1);
    if (!(H < 0)) {
      var N = ae(H), M = Wn(G, (-R - N) / A);
      if (Zs(M, _), M = Si(M), !u) return M;
      var O = h[0], P = d[0], $ = h[1], C = d[1], V;
      P < O && (V = O, O = P, P = V);
      var q = P - O, X = gt(q - ht) < vt, F = X || q < vt;
      if (!X && C < $ && (V = $, $ = C, C = V), F ? X ? $ + C > 0 ^ M[1] < (gt(M[0] - O) < vt ? $ : C) : $ <= M[1] && M[1] <= C : q > ht ^ (O <= M[0] && M[0] <= P)) {
        var Z = Wn(G, (-R + N) / A);
        return Zs(Z, _), [M, Si(Z)];
      }
    }
  }
  function l(h, d) {
    var u = n ? i : ht - i, p = 0;
    return h < -u ? p |= 1 : h > u && (p |= 2), d < -u ? p |= 4 : d > u && (p |= 8), p;
  }
  return yo(r, o, a, n ? [0, -i] : [-ht, i - ht]);
}
function du(i, t, e, n, s, a) {
  var r = i[0], o = i[1], c = t[0], l = t[1], h = 0, d = 1, u = c - r, p = l - o, f;
  if (f = e - r, !(!u && f > 0)) {
    if (f /= u, u < 0) {
      if (f < h) return;
      f < d && (d = f);
    } else if (u > 0) {
      if (f > d) return;
      f > h && (h = f);
    }
    if (f = s - r, !(!u && f < 0)) {
      if (f /= u, u < 0) {
        if (f > d) return;
        f > h && (h = f);
      } else if (u > 0) {
        if (f < h) return;
        f < d && (d = f);
      }
      if (f = n - o, !(!p && f > 0)) {
        if (f /= p, p < 0) {
          if (f < h) return;
          f < d && (d = f);
        } else if (p > 0) {
          if (f > d) return;
          f > h && (h = f);
        }
        if (f = a - o, !(!p && f < 0)) {
          if (f /= p, p < 0) {
            if (f > d) return;
            f > h && (h = f);
          } else if (p > 0) {
            if (f < h) return;
            f < d && (d = f);
          }
          return h > 0 && (i[0] = r + h * u, i[1] = o + h * p), d < 1 && (t[0] = r + d * u, t[1] = o + d * p), !0;
        }
      }
    }
  }
}
var Yn = 1e9, Zn = -1e9;
function pu(i, t, e, n) {
  function s(l, h) {
    return i <= l && l <= e && t <= h && h <= n;
  }
  function a(l, h, d, u) {
    var p = 0, f = 0;
    if (l == null || (p = r(l, d)) !== (f = r(h, d)) || c(l, h) < 0 ^ d > 0)
      do
        u.point(p === 0 || p === 3 ? i : e, p > 1 ? n : t);
      while ((p = (p + d + 4) % 4) !== f);
    else
      u.point(h[0], h[1]);
  }
  function r(l, h) {
    return gt(l[0] - i) < vt ? h > 0 ? 0 : 3 : gt(l[0] - e) < vt ? h > 0 ? 2 : 1 : gt(l[1] - t) < vt ? h > 0 ? 1 : 0 : h > 0 ? 3 : 2;
  }
  function o(l, h) {
    return c(l.x, h.x);
  }
  function c(l, h) {
    var d = r(l, 1), u = r(h, 1);
    return d !== u ? d - u : d === 0 ? h[1] - l[1] : d === 1 ? l[0] - h[0] : d === 2 ? l[1] - h[1] : h[0] - l[0];
  }
  return function(l) {
    var h = l, d = mo(), u, p, f, g, m, y, S, v, E, x, b, _ = {
      point: k,
      lineStart: H,
      lineEnd: N,
      polygonStart: R,
      polygonEnd: A
    };
    function k(O, P) {
      s(O, P) && h.point(O, P);
    }
    function G() {
      for (var O = 0, P = 0, $ = p.length; P < $; ++P)
        for (var C = p[P], V = 1, q = C.length, X = C[0], F, Z, rt = X[0], j = X[1]; V < q; ++V)
          F = rt, Z = j, X = C[V], rt = X[0], j = X[1], Z <= n ? j > n && (rt - F) * (n - Z) > (j - Z) * (i - F) && ++O : j <= n && (rt - F) * (n - Z) < (j - Z) * (i - F) && --O;
      return O;
    }
    function R() {
      h = d, u = [], p = [], b = !0;
    }
    function A() {
      var O = G(), P = b && O, $ = (u = co(u)).length;
      (P || $) && (l.polygonStart(), P && (l.lineStart(), a(null, null, 1, l), l.lineEnd()), $ && vo(u, o, O, a, l), l.polygonEnd()), h = l, u = p = f = null;
    }
    function H() {
      _.point = M, p && p.push(f = []), x = !0, E = !1, S = v = NaN;
    }
    function N() {
      u && (M(g, m), y && E && d.rejoin(), u.push(d.result())), _.point = k, E && h.lineEnd();
    }
    function M(O, P) {
      var $ = s(O, P);
      if (p && f.push([O, P]), x)
        g = O, m = P, y = $, x = !1, $ && (h.lineStart(), h.point(O, P));
      else if ($ && E) h.point(O, P);
      else {
        var C = [S = Math.max(Zn, Math.min(Yn, S)), v = Math.max(Zn, Math.min(Yn, v))], V = [O = Math.max(Zn, Math.min(Yn, O)), P = Math.max(Zn, Math.min(Yn, P))];
        du(C, V, i, t, e, n) ? (E || (h.lineStart(), h.point(C[0], C[1])), h.point(V[0], V[1]), $ || h.lineEnd(), b = !1) : $ && (h.lineStart(), h.point(O, P), b = !1);
      }
      S = O, v = P, E = $;
    }
    return _;
  };
}
const Li = (i) => i;
var js = new De(), Ai = new De(), Eo, xo, Mi, wi, ye = {
  point: Qt,
  lineStart: Qt,
  lineEnd: Qt,
  polygonStart: function() {
    ye.lineStart = fu, ye.lineEnd = mu;
  },
  polygonEnd: function() {
    ye.lineStart = ye.lineEnd = ye.point = Qt, js.add(gt(Ai)), Ai = new De();
  },
  result: function() {
    var i = js / 2;
    return js = new De(), i;
  }
};
function fu() {
  ye.point = gu;
}
function gu(i, t) {
  ye.point = So, Eo = Mi = i, xo = wi = t;
}
function So(i, t) {
  Ai.add(wi * i - Mi * t), Mi = i, wi = t;
}
function mu() {
  So(Eo, xo);
}
var an = 1 / 0, ps = an, Cn = -an, fs = Cn, gs = {
  point: vu,
  lineStart: Qt,
  lineEnd: Qt,
  polygonStart: Qt,
  polygonEnd: Qt,
  result: function() {
    var i = [[an, ps], [Cn, fs]];
    return Cn = fs = -(ps = an = 1 / 0), i;
  }
};
function vu(i, t) {
  i < an && (an = i), i > Cn && (Cn = i), t < ps && (ps = t), t > fs && (fs = t);
}
var Ci = 0, ki = 0, En = 0, ms = 0, vs = 0, Qe = 0, _i = 0, Ii = 0, xn = 0, To, bo, ce, ue, Jt = {
  point: Pe,
  lineStart: Ka,
  lineEnd: Ja,
  polygonStart: function() {
    Jt.lineStart = xu, Jt.lineEnd = Su;
  },
  polygonEnd: function() {
    Jt.point = Pe, Jt.lineStart = Ka, Jt.lineEnd = Ja;
  },
  result: function() {
    var i = xn ? [_i / xn, Ii / xn] : Qe ? [ms / Qe, vs / Qe] : En ? [Ci / En, ki / En] : [NaN, NaN];
    return Ci = ki = En = ms = vs = Qe = _i = Ii = xn = 0, i;
  }
};
function Pe(i, t) {
  Ci += i, ki += t, ++En;
}
function Ka() {
  Jt.point = yu;
}
function yu(i, t) {
  Jt.point = Eu, Pe(ce = i, ue = t);
}
function Eu(i, t) {
  var e = i - ce, n = t - ue, s = ae(e * e + n * n);
  ms += s * (ce + i) / 2, vs += s * (ue + t) / 2, Qe += s, Pe(ce = i, ue = t);
}
function Ja() {
  Jt.point = Pe;
}
function xu() {
  Jt.point = Tu;
}
function Su() {
  Oo(To, bo);
}
function Tu(i, t) {
  Jt.point = Oo, Pe(To = ce = i, bo = ue = t);
}
function Oo(i, t) {
  var e = i - ce, n = t - ue, s = ae(e * e + n * n);
  ms += s * (ce + i) / 2, vs += s * (ue + t) / 2, Qe += s, s = ue * i - ce * t, _i += s * (ce + i), Ii += s * (ue + t), xn += s * 3, Pe(ce = i, ue = t);
}
function Lo(i) {
  this._context = i;
}
Lo.prototype = {
  _radius: 4.5,
  pointRadius: function(i) {
    return this._radius = i, this;
  },
  polygonStart: function() {
    this._line = 0;
  },
  polygonEnd: function() {
    this._line = NaN;
  },
  lineStart: function() {
    this._point = 0;
  },
  lineEnd: function() {
    this._line === 0 && this._context.closePath(), this._point = NaN;
  },
  point: function(i, t) {
    switch (this._point) {
      case 0: {
        this._context.moveTo(i, t), this._point = 1;
        break;
      }
      case 1: {
        this._context.lineTo(i, t);
        break;
      }
      default: {
        this._context.moveTo(i + this._radius, t), this._context.arc(i, t, this._radius, 0, Yt);
        break;
      }
    }
  },
  result: Qt
};
var Ri = new De(), Ks, Ao, Mo, Sn, Tn, kn = {
  point: Qt,
  lineStart: function() {
    kn.point = bu;
  },
  lineEnd: function() {
    Ks && wo(Ao, Mo), kn.point = Qt;
  },
  polygonStart: function() {
    Ks = !0;
  },
  polygonEnd: function() {
    Ks = null;
  },
  result: function() {
    var i = +Ri;
    return Ri = new De(), i;
  }
};
function bu(i, t) {
  kn.point = wo, Ao = Sn = i, Mo = Tn = t;
}
function wo(i, t) {
  Sn -= i, Tn -= t, Ri.add(ae(Sn * Sn + Tn * Tn)), Sn = i, Tn = t;
}
let Qa, ys, tr, er;
class nr {
  constructor(t) {
    this._append = t == null ? Co : Ou(t), this._radius = 4.5, this._ = "";
  }
  pointRadius(t) {
    return this._radius = +t, this;
  }
  polygonStart() {
    this._line = 0;
  }
  polygonEnd() {
    this._line = NaN;
  }
  lineStart() {
    this._point = 0;
  }
  lineEnd() {
    this._line === 0 && (this._ += "Z"), this._point = NaN;
  }
  point(t, e) {
    switch (this._point) {
      case 0: {
        this._append`M${t},${e}`, this._point = 1;
        break;
      }
      case 1: {
        this._append`L${t},${e}`;
        break;
      }
      default: {
        if (this._append`M${t},${e}`, this._radius !== tr || this._append !== ys) {
          const n = this._radius, s = this._;
          this._ = "", this._append`m0,${n}a${n},${n} 0 1,1 0,${-2 * n}a${n},${n} 0 1,1 0,${2 * n}z`, tr = n, ys = this._append, er = this._, this._ = s;
        }
        this._ += er;
        break;
      }
    }
  }
  result() {
    const t = this._;
    return this._ = "", t.length ? t : null;
  }
}
function Co(i) {
  let t = 1;
  this._ += i[0];
  for (const e = i.length; t < e; ++t)
    this._ += arguments[t] + i[t];
}
function Ou(i) {
  const t = Math.floor(i);
  if (!(t >= 0)) throw new RangeError(`invalid digits: ${i}`);
  if (t > 15) return Co;
  if (t !== Qa) {
    const e = 10 ** t;
    Qa = t, ys = function(s) {
      let a = 1;
      this._ += s[0];
      for (const r = s.length; a < r; ++a)
        this._ += Math.round(arguments[a] * e) / e + s[a];
    };
  }
  return ys;
}
function Lu(i, t) {
  let e = 3, n = 4.5, s, a;
  function r(o) {
    return o && (typeof n == "function" && a.pointRadius(+n.apply(this, arguments)), Ze(o, s(a))), a.result();
  }
  return r.area = function(o) {
    return Ze(o, s(ye)), ye.result();
  }, r.measure = function(o) {
    return Ze(o, s(kn)), kn.result();
  }, r.bounds = function(o) {
    return Ze(o, s(gs)), gs.result();
  }, r.centroid = function(o) {
    return Ze(o, s(Jt)), Jt.result();
  }, r.projection = function(o) {
    return arguments.length ? (s = o == null ? (i = null, Li) : (i = o).stream, r) : i;
  }, r.context = function(o) {
    return arguments.length ? (a = o == null ? (t = null, new nr(e)) : new Lo(t = o), typeof n != "function" && a.pointRadius(n), r) : t;
  }, r.pointRadius = function(o) {
    return arguments.length ? (n = typeof o == "function" ? o : (a.pointRadius(+o), +o), r) : n;
  }, r.digits = function(o) {
    if (!arguments.length) return e;
    if (o == null) e = null;
    else {
      const c = Math.floor(o);
      if (!(c >= 0)) throw new RangeError(`invalid digits: ${o}`);
      e = c;
    }
    return t === null && (a = new nr(e)), r;
  }, r.projection(i).digits(e).context(t);
}
function Wi(i) {
  return function(t) {
    var e = new Di();
    for (var n in i) e[n] = i[n];
    return e.stream = t, e;
  };
}
function Di() {
}
Di.prototype = {
  constructor: Di,
  point: function(i, t) {
    this.stream.point(i, t);
  },
  sphere: function() {
    this.stream.sphere();
  },
  lineStart: function() {
    this.stream.lineStart();
  },
  lineEnd: function() {
    this.stream.lineEnd();
  },
  polygonStart: function() {
    this.stream.polygonStart();
  },
  polygonEnd: function() {
    this.stream.polygonEnd();
  }
};
function Xi(i, t, e) {
  var n = i.clipExtent && i.clipExtent();
  return i.scale(150).translate([0, 0]), n != null && i.clipExtent(null), Ze(e, i.stream(gs)), t(gs.result()), n != null && i.clipExtent(n), i;
}
function ko(i, t, e) {
  return Xi(i, function(n) {
    var s = t[1][0] - t[0][0], a = t[1][1] - t[0][1], r = Math.min(s / (n[1][0] - n[0][0]), a / (n[1][1] - n[0][1])), o = +t[0][0] + (s - r * (n[1][0] + n[0][0])) / 2, c = +t[0][1] + (a - r * (n[1][1] + n[0][1])) / 2;
    i.scale(150 * r).translate([o, c]);
  }, e);
}
function Au(i, t, e) {
  return ko(i, [[0, 0], t], e);
}
function Mu(i, t, e) {
  return Xi(i, function(n) {
    var s = +t, a = s / (n[1][0] - n[0][0]), r = (s - a * (n[1][0] + n[0][0])) / 2, o = -a * n[0][1];
    i.scale(150 * a).translate([r, o]);
  }, e);
}
function wu(i, t, e) {
  return Xi(i, function(n) {
    var s = +t, a = s / (n[1][1] - n[0][1]), r = -a * n[0][0], o = (s - a * (n[1][1] + n[0][1])) / 2;
    i.scale(150 * a).translate([r, o]);
  }, e);
}
var sr = 16, Cu = mt(30 * Ot);
function ir(i, t) {
  return +t ? _u(i, t) : ku(i);
}
function ku(i) {
  return Wi({
    point: function(t, e) {
      t = i(t, e), this.stream.point(t[0], t[1]);
    }
  });
}
function _u(i, t) {
  function e(n, s, a, r, o, c, l, h, d, u, p, f, g, m) {
    var y = l - n, S = h - s, v = y * y + S * S;
    if (v > 4 * t && g--) {
      var E = r + u, x = o + p, b = c + f, _ = ae(E * E + x * x + b * b), k = xe(b /= _), G = gt(gt(b) - 1) < vt || gt(a - d) < vt ? (a + d) / 2 : Ne(x, E), R = i(G, k), A = R[0], H = R[1], N = A - n, M = H - s, O = S * N - y * M;
      (O * O / v > t || gt((y * N + S * M) / v - 0.5) > 0.3 || r * u + o * p + c * f < Cu) && (e(n, s, a, r, o, c, A, H, G, E /= _, x /= _, b, g, m), m.point(A, H), e(A, H, G, E, x, b, l, h, d, u, p, f, g, m));
    }
  }
  return function(n) {
    var s, a, r, o, c, l, h, d, u, p, f, g, m = {
      point: y,
      lineStart: S,
      lineEnd: E,
      polygonStart: function() {
        n.polygonStart(), m.lineStart = x;
      },
      polygonEnd: function() {
        n.polygonEnd(), m.lineStart = S;
      }
    };
    function y(k, G) {
      k = i(k, G), n.point(k[0], k[1]);
    }
    function S() {
      d = NaN, m.point = v, n.lineStart();
    }
    function v(k, G) {
      var R = sn([k, G]), A = i(k, G);
      e(d, u, h, p, f, g, d = A[0], u = A[1], h = k, p = R[0], f = R[1], g = R[2], sr, n), n.point(d, u);
    }
    function E() {
      m.point = y, n.lineEnd();
    }
    function x() {
      S(), m.point = b, m.lineEnd = _;
    }
    function b(k, G) {
      v(s = k, G), a = d, r = u, o = p, c = f, l = g, m.point = v;
    }
    function _() {
      e(d, u, h, p, f, g, a, r, s, o, c, l, sr, n), m.lineEnd = E, E();
    }
    return m;
  };
}
var Iu = Wi({
  point: function(i, t) {
    this.stream.point(i * Ot, t * Ot);
  }
});
function Ru(i) {
  return Wi({
    point: function(t, e) {
      var n = i(t, e);
      return this.stream.point(n[0], n[1]);
    }
  });
}
function Du(i, t, e, n, s) {
  function a(r, o) {
    return r *= n, o *= s, [t + i * r, e - i * o];
  }
  return a.invert = function(r, o) {
    return [(r - t) / i * n, (e - o) / i * s];
  }, a;
}
function ar(i, t, e, n, s, a) {
  if (!a) return Du(i, t, e, n, s);
  var r = mt(a), o = ft(a), c = r * i, l = o * i, h = r / i, d = o / i, u = (o * e - r * t) / i, p = (o * t + r * e) / i;
  function f(g, m) {
    return g *= n, m *= s, [c * g - l * m + t, e - l * g - c * m];
  }
  return f.invert = function(g, m) {
    return [n * (h * g - d * m + u), s * (p - d * g - h * m)];
  }, f;
}
function Ms(i) {
  return _o(function() {
    return i;
  })();
}
function _o(i) {
  var t, e = 150, n = 480, s = 250, a = 0, r = 0, o = 0, c = 0, l = 0, h, d = 0, u = 1, p = 1, f = null, g = ja, m = null, y, S, v, E = Li, x = 0.5, b, _, k, G, R;
  function A(O) {
    return k(O[0] * Ot, O[1] * Ot);
  }
  function H(O) {
    return O = k.invert(O[0], O[1]), O && [O[0] * Vt, O[1] * Vt];
  }
  A.stream = function(O) {
    return G && R === O ? G : G = Iu(Ru(h)(g(b(E(R = O)))));
  }, A.preclip = function(O) {
    return arguments.length ? (g = O, f = void 0, M()) : g;
  }, A.postclip = function(O) {
    return arguments.length ? (E = O, m = y = S = v = null, M()) : E;
  }, A.clipAngle = function(O) {
    return arguments.length ? (g = +O ? hu(f = O * Ot) : (f = null, ja), M()) : f * Vt;
  }, A.clipExtent = function(O) {
    return arguments.length ? (E = O == null ? (m = y = S = v = null, Li) : pu(m = +O[0][0], y = +O[0][1], S = +O[1][0], v = +O[1][1]), M()) : m == null ? null : [[m, y], [S, v]];
  }, A.scale = function(O) {
    return arguments.length ? (e = +O, N()) : e;
  }, A.translate = function(O) {
    return arguments.length ? (n = +O[0], s = +O[1], N()) : [n, s];
  }, A.center = function(O) {
    return arguments.length ? (a = O[0] % 360 * Ot, r = O[1] % 360 * Ot, N()) : [a * Vt, r * Vt];
  }, A.rotate = function(O) {
    return arguments.length ? (o = O[0] % 360 * Ot, c = O[1] % 360 * Ot, l = O.length > 2 ? O[2] % 360 * Ot : 0, N()) : [o * Vt, c * Vt, l * Vt];
  }, A.angle = function(O) {
    return arguments.length ? (d = O % 360 * Ot, N()) : d * Vt;
  }, A.reflectX = function(O) {
    return arguments.length ? (u = O ? -1 : 1, N()) : u < 0;
  }, A.reflectY = function(O) {
    return arguments.length ? (p = O ? -1 : 1, N()) : p < 0;
  }, A.precision = function(O) {
    return arguments.length ? (b = ir(_, x = O * O), M()) : ae(x);
  }, A.fitExtent = function(O, P) {
    return ko(A, O, P);
  }, A.fitSize = function(O, P) {
    return Au(A, O, P);
  }, A.fitWidth = function(O, P) {
    return Mu(A, O, P);
  }, A.fitHeight = function(O, P) {
    return wu(A, O, P);
  };
  function N() {
    var O = ar(e, 0, 0, u, p, d).apply(null, t(a, r)), P = ar(e, n - O[0], s - O[1], u, p, d);
    return h = go(o, c, l), _ = bi(t, P), k = bi(h, _), b = ir(_, x), M();
  }
  function M() {
    return G = R = null, A;
  }
  return function() {
    return t = i.apply(this, arguments), A.invert = t.invert && H, N();
  };
}
function Io(i) {
  var t = 0, e = ht / 3, n = _o(i), s = n(t, e);
  return s.parallels = function(a) {
    return arguments.length ? n(t = a[0] * Ot, e = a[1] * Ot) : [t * Vt, e * Vt];
  }, s;
}
function Nu(i) {
  var t = mt(i);
  function e(n, s) {
    return [n * t, ft(s) / t];
  }
  return e.invert = function(n, s) {
    return [n / t, xe(s * t)];
  }, e;
}
function Pu(i, t) {
  var e = ft(i), n = (e + ft(t)) / 2;
  if (gt(n) < vt) return Nu(i);
  var s = 1 + e * (2 * n - e), a = ae(s) / n;
  function r(o, c) {
    var l = ae(s - 2 * n * ft(c)) / n;
    return [l * ft(o *= n), a - l * mt(o)];
  }
  return r.invert = function(o, c) {
    var l = a - c, h = Ne(o, gt(l)) * be(l);
    return l * n < 0 && (h -= ht * be(o) * be(l)), [h / n, xe((s - (o * o + l * l) * n * n) / (2 * n))];
  }, r;
}
function Ro() {
  return Io(Pu).scale(155.424).center([0, 33.6442]);
}
function $u() {
  return Ro().parallels([29.5, 45.5]).scale(1070).translate([480, 250]).rotate([96, 0]).center([-0.6, 38.7]);
}
function Yi(i, t) {
  return [i, tu(eu((Ft + t) / 2))];
}
Yi.invert = function(i, t) {
  return [i, 2 * fo(Qc(t)) - Ft];
};
function Vu() {
  return Gu(Yi).scale(961 / Yt);
}
function Gu(i) {
  var t = Ms(i), e = t.center, n = t.scale, s = t.translate, a = t.clipExtent, r = null, o, c, l;
  t.scale = function(d) {
    return arguments.length ? (n(d), h()) : n();
  }, t.translate = function(d) {
    return arguments.length ? (s(d), h()) : s();
  }, t.center = function(d) {
    return arguments.length ? (e(d), h()) : e();
  }, t.clipExtent = function(d) {
    return arguments.length ? (d == null ? r = o = c = l = null : (r = +d[0][0], o = +d[0][1], c = +d[1][0], l = +d[1][1]), h()) : r == null ? null : [[r, o], [c, l]];
  };
  function h() {
    var d = ht * n(), u = t(su(t.rotate()).invert([0, 0]));
    return a(r == null ? [[u[0] - d, u[1] - d], [u[0] + d, u[1] + d]] : i === Yi ? [[Math.max(u[0] - d, r), o], [Math.min(u[0] + d, c), l]] : [[r, Math.max(u[1] - d, o)], [c, Math.min(u[1] + d, l)]]);
  }
  return h();
}
function Es(i, t) {
  return [i, t];
}
Es.invert = Es;
function Hu() {
  return Ms(Es).scale(152.63);
}
function Bu(i, t) {
  var e = mt(i), n = i === t ? ft(i) : (e - mt(t)) / (t - i), s = e / n + i;
  if (gt(n) < vt) return Es;
  function a(r, o) {
    var c = s - o, l = n * r;
    return [c * ft(l), s - c * mt(l)];
  }
  return a.invert = function(r, o) {
    var c = s - o, l = Ne(r, gt(c)) * be(c);
    return c * n < 0 && (l -= ht * be(r) * be(c)), [l / n, s - be(n) * ae(r * r + c * c)];
  }, a;
}
function zu() {
  return Io(Bu).scale(131.154).center([0, 13.9389]);
}
var On = 1.340264, Ln = -0.081106, An = 893e-6, Mn = 3796e-6, xs = ae(3) / 2, Uu = 12;
function Do(i, t) {
  var e = xe(xs * ft(t)), n = e * e, s = n * n * n;
  return [
    i * mt(e) / (xs * (On + 3 * Ln * n + s * (7 * An + 9 * Mn * n))),
    e * (On + Ln * n + s * (An + Mn * n))
  ];
}
Do.invert = function(i, t) {
  for (var e = t, n = e * e, s = n * n * n, a = 0, r, o, c; a < Uu && (o = e * (On + Ln * n + s * (An + Mn * n)) - t, c = On + 3 * Ln * n + s * (7 * An + 9 * Mn * n), e -= r = o / c, n = e * e, s = n * n * n, !(gt(r) < Jc)); ++a)
    ;
  return [
    xs * i * (On + 3 * Ln * n + s * (7 * An + 9 * Mn * n)) / mt(e),
    xe(ft(e) / xs)
  ];
};
function Fu() {
  return Ms(Do).scale(177.158);
}
function No(i, t) {
  var e = t * t, n = e * e;
  return [
    i * (0.8707 - 0.131979 * e + n * (-0.013791 + n * (3971e-6 * e - 1529e-6 * n))),
    t * (1.007226 + e * (0.015085 + n * (-0.044475 + 0.028874 * e - 5916e-6 * n)))
  ];
}
No.invert = function(i, t) {
  var e = t, n = 25, s;
  do {
    var a = e * e, r = a * a;
    e -= s = (e * (1.007226 + a * (0.015085 + r * (-0.044475 + 0.028874 * a - 5916e-6 * r))) - t) / (1.007226 + a * (0.015085 * 3 + r * (-0.044475 * 7 + 0.028874 * 9 * a - 5916e-6 * 11 * r)));
  } while (gt(s) > vt && --n > 0);
  return [
    i / (0.8707 + (a = e * e) * (-0.131979 + a * (-0.013791 + a * a * a * (3971e-6 - 1529e-6 * a)))),
    e
  ];
};
function Wu() {
  return Ms(No).scale(175.295);
}
function Xu(i, t) {
  return i.parent === t.parent ? 1 : 2;
}
function Yu(i) {
  return i.reduce(Zu, 0) / i.length;
}
function Zu(i, t) {
  return i + t.x;
}
function qu(i) {
  return 1 + i.reduce(ju, 0);
}
function ju(i, t) {
  return Math.max(i, t.y);
}
function Ku(i) {
  for (var t; t = i.children; ) i = t[0];
  return i;
}
function Ju(i) {
  for (var t; t = i.children; ) i = t[t.length - 1];
  return i;
}
function Qu() {
  var i = Xu, t = 1, e = 1, n = !1;
  function s(a) {
    var r, o = 0;
    a.eachAfter(function(u) {
      var p = u.children;
      p ? (u.x = Yu(p), u.y = qu(p)) : (u.x = r ? o += i(u, r) : 0, u.y = 0, r = u);
    });
    var c = Ku(a), l = Ju(a), h = c.x - i(c, l) / 2, d = l.x + i(l, c) / 2;
    return a.eachAfter(n ? function(u) {
      u.x = (u.x - a.x) * t, u.y = (a.y - u.y) * e;
    } : function(u) {
      u.x = (u.x - h) / (d - h) * t, u.y = (1 - (a.y ? u.y / a.y : 1)) * e;
    });
  }
  return s.separation = function(a) {
    return arguments.length ? (i = a, s) : i;
  }, s.size = function(a) {
    return arguments.length ? (n = !1, t = +a[0], e = +a[1], s) : n ? null : [t, e];
  }, s.nodeSize = function(a) {
    return arguments.length ? (n = !0, t = +a[0], e = +a[1], s) : n ? [t, e] : null;
  }, s;
}
function th(i) {
  var t = 0, e = i.children, n = e && e.length;
  if (!n) t = 1;
  else for (; --n >= 0; ) t += e[n].value;
  i.value = t;
}
function eh() {
  return this.eachAfter(th);
}
function nh(i, t) {
  let e = -1;
  for (const n of this)
    i.call(t, n, ++e, this);
  return this;
}
function sh(i, t) {
  for (var e = this, n = [e], s, a, r = -1; e = n.pop(); )
    if (i.call(t, e, ++r, this), s = e.children)
      for (a = s.length - 1; a >= 0; --a)
        n.push(s[a]);
  return this;
}
function ih(i, t) {
  for (var e = this, n = [e], s = [], a, r, o, c = -1; e = n.pop(); )
    if (s.push(e), a = e.children)
      for (r = 0, o = a.length; r < o; ++r)
        n.push(a[r]);
  for (; e = s.pop(); )
    i.call(t, e, ++c, this);
  return this;
}
function ah(i, t) {
  let e = -1;
  for (const n of this)
    if (i.call(t, n, ++e, this))
      return n;
}
function rh(i) {
  return this.eachAfter(function(t) {
    for (var e = +i(t.data) || 0, n = t.children, s = n && n.length; --s >= 0; ) e += n[s].value;
    t.value = e;
  });
}
function oh(i) {
  return this.eachBefore(function(t) {
    t.children && t.children.sort(i);
  });
}
function lh(i) {
  for (var t = this, e = ch(t, i), n = [t]; t !== e; )
    t = t.parent, n.push(t);
  for (var s = n.length; i !== e; )
    n.splice(s, 0, i), i = i.parent;
  return n;
}
function ch(i, t) {
  if (i === t) return i;
  var e = i.ancestors(), n = t.ancestors(), s = null;
  for (i = e.pop(), t = n.pop(); i === t; )
    s = i, i = e.pop(), t = n.pop();
  return s;
}
function uh() {
  for (var i = this, t = [i]; i = i.parent; )
    t.push(i);
  return t;
}
function hh() {
  return Array.from(this);
}
function dh() {
  var i = [];
  return this.eachBefore(function(t) {
    t.children || i.push(t);
  }), i;
}
function ph() {
  var i = this, t = [];
  return i.each(function(e) {
    e !== i && t.push({ source: e.parent, target: e });
  }), t;
}
function* fh() {
  var i = this, t, e = [i], n, s, a;
  do
    for (t = e.reverse(), e = []; i = t.pop(); )
      if (yield i, n = i.children)
        for (s = 0, a = n.length; s < a; ++s)
          e.push(n[s]);
  while (e.length);
}
function Rn(i, t) {
  i instanceof Map ? (i = [void 0, i], t === void 0 && (t = vh)) : t === void 0 && (t = mh);
  for (var e = new _n(i), n, s = [e], a, r, o, c; n = s.pop(); )
    if ((r = t(n.data)) && (c = (r = Array.from(r)).length))
      for (n.children = r, o = c - 1; o >= 0; --o)
        s.push(a = r[o] = new _n(r[o])), a.parent = n, a.depth = n.depth + 1;
  return e.eachBefore(Eh);
}
function gh() {
  return Rn(this).eachBefore(yh);
}
function mh(i) {
  return i.children;
}
function vh(i) {
  return Array.isArray(i) ? i[1] : null;
}
function yh(i) {
  i.data.value !== void 0 && (i.value = i.data.value), i.data = i.data.data;
}
function Eh(i) {
  var t = 0;
  do
    i.height = t;
  while ((i = i.parent) && i.height < ++t);
}
function _n(i) {
  this.data = i, this.depth = this.height = 0, this.parent = null;
}
_n.prototype = Rn.prototype = {
  constructor: _n,
  count: eh,
  each: nh,
  eachAfter: ih,
  eachBefore: sh,
  find: ah,
  sum: rh,
  sort: oh,
  path: lh,
  ancestors: uh,
  descendants: hh,
  leaves: dh,
  links: ph,
  copy: gh,
  [Symbol.iterator]: fh
};
function xh(i) {
  return i == null ? null : Po(i);
}
function Po(i) {
  if (typeof i != "function") throw new Error();
  return i;
}
function Ie() {
  return 0;
}
function qe(i) {
  return function() {
    return i;
  };
}
const Sh = 1664525, Th = 1013904223, rr = 4294967296;
function bh() {
  let i = 1;
  return () => (i = (Sh * i + Th) % rr) / rr;
}
function Oh(i) {
  return typeof i == "object" && "length" in i ? i : Array.from(i);
}
function Lh(i, t) {
  let e = i.length, n, s;
  for (; e; )
    s = t() * e-- | 0, n = i[e], i[e] = i[s], i[s] = n;
  return i;
}
function Ah(i, t) {
  for (var e = 0, n = (i = Lh(Array.from(i), t)).length, s = [], a, r; e < n; )
    a = i[e], r && $o(r, a) ? ++e : (r = wh(s = Mh(s, a)), e = 0);
  return r;
}
function Mh(i, t) {
  var e, n;
  if (Js(t, i)) return [t];
  for (e = 0; e < i.length; ++e)
    if (qn(t, i[e]) && Js(bn(i[e], t), i))
      return [i[e], t];
  for (e = 0; e < i.length - 1; ++e)
    for (n = e + 1; n < i.length; ++n)
      if (qn(bn(i[e], i[n]), t) && qn(bn(i[e], t), i[n]) && qn(bn(i[n], t), i[e]) && Js(Vo(i[e], i[n], t), i))
        return [i[e], i[n], t];
  throw new Error();
}
function qn(i, t) {
  var e = i.r - t.r, n = t.x - i.x, s = t.y - i.y;
  return e < 0 || e * e < n * n + s * s;
}
function $o(i, t) {
  var e = i.r - t.r + Math.max(i.r, t.r, 1) * 1e-9, n = t.x - i.x, s = t.y - i.y;
  return e > 0 && e * e > n * n + s * s;
}
function Js(i, t) {
  for (var e = 0; e < t.length; ++e)
    if (!$o(i, t[e]))
      return !1;
  return !0;
}
function wh(i) {
  switch (i.length) {
    case 1:
      return Ch(i[0]);
    case 2:
      return bn(i[0], i[1]);
    case 3:
      return Vo(i[0], i[1], i[2]);
  }
}
function Ch(i) {
  return {
    x: i.x,
    y: i.y,
    r: i.r
  };
}
function bn(i, t) {
  var e = i.x, n = i.y, s = i.r, a = t.x, r = t.y, o = t.r, c = a - e, l = r - n, h = o - s, d = Math.sqrt(c * c + l * l);
  return {
    x: (e + a + c / d * h) / 2,
    y: (n + r + l / d * h) / 2,
    r: (d + s + o) / 2
  };
}
function Vo(i, t, e) {
  var n = i.x, s = i.y, a = i.r, r = t.x, o = t.y, c = t.r, l = e.x, h = e.y, d = e.r, u = n - r, p = n - l, f = s - o, g = s - h, m = c - a, y = d - a, S = n * n + s * s - a * a, v = S - r * r - o * o + c * c, E = S - l * l - h * h + d * d, x = p * f - u * g, b = (f * E - g * v) / (x * 2) - n, _ = (g * m - f * y) / x, k = (p * v - u * E) / (x * 2) - s, G = (u * y - p * m) / x, R = _ * _ + G * G - 1, A = 2 * (a + b * _ + k * G), H = b * b + k * k - a * a, N = -(Math.abs(R) > 1e-6 ? (A + Math.sqrt(A * A - 4 * R * H)) / (2 * R) : H / A);
  return {
    x: n + b + _ * N,
    y: s + k + G * N,
    r: N
  };
}
function or(i, t, e) {
  var n = i.x - t.x, s, a, r = i.y - t.y, o, c, l = n * n + r * r;
  l ? (a = t.r + e.r, a *= a, c = i.r + e.r, c *= c, a > c ? (s = (l + c - a) / (2 * l), o = Math.sqrt(Math.max(0, c / l - s * s)), e.x = i.x - s * n - o * r, e.y = i.y - s * r + o * n) : (s = (l + a - c) / (2 * l), o = Math.sqrt(Math.max(0, a / l - s * s)), e.x = t.x + s * n - o * r, e.y = t.y + s * r + o * n)) : (e.x = t.x + e.r, e.y = t.y);
}
function lr(i, t) {
  var e = i.r + t.r - 1e-6, n = t.x - i.x, s = t.y - i.y;
  return e > 0 && e * e > n * n + s * s;
}
function cr(i) {
  var t = i._, e = i.next._, n = t.r + e.r, s = (t.x * e.r + e.x * t.r) / n, a = (t.y * e.r + e.y * t.r) / n;
  return s * s + a * a;
}
function jn(i) {
  this._ = i, this.next = null, this.previous = null;
}
function kh(i, t) {
  if (!(a = (i = Oh(i)).length)) return 0;
  var e, n, s, a, r, o, c, l, h, d, u;
  if (e = i[0], e.x = 0, e.y = 0, !(a > 1)) return e.r;
  if (n = i[1], e.x = -n.r, n.x = e.r, n.y = 0, !(a > 2)) return e.r + n.r;
  or(n, e, s = i[2]), e = new jn(e), n = new jn(n), s = new jn(s), e.next = s.previous = n, n.next = e.previous = s, s.next = n.previous = e;
  t: for (c = 3; c < a; ++c) {
    or(e._, n._, s = i[c]), s = new jn(s), l = n.next, h = e.previous, d = n._.r, u = e._.r;
    do
      if (d <= u) {
        if (lr(l._, s._)) {
          n = l, e.next = n, n.previous = e, --c;
          continue t;
        }
        d += l._.r, l = l.next;
      } else {
        if (lr(h._, s._)) {
          e = h, e.next = n, n.previous = e, --c;
          continue t;
        }
        u += h._.r, h = h.previous;
      }
    while (l !== h.next);
    for (s.previous = e, s.next = n, e.next = n.previous = n = s, r = cr(e); (s = s.next) !== n; )
      (o = cr(s)) < r && (e = s, r = o);
    n = e.next;
  }
  for (e = [n._], s = n; (s = s.next) !== n; ) e.push(s._);
  for (s = Ah(e, t), c = 0; c < a; ++c) e = i[c], e.x -= s.x, e.y -= s.y;
  return s.r;
}
function _h(i) {
  return Math.sqrt(i.value);
}
function Ih() {
  var i = null, t = 1, e = 1, n = Ie;
  function s(a) {
    const r = bh();
    return a.x = t / 2, a.y = e / 2, i ? a.eachBefore(ur(i)).eachAfter(Qs(n, 0.5, r)).eachBefore(hr(1)) : a.eachBefore(ur(_h)).eachAfter(Qs(Ie, 1, r)).eachAfter(Qs(n, a.r / Math.min(t, e), r)).eachBefore(hr(Math.min(t, e) / (2 * a.r))), a;
  }
  return s.radius = function(a) {
    return arguments.length ? (i = xh(a), s) : i;
  }, s.size = function(a) {
    return arguments.length ? (t = +a[0], e = +a[1], s) : [t, e];
  }, s.padding = function(a) {
    return arguments.length ? (n = typeof a == "function" ? a : qe(+a), s) : n;
  }, s;
}
function ur(i) {
  return function(t) {
    t.children || (t.r = Math.max(0, +i(t) || 0));
  };
}
function Qs(i, t, e) {
  return function(n) {
    if (s = n.children) {
      var s, a, r = s.length, o = i(n) * t || 0, c;
      if (o) for (a = 0; a < r; ++a) s[a].r += o;
      if (c = kh(s, e), o) for (a = 0; a < r; ++a) s[a].r -= o;
      n.r = c + o;
    }
  };
}
function hr(i) {
  return function(t) {
    var e = t.parent;
    t.r *= i, e && (t.x = e.x + i * t.x, t.y = e.y + i * t.y);
  };
}
function Rh(i) {
  i.x0 = Math.round(i.x0), i.y0 = Math.round(i.y0), i.x1 = Math.round(i.x1), i.y1 = Math.round(i.y1);
}
function Dh(i, t, e, n, s) {
  for (var a = i.children, r, o = -1, c = a.length, l = i.value && (n - t) / i.value; ++o < c; )
    r = a[o], r.y0 = e, r.y1 = s, r.x0 = t, r.x1 = t += r.value * l;
}
function Nh(i, t) {
  return i.parent === t.parent ? 1 : 2;
}
function ti(i) {
  var t = i.children;
  return t ? t[0] : i.t;
}
function ei(i) {
  var t = i.children;
  return t ? t[t.length - 1] : i.t;
}
function Ph(i, t, e) {
  var n = e / (t.i - i.i);
  t.c -= n, t.s += e, i.c += n, t.z += e, t.m += e;
}
function $h(i) {
  for (var t = 0, e = 0, n = i.children, s = n.length, a; --s >= 0; )
    a = n[s], a.z += t, a.m += t, t += a.s + (e += a.c);
}
function Vh(i, t, e) {
  return i.a.parent === t.parent ? i.a : e;
}
function ls(i, t) {
  this._ = i, this.parent = null, this.children = null, this.A = null, this.a = this, this.z = 0, this.m = 0, this.c = 0, this.s = 0, this.t = null, this.i = t;
}
ls.prototype = Object.create(_n.prototype);
function Gh(i) {
  for (var t = new ls(i, 0), e, n = [t], s, a, r, o; e = n.pop(); )
    if (a = e._.children)
      for (e.children = new Array(o = a.length), r = o - 1; r >= 0; --r)
        n.push(s = e.children[r] = new ls(a[r], r)), s.parent = e;
  return (t.parent = new ls(null, 0)).children = [t], t;
}
function Hh() {
  var i = Nh, t = 1, e = 1, n = null;
  function s(l) {
    var h = Gh(l);
    if (h.eachAfter(a), h.parent.m = -h.z, h.eachBefore(r), n) l.eachBefore(c);
    else {
      var d = l, u = l, p = l;
      l.eachBefore(function(S) {
        S.x < d.x && (d = S), S.x > u.x && (u = S), S.depth > p.depth && (p = S);
      });
      var f = d === u ? 1 : i(d, u) / 2, g = f - d.x, m = t / (u.x + f + g), y = e / (p.depth || 1);
      l.eachBefore(function(S) {
        S.x = (S.x + g) * m, S.y = S.depth * y;
      });
    }
    return l;
  }
  function a(l) {
    var h = l.children, d = l.parent.children, u = l.i ? d[l.i - 1] : null;
    if (h) {
      $h(l);
      var p = (h[0].z + h[h.length - 1].z) / 2;
      u ? (l.z = u.z + i(l._, u._), l.m = l.z - p) : l.z = p;
    } else u && (l.z = u.z + i(l._, u._));
    l.parent.A = o(l, u, l.parent.A || d[0]);
  }
  function r(l) {
    l._.x = l.z + l.parent.m, l.m += l.parent.m;
  }
  function o(l, h, d) {
    if (h) {
      for (var u = l, p = l, f = h, g = u.parent.children[0], m = u.m, y = p.m, S = f.m, v = g.m, E; f = ei(f), u = ti(u), f && u; )
        g = ti(g), p = ei(p), p.a = l, E = f.z + S - u.z - m + i(f._, u._), E > 0 && (Ph(Vh(f, l, d), l, E), m += E, y += E), S += f.m, m += u.m, v += g.m, y += p.m;
      f && !ei(p) && (p.t = f, p.m += S - y), u && !ti(g) && (g.t = u, g.m += m - v, d = l);
    }
    return d;
  }
  function c(l) {
    l.x *= t, l.y = l.depth * e;
  }
  return s.separation = function(l) {
    return arguments.length ? (i = l, s) : i;
  }, s.size = function(l) {
    return arguments.length ? (n = !1, t = +l[0], e = +l[1], s) : n ? null : [t, e];
  }, s.nodeSize = function(l) {
    return arguments.length ? (n = !0, t = +l[0], e = +l[1], s) : n ? [t, e] : null;
  }, s;
}
function Bh(i, t, e, n, s) {
  for (var a = i.children, r, o = -1, c = a.length, l = i.value && (s - e) / i.value; ++o < c; )
    r = a[o], r.x0 = t, r.x1 = n, r.y0 = e, r.y1 = e += r.value * l;
}
var zh = (1 + Math.sqrt(5)) / 2;
function Uh(i, t, e, n, s, a) {
  for (var r = [], o = t.children, c, l, h = 0, d = 0, u = o.length, p, f, g = t.value, m, y, S, v, E, x, b; h < u; ) {
    p = s - e, f = a - n;
    do
      m = o[d++].value;
    while (!m && d < u);
    for (y = S = m, x = Math.max(f / p, p / f) / (g * i), b = m * m * x, E = Math.max(S / b, b / y); d < u; ++d) {
      if (m += l = o[d].value, l < y && (y = l), l > S && (S = l), b = m * m * x, v = Math.max(S / b, b / y), v > E) {
        m -= l;
        break;
      }
      E = v;
    }
    r.push(c = { value: m, dice: p < f, children: o.slice(h, d) }), c.dice ? Dh(c, e, n, s, g ? n += f * m / g : a) : Bh(c, e, n, g ? e += p * m / g : s, a), g -= m, h = d;
  }
  return r;
}
const Fh = function i(t) {
  function e(n, s, a, r, o) {
    Uh(t, n, s, a, r, o);
  }
  return e.ratio = function(n) {
    return i((n = +n) > 1 ? n : 1);
  }, e;
}(zh);
function Wh() {
  var i = Fh, t = !1, e = 1, n = 1, s = [0], a = Ie, r = Ie, o = Ie, c = Ie, l = Ie;
  function h(u) {
    return u.x0 = u.y0 = 0, u.x1 = e, u.y1 = n, u.eachBefore(d), s = [0], t && u.eachBefore(Rh), u;
  }
  function d(u) {
    var p = s[u.depth], f = u.x0 + p, g = u.y0 + p, m = u.x1 - p, y = u.y1 - p;
    m < f && (f = m = (f + m) / 2), y < g && (g = y = (g + y) / 2), u.x0 = f, u.y0 = g, u.x1 = m, u.y1 = y, u.children && (p = s[u.depth + 1] = a(u) / 2, f += l(u) - p, g += r(u) - p, m -= o(u) - p, y -= c(u) - p, m < f && (f = m = (f + m) / 2), y < g && (g = y = (g + y) / 2), i(u, f, g, m, y));
  }
  return h.round = function(u) {
    return arguments.length ? (t = !!u, h) : t;
  }, h.size = function(u) {
    return arguments.length ? (e = +u[0], n = +u[1], h) : [e, n];
  }, h.tile = function(u) {
    return arguments.length ? (i = Po(u), h) : i;
  }, h.padding = function(u) {
    return arguments.length ? h.paddingInner(u).paddingOuter(u) : h.paddingInner();
  }, h.paddingInner = function(u) {
    return arguments.length ? (a = typeof u == "function" ? u : qe(+u), h) : a;
  }, h.paddingOuter = function(u) {
    return arguments.length ? h.paddingTop(u).paddingRight(u).paddingBottom(u).paddingLeft(u) : h.paddingTop();
  }, h.paddingTop = function(u) {
    return arguments.length ? (r = typeof u == "function" ? u : qe(+u), h) : r;
  }, h.paddingRight = function(u) {
    return arguments.length ? (o = typeof u == "function" ? u : qe(+u), h) : o;
  }, h.paddingBottom = function(u) {
    return arguments.length ? (c = typeof u == "function" ? u : qe(+u), h) : c;
  }, h.paddingLeft = function(u) {
    return arguments.length ? (l = typeof u == "function" ? u : qe(+u), h) : l;
  }, h;
}
function ws(i) {
  let t = 3;
  return i.digits = function(e) {
    if (!arguments.length) return t;
    if (e == null)
      t = null;
    else {
      const n = Math.floor(e);
      if (!(n >= 0)) throw new RangeError(`invalid digits: ${e}`);
      t = n;
    }
    return i;
  }, () => new Fi(t);
}
function Xh(i) {
  return i.innerRadius;
}
function Yh(i) {
  return i.outerRadius;
}
function Zh(i) {
  return i.startAngle;
}
function qh(i) {
  return i.endAngle;
}
function jh(i) {
  return i && i.padAngle;
}
function Kh(i, t, e, n, s, a, r, o) {
  var c = e - i, l = n - t, h = r - s, d = o - a, u = d * c - h * l;
  if (!(u * u < Ut))
    return u = (h * (t - a) - d * (i - s)) / u, [i + u * c, t + u * l];
}
function Kn(i, t, e, n, s, a, r) {
  var o = i - e, c = t - n, l = (r ? a : -a) / Je(o * o + c * c), h = l * c, d = -l * o, u = i + h, p = t + d, f = e + h, g = n + d, m = (u + f) / 2, y = (p + g) / 2, S = f - u, v = g - p, E = S * S + v * v, x = s - a, b = u * g - f * p, _ = (v < 0 ? -1 : 1) * Je(bl(0, x * x * E - b * b)), k = (b * v - S * _) / E, G = (-b * S - v * _) / E, R = (b * v + S * _) / E, A = (-b * S + v * _) / E, H = k - m, N = G - y, M = R - m, O = A - y;
  return H * H + N * N > M * M + O * O && (k = R, G = A), {
    cx: k,
    cy: G,
    x01: -h,
    y01: -d,
    x11: k * (s / x - 1),
    y11: G * (s / x - 1)
  };
}
function In() {
  var i = Xh, t = Yh, e = pt(0), n = null, s = Zh, a = qh, r = jh, o = null, c = ws(l);
  function l() {
    var h, d, u = +i.apply(this, arguments), p = +t.apply(this, arguments), f = s.apply(this, arguments) - Oa, g = a.apply(this, arguments) - Oa, m = La(g - f), y = g > f;
    if (o || (o = h = c()), p < u && (d = p, p = u, u = d), !(p > Ut)) o.moveTo(0, 0);
    else if (m > ss - Ut)
      o.moveTo(p * we(f), p * le(f)), o.arc(0, 0, p, f, g, !y), u > Ut && (o.moveTo(u * we(g), u * le(g)), o.arc(0, 0, u, g, f, y));
    else {
      var S = f, v = g, E = f, x = g, b = m, _ = m, k = r.apply(this, arguments) / 2, G = k > Ut && (n ? +n.apply(this, arguments) : Je(u * u + p * p)), R = zs(La(p - u) / 2, +e.apply(this, arguments)), A = R, H = R, N, M;
      if (G > Ut) {
        var O = Ma(G / u * le(k)), P = Ma(G / p * le(k));
        (b -= O * 2) > Ut ? (O *= y ? 1 : -1, E += O, x -= O) : (b = 0, E = x = (f + g) / 2), (_ -= P * 2) > Ut ? (P *= y ? 1 : -1, S += P, v -= P) : (_ = 0, S = v = (f + g) / 2);
      }
      var $ = p * we(S), C = p * le(S), V = u * we(x), q = u * le(x);
      if (R > Ut) {
        var X = p * we(v), F = p * le(v), Z = u * we(E), rt = u * le(E), j;
        if (m < Aa)
          if (j = Kh($, C, Z, rt, X, F, V, q)) {
            var Y = $ - j[0], K = C - j[1], ot = X - j[0], ct = F - j[1], st = 1 / le(Tl((Y * ot + K * ct) / (Je(Y * Y + K * K) * Je(ot * ot + ct * ct))) / 2), it = Je(j[0] * j[0] + j[1] * j[1]);
            A = zs(R, (u - it) / (st - 1)), H = zs(R, (p - it) / (st + 1));
          } else
            A = H = 0;
      }
      _ > Ut ? H > Ut ? (N = Kn(Z, rt, $, C, p, H, y), M = Kn(X, F, V, q, p, H, y), o.moveTo(N.cx + N.x01, N.cy + N.y01), H < R ? o.arc(N.cx, N.cy, H, Rt(N.y01, N.x01), Rt(M.y01, M.x01), !y) : (o.arc(N.cx, N.cy, H, Rt(N.y01, N.x01), Rt(N.y11, N.x11), !y), o.arc(0, 0, p, Rt(N.cy + N.y11, N.cx + N.x11), Rt(M.cy + M.y11, M.cx + M.x11), !y), o.arc(M.cx, M.cy, H, Rt(M.y11, M.x11), Rt(M.y01, M.x01), !y))) : (o.moveTo($, C), o.arc(0, 0, p, S, v, !y)) : o.moveTo($, C), !(u > Ut) || !(b > Ut) ? o.lineTo(V, q) : A > Ut ? (N = Kn(V, q, X, F, u, -A, y), M = Kn($, C, Z, rt, u, -A, y), o.lineTo(N.cx + N.x01, N.cy + N.y01), A < R ? o.arc(N.cx, N.cy, A, Rt(N.y01, N.x01), Rt(M.y01, M.x01), !y) : (o.arc(N.cx, N.cy, A, Rt(N.y01, N.x01), Rt(N.y11, N.x11), !y), o.arc(0, 0, u, Rt(N.cy + N.y11, N.cx + N.x11), Rt(M.cy + M.y11, M.cx + M.x11), y), o.arc(M.cx, M.cy, A, Rt(M.y11, M.x11), Rt(M.y01, M.x01), !y))) : o.arc(0, 0, u, x, E, y);
    }
    if (o.closePath(), h) return o = null, h + "" || null;
  }
  return l.centroid = function() {
    var h = (+i.apply(this, arguments) + +t.apply(this, arguments)) / 2, d = (+s.apply(this, arguments) + +a.apply(this, arguments)) / 2 - Aa / 2;
    return [we(d) * h, le(d) * h];
  }, l.innerRadius = function(h) {
    return arguments.length ? (i = typeof h == "function" ? h : pt(+h), l) : i;
  }, l.outerRadius = function(h) {
    return arguments.length ? (t = typeof h == "function" ? h : pt(+h), l) : t;
  }, l.cornerRadius = function(h) {
    return arguments.length ? (e = typeof h == "function" ? h : pt(+h), l) : e;
  }, l.padRadius = function(h) {
    return arguments.length ? (n = h == null ? null : typeof h == "function" ? h : pt(+h), l) : n;
  }, l.startAngle = function(h) {
    return arguments.length ? (s = typeof h == "function" ? h : pt(+h), l) : s;
  }, l.endAngle = function(h) {
    return arguments.length ? (a = typeof h == "function" ? h : pt(+h), l) : a;
  }, l.padAngle = function(h) {
    return arguments.length ? (r = typeof h == "function" ? h : pt(+h), l) : r;
  }, l.context = function(h) {
    return arguments.length ? (o = h ?? null, l) : o;
  }, l;
}
function Zi(i) {
  return i[0];
}
function qi(i) {
  return i[1];
}
function Dn(i, t) {
  var e = pt(!0), n = null, s = Hi, a = null, r = ws(o);
  i = typeof i == "function" ? i : i === void 0 ? Zi : pt(i), t = typeof t == "function" ? t : t === void 0 ? qi : pt(t);
  function o(c) {
    var l, h = (c = zi(c)).length, d, u = !1, p;
    for (n == null && (a = s(p = r())), l = 0; l <= h; ++l)
      !(l < h && e(d = c[l], l, c)) === u && ((u = !u) ? a.lineStart() : a.lineEnd()), u && a.point(+i(d, l, c), +t(d, l, c));
    if (p) return a = null, p + "" || null;
  }
  return o.x = function(c) {
    return arguments.length ? (i = typeof c == "function" ? c : pt(+c), o) : i;
  }, o.y = function(c) {
    return arguments.length ? (t = typeof c == "function" ? c : pt(+c), o) : t;
  }, o.defined = function(c) {
    return arguments.length ? (e = typeof c == "function" ? c : pt(!!c), o) : e;
  }, o.curve = function(c) {
    return arguments.length ? (s = c, n != null && (a = s(n)), o) : s;
  }, o.context = function(c) {
    return arguments.length ? (c == null ? n = a = null : a = s(n = c), o) : n;
  }, o;
}
function ji(i, t, e) {
  var n = null, s = pt(!0), a = null, r = Hi, o = null, c = ws(l);
  i = typeof i == "function" ? i : i === void 0 ? Zi : pt(+i), t = typeof t == "function" ? t : t === void 0 ? pt(0) : pt(+t), e = typeof e == "function" ? e : e === void 0 ? qi : pt(+e);
  function l(d) {
    var u, p, f, g = (d = zi(d)).length, m, y = !1, S, v = new Array(g), E = new Array(g);
    for (a == null && (o = r(S = c())), u = 0; u <= g; ++u) {
      if (!(u < g && s(m = d[u], u, d)) === y)
        if (y = !y)
          p = u, o.areaStart(), o.lineStart();
        else {
          for (o.lineEnd(), o.lineStart(), f = u - 1; f >= p; --f)
            o.point(v[f], E[f]);
          o.lineEnd(), o.areaEnd();
        }
      y && (v[u] = +i(m, u, d), E[u] = +t(m, u, d), o.point(n ? +n(m, u, d) : v[u], e ? +e(m, u, d) : E[u]));
    }
    if (S) return o = null, S + "" || null;
  }
  function h() {
    return Dn().defined(s).curve(r).context(a);
  }
  return l.x = function(d) {
    return arguments.length ? (i = typeof d == "function" ? d : pt(+d), n = null, l) : i;
  }, l.x0 = function(d) {
    return arguments.length ? (i = typeof d == "function" ? d : pt(+d), l) : i;
  }, l.x1 = function(d) {
    return arguments.length ? (n = d == null ? null : typeof d == "function" ? d : pt(+d), l) : n;
  }, l.y = function(d) {
    return arguments.length ? (t = typeof d == "function" ? d : pt(+d), e = null, l) : t;
  }, l.y0 = function(d) {
    return arguments.length ? (t = typeof d == "function" ? d : pt(+d), l) : t;
  }, l.y1 = function(d) {
    return arguments.length ? (e = d == null ? null : typeof d == "function" ? d : pt(+d), l) : e;
  }, l.lineX0 = l.lineY0 = function() {
    return h().x(i).y(t);
  }, l.lineY1 = function() {
    return h().x(i).y(e);
  }, l.lineX1 = function() {
    return h().x(n).y(t);
  }, l.defined = function(d) {
    return arguments.length ? (s = typeof d == "function" ? d : pt(!!d), l) : s;
  }, l.curve = function(d) {
    return arguments.length ? (r = d, a != null && (o = r(a)), l) : r;
  }, l.context = function(d) {
    return arguments.length ? (d == null ? a = o = null : o = r(a = d), l) : a;
  }, l;
}
function Jh(i, t) {
  return t < i ? -1 : t > i ? 1 : t >= i ? 0 : NaN;
}
function Qh(i) {
  return i;
}
function td() {
  var i = Qh, t = Jh, e = null, n = pt(0), s = pt(ss), a = pt(0);
  function r(o) {
    var c, l = (o = zi(o)).length, h, d, u = 0, p = new Array(l), f = new Array(l), g = +n.apply(this, arguments), m = Math.min(ss, Math.max(-ss, s.apply(this, arguments) - g)), y, S = Math.min(Math.abs(m) / l, a.apply(this, arguments)), v = S * (m < 0 ? -1 : 1), E;
    for (c = 0; c < l; ++c)
      (E = f[p[c] = c] = +i(o[c], c, o)) > 0 && (u += E);
    for (t != null ? p.sort(function(x, b) {
      return t(f[x], f[b]);
    }) : e != null && p.sort(function(x, b) {
      return e(o[x], o[b]);
    }), c = 0, d = u ? (m - l * v) / u : 0; c < l; ++c, g = y)
      h = p[c], E = f[h], y = g + (E > 0 ? E * d : 0) + v, f[h] = {
        data: o[h],
        index: c,
        value: E,
        startAngle: g,
        endAngle: y,
        padAngle: S
      };
    return f;
  }
  return r.value = function(o) {
    return arguments.length ? (i = typeof o == "function" ? o : pt(+o), r) : i;
  }, r.sortValues = function(o) {
    return arguments.length ? (t = o, e = null, r) : t;
  }, r.sort = function(o) {
    return arguments.length ? (e = o, t = null, r) : e;
  }, r.startAngle = function(o) {
    return arguments.length ? (n = typeof o == "function" ? o : pt(+o), r) : n;
  }, r.endAngle = function(o) {
    return arguments.length ? (s = typeof o == "function" ? o : pt(+o), r) : s;
  }, r.padAngle = function(o) {
    return arguments.length ? (a = typeof o == "function" ? o : pt(+o), r) : a;
  }, r;
}
var ed = Ho(Hi);
function Go(i) {
  this._curve = i;
}
Go.prototype = {
  areaStart: function() {
    this._curve.areaStart();
  },
  areaEnd: function() {
    this._curve.areaEnd();
  },
  lineStart: function() {
    this._curve.lineStart();
  },
  lineEnd: function() {
    this._curve.lineEnd();
  },
  point: function(i, t) {
    this._curve.point(t * Math.sin(i), t * -Math.cos(i));
  }
};
function Ho(i) {
  function t(e) {
    return new Go(i(e));
  }
  return t._curve = i, t;
}
function nd(i) {
  var t = i.curve;
  return i.angle = i.x, delete i.x, i.radius = i.y, delete i.y, i.curve = function(e) {
    return arguments.length ? t(Ho(e)) : t()._curve;
  }, i;
}
function sd() {
  return nd(Dn().curve(ed));
}
class id {
  constructor(t, e) {
    this._context = t, this._x = e;
  }
  areaStart() {
    this._line = 0;
  }
  areaEnd() {
    this._line = NaN;
  }
  lineStart() {
    this._point = 0;
  }
  lineEnd() {
    (this._line || this._line !== 0 && this._point === 1) && this._context.closePath(), this._line = 1 - this._line;
  }
  point(t, e) {
    switch (t = +t, e = +e, this._point) {
      case 0: {
        this._point = 1, this._line ? this._context.lineTo(t, e) : this._context.moveTo(t, e);
        break;
      }
      case 1:
        this._point = 2;
      // falls through
      default: {
        this._x ? this._context.bezierCurveTo(this._x0 = (this._x0 + t) / 2, this._y0, this._x0, e, t, e) : this._context.bezierCurveTo(this._x0, this._y0 = (this._y0 + e) / 2, t, this._y0, t, e);
        break;
      }
    }
    this._x0 = t, this._y0 = e;
  }
}
function ad(i) {
  return new id(i, !0);
}
function rd(i) {
  return i.source;
}
function od(i) {
  return i.target;
}
function ld(i) {
  let t = rd, e = od, n = Zi, s = qi, a = null, r = null, o = ws(c);
  function c() {
    let l;
    const h = wl.call(arguments), d = t.apply(this, h), u = e.apply(this, h);
    if (a == null && (r = i(l = o())), r.lineStart(), h[0] = d, r.point(+n.apply(this, h), +s.apply(this, h)), h[0] = u, r.point(+n.apply(this, h), +s.apply(this, h)), r.lineEnd(), l) return r = null, l + "" || null;
  }
  return c.source = function(l) {
    return arguments.length ? (t = l, c) : t;
  }, c.target = function(l) {
    return arguments.length ? (e = l, c) : e;
  }, c.x = function(l) {
    return arguments.length ? (n = typeof l == "function" ? l : pt(+l), c) : n;
  }, c.y = function(l) {
    return arguments.length ? (s = typeof l == "function" ? l : pt(+l), c) : s;
  }, c.context = function(l) {
    return arguments.length ? (l == null ? a = r = null : r = i(a = l), c) : a;
  }, c;
}
function cd() {
  return ld(ad);
}
class dt {
  constructor(t, e, n) {
    if (this.type = "", this.renderType = at.HTML, this.id = "", this.parent = void 0, this.configs = {}, this.model = t, this.services = e, n && (this.configs = n, this.configs.id)) {
      const s = L(this.model.getOptions(), "style", "prefix");
      this.id = `${s}--${this.configs.id}`;
    }
    this.parent || this.setParent(
      D(
        this.services.domUtils.getMainContainer()
      )
    );
  }
  init() {
  }
  // eslint-disable-next-line @typescript-eslint/ban-ts-comment
  // @ts-ignore
  // eslint-disable-next-line @typescript-eslint/no-unused-vars
  render(t = !0) {
    console.error("Error: Component did not provide the required render function.");
  }
  destroy() {
  }
  // Used to pass down information to the components
  setModel(t) {
    this.model = t;
  }
  // Used to pass down information to the components
  setServices(t) {
    this.services = t;
  }
  setParent(t) {
    var n;
    const e = this.parent;
    if (this.parent = t, !(e && e.node() === t.node()) && this.type) {
      const s = L(this.model.getOptions(), "style", "prefix");
      (n = this.parent) == null || n.classed(`${Kt}--${s}--${this.type}`, !0), e && e.classed(`${Kt}--${s}--${this.type}`, !1);
    }
  }
  getParent() {
    return this.parent;
  }
  getComponentContainer(t = { ariaLabel: null, isPresentational: !1, withinChartClip: !1 }) {
    if (this.type) {
      const e = L(this.model.getOptions(), "style", "prefix"), n = this.id ? `#${this.id}` : "", s = I.appendOrSelect(
        this.parent,
        `${this.renderType === at.SVG ? "svg" : "div"}${n}.${Kt}--${e}--${this.type}`
      );
      if (t.ariaLabel && s.attr("aria-label", t.ariaLabel), t.isPresentational && s.attr("role", "presentation"), t.withinChartClip) {
        const a = this.model.get("chartClipId");
        if (a) {
          const o = D(`#${a}`).select("rect");
          o.size() !== 0 && parseFloat(o.attr("height")) > 0 && s.attr("clip-path", `url(#${a})`);
        }
      }
      return s.attr("width", "100%").attr("height", "100%");
    }
    return this.parent;
  }
  /**
   * graphs used in combo charts share a model with global options but can receive their own local options.
   * this function retrieves the global options and merges it with any options passed into this
   * component's config.options object.
   */
  getOptions() {
    return this.configs.options ? en({}, this.model.getOptions(), this.configs.options) : this.model.getOptions();
  }
}
/*! @license DOMPurify 3.2.4 | (c) Cure53 and other contributors | Released under the Apache license 2.0 and Mozilla Public License 2.0 | github.com/cure53/DOMPurify/blob/3.2.4/LICENSE */
const {
  entries: Bo,
  setPrototypeOf: dr,
  isFrozen: ud,
  getPrototypeOf: hd,
  getOwnPropertyDescriptor: dd
} = Object;
let {
  freeze: Ht,
  seal: ee,
  create: zo
} = Object, {
  apply: Ni,
  construct: Pi
} = typeof Reflect < "u" && Reflect;
Ht || (Ht = function(t) {
  return t;
});
ee || (ee = function(t) {
  return t;
});
Ni || (Ni = function(t, e, n) {
  return t.apply(e, n);
});
Pi || (Pi = function(t, e) {
  return new t(...e);
});
const Jn = Bt(Array.prototype.forEach), pd = Bt(Array.prototype.lastIndexOf), pr = Bt(Array.prototype.pop), hn = Bt(Array.prototype.push), fd = Bt(Array.prototype.splice), cs = Bt(String.prototype.toLowerCase), ni = Bt(String.prototype.toString), fr = Bt(String.prototype.match), dn = Bt(String.prototype.replace), gd = Bt(String.prototype.indexOf), md = Bt(String.prototype.trim), ie = Bt(Object.prototype.hasOwnProperty), $t = Bt(RegExp.prototype.test), pn = vd(TypeError);
function Bt(i) {
  return function(t) {
    for (var e = arguments.length, n = new Array(e > 1 ? e - 1 : 0), s = 1; s < e; s++)
      n[s - 1] = arguments[s];
    return Ni(i, t, n);
  };
}
function vd(i) {
  return function() {
    for (var t = arguments.length, e = new Array(t), n = 0; n < t; n++)
      e[n] = arguments[n];
    return Pi(i, e);
  };
}
function ut(i, t) {
  let e = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : cs;
  dr && dr(i, null);
  let n = t.length;
  for (; n--; ) {
    let s = t[n];
    if (typeof s == "string") {
      const a = e(s);
      a !== s && (ud(t) || (t[n] = a), s = a);
    }
    i[s] = !0;
  }
  return i;
}
function yd(i) {
  for (let t = 0; t < i.length; t++)
    ie(i, t) || (i[t] = null);
  return i;
}
function ke(i) {
  const t = zo(null);
  for (const [e, n] of Bo(i))
    ie(i, e) && (Array.isArray(n) ? t[e] = yd(n) : n && typeof n == "object" && n.constructor === Object ? t[e] = ke(n) : t[e] = n);
  return t;
}
function fn(i, t) {
  for (; i !== null; ) {
    const n = dd(i, t);
    if (n) {
      if (n.get)
        return Bt(n.get);
      if (typeof n.value == "function")
        return Bt(n.value);
    }
    i = hd(i);
  }
  function e() {
    return null;
  }
  return e;
}
const gr = Ht(["a", "abbr", "acronym", "address", "area", "article", "aside", "audio", "b", "bdi", "bdo", "big", "blink", "blockquote", "body", "br", "button", "canvas", "caption", "center", "cite", "code", "col", "colgroup", "content", "data", "datalist", "dd", "decorator", "del", "details", "dfn", "dialog", "dir", "div", "dl", "dt", "element", "em", "fieldset", "figcaption", "figure", "font", "footer", "form", "h1", "h2", "h3", "h4", "h5", "h6", "head", "header", "hgroup", "hr", "html", "i", "img", "input", "ins", "kbd", "label", "legend", "li", "main", "map", "mark", "marquee", "menu", "menuitem", "meter", "nav", "nobr", "ol", "optgroup", "option", "output", "p", "picture", "pre", "progress", "q", "rp", "rt", "ruby", "s", "samp", "section", "select", "shadow", "small", "source", "spacer", "span", "strike", "strong", "style", "sub", "summary", "sup", "table", "tbody", "td", "template", "textarea", "tfoot", "th", "thead", "time", "tr", "track", "tt", "u", "ul", "var", "video", "wbr"]), si = Ht(["svg", "a", "altglyph", "altglyphdef", "altglyphitem", "animatecolor", "animatemotion", "animatetransform", "circle", "clippath", "defs", "desc", "ellipse", "filter", "font", "g", "glyph", "glyphref", "hkern", "image", "line", "lineargradient", "marker", "mask", "metadata", "mpath", "path", "pattern", "polygon", "polyline", "radialgradient", "rect", "stop", "style", "switch", "symbol", "text", "textpath", "title", "tref", "tspan", "view", "vkern"]), ii = Ht(["feBlend", "feColorMatrix", "feComponentTransfer", "feComposite", "feConvolveMatrix", "feDiffuseLighting", "feDisplacementMap", "feDistantLight", "feDropShadow", "feFlood", "feFuncA", "feFuncB", "feFuncG", "feFuncR", "feGaussianBlur", "feImage", "feMerge", "feMergeNode", "feMorphology", "feOffset", "fePointLight", "feSpecularLighting", "feSpotLight", "feTile", "feTurbulence"]), Ed = Ht(["animate", "color-profile", "cursor", "discard", "font-face", "font-face-format", "font-face-name", "font-face-src", "font-face-uri", "foreignobject", "hatch", "hatchpath", "mesh", "meshgradient", "meshpatch", "meshrow", "missing-glyph", "script", "set", "solidcolor", "unknown", "use"]), ai = Ht(["math", "menclose", "merror", "mfenced", "mfrac", "mglyph", "mi", "mlabeledtr", "mmultiscripts", "mn", "mo", "mover", "mpadded", "mphantom", "mroot", "mrow", "ms", "mspace", "msqrt", "mstyle", "msub", "msup", "msubsup", "mtable", "mtd", "mtext", "mtr", "munder", "munderover", "mprescripts"]), xd = Ht(["maction", "maligngroup", "malignmark", "mlongdiv", "mscarries", "mscarry", "msgroup", "mstack", "msline", "msrow", "semantics", "annotation", "annotation-xml", "mprescripts", "none"]), mr = Ht(["#text"]), vr = Ht(["accept", "action", "align", "alt", "autocapitalize", "autocomplete", "autopictureinpicture", "autoplay", "background", "bgcolor", "border", "capture", "cellpadding", "cellspacing", "checked", "cite", "class", "clear", "color", "cols", "colspan", "controls", "controlslist", "coords", "crossorigin", "datetime", "decoding", "default", "dir", "disabled", "disablepictureinpicture", "disableremoteplayback", "download", "draggable", "enctype", "enterkeyhint", "face", "for", "headers", "height", "hidden", "high", "href", "hreflang", "id", "inputmode", "integrity", "ismap", "kind", "label", "lang", "list", "loading", "loop", "low", "max", "maxlength", "media", "method", "min", "minlength", "multiple", "muted", "name", "nonce", "noshade", "novalidate", "nowrap", "open", "optimum", "pattern", "placeholder", "playsinline", "popover", "popovertarget", "popovertargetaction", "poster", "preload", "pubdate", "radiogroup", "readonly", "rel", "required", "rev", "reversed", "role", "rows", "rowspan", "spellcheck", "scope", "selected", "shape", "size", "sizes", "span", "srclang", "start", "src", "srcset", "step", "style", "summary", "tabindex", "title", "translate", "type", "usemap", "valign", "value", "width", "wrap", "xmlns", "slot"]), ri = Ht(["accent-height", "accumulate", "additive", "alignment-baseline", "amplitude", "ascent", "attributename", "attributetype", "azimuth", "basefrequency", "baseline-shift", "begin", "bias", "by", "class", "clip", "clippathunits", "clip-path", "clip-rule", "color", "color-interpolation", "color-interpolation-filters", "color-profile", "color-rendering", "cx", "cy", "d", "dx", "dy", "diffuseconstant", "direction", "display", "divisor", "dur", "edgemode", "elevation", "end", "exponent", "fill", "fill-opacity", "fill-rule", "filter", "filterunits", "flood-color", "flood-opacity", "font-family", "font-size", "font-size-adjust", "font-stretch", "font-style", "font-variant", "font-weight", "fx", "fy", "g1", "g2", "glyph-name", "glyphref", "gradientunits", "gradienttransform", "height", "href", "id", "image-rendering", "in", "in2", "intercept", "k", "k1", "k2", "k3", "k4", "kerning", "keypoints", "keysplines", "keytimes", "lang", "lengthadjust", "letter-spacing", "kernelmatrix", "kernelunitlength", "lighting-color", "local", "marker-end", "marker-mid", "marker-start", "markerheight", "markerunits", "markerwidth", "maskcontentunits", "maskunits", "max", "mask", "media", "method", "mode", "min", "name", "numoctaves", "offset", "operator", "opacity", "order", "orient", "orientation", "origin", "overflow", "paint-order", "path", "pathlength", "patterncontentunits", "patterntransform", "patternunits", "points", "preservealpha", "preserveaspectratio", "primitiveunits", "r", "rx", "ry", "radius", "refx", "refy", "repeatcount", "repeatdur", "restart", "result", "rotate", "scale", "seed", "shape-rendering", "slope", "specularconstant", "specularexponent", "spreadmethod", "startoffset", "stddeviation", "stitchtiles", "stop-color", "stop-opacity", "stroke-dasharray", "stroke-dashoffset", "stroke-linecap", "stroke-linejoin", "stroke-miterlimit", "stroke-opacity", "stroke", "stroke-width", "style", "surfacescale", "systemlanguage", "tabindex", "tablevalues", "targetx", "targety", "transform", "transform-origin", "text-anchor", "text-decoration", "text-rendering", "textlength", "type", "u1", "u2", "unicode", "values", "viewbox", "visibility", "version", "vert-adv-y", "vert-origin-x", "vert-origin-y", "width", "word-spacing", "wrap", "writing-mode", "xchannelselector", "ychannelselector", "x", "x1", "x2", "xmlns", "y", "y1", "y2", "z", "zoomandpan"]), yr = Ht(["accent", "accentunder", "align", "bevelled", "close", "columnsalign", "columnlines", "columnspan", "denomalign", "depth", "dir", "display", "displaystyle", "encoding", "fence", "frame", "height", "href", "id", "largeop", "length", "linethickness", "lspace", "lquote", "mathbackground", "mathcolor", "mathsize", "mathvariant", "maxsize", "minsize", "movablelimits", "notation", "numalign", "open", "rowalign", "rowlines", "rowspacing", "rowspan", "rspace", "rquote", "scriptlevel", "scriptminsize", "scriptsizemultiplier", "selection", "separator", "separators", "stretchy", "subscriptshift", "supscriptshift", "symmetric", "voffset", "width", "xmlns"]), Qn = Ht(["xlink:href", "xml:id", "xlink:title", "xml:space", "xmlns:xlink"]), Sd = ee(/\{\{[\w\W]*|[\w\W]*\}\}/gm), Td = ee(/<%[\w\W]*|[\w\W]*%>/gm), bd = ee(/\$\{[\w\W]*/gm), Od = ee(/^data-[\-\w.\u00B7-\uFFFF]+$/), Ld = ee(/^aria-[\-\w]+$/), Uo = ee(
  /^(?:(?:(?:f|ht)tps?|mailto|tel|callto|sms|cid|xmpp):|[^a-z]|[a-z+.\-]+(?:[^a-z+.\-:]|$))/i
  // eslint-disable-line no-useless-escape
), Ad = ee(/^(?:\w+script|data):/i), Md = ee(
  /[\u0000-\u0020\u00A0\u1680\u180E\u2000-\u2029\u205F\u3000]/g
  // eslint-disable-line no-control-regex
), Fo = ee(/^html$/i), wd = ee(/^[a-z][.\w]*(-[.\w]+)+$/i);
var Er = /* @__PURE__ */ Object.freeze({
  __proto__: null,
  ARIA_ATTR: Ld,
  ATTR_WHITESPACE: Md,
  CUSTOM_ELEMENT: wd,
  DATA_ATTR: Od,
  DOCTYPE_NAME: Fo,
  ERB_EXPR: Td,
  IS_ALLOWED_URI: Uo,
  IS_SCRIPT_OR_DATA: Ad,
  MUSTACHE_EXPR: Sd,
  TMPLIT_EXPR: bd
});
const gn = {
  element: 1,
  text: 3,
  // Deprecated
  progressingInstruction: 7,
  comment: 8,
  document: 9
}, Cd = function() {
  return typeof window > "u" ? null : window;
}, kd = function(t, e) {
  if (typeof t != "object" || typeof t.createPolicy != "function")
    return null;
  let n = null;
  const s = "data-tt-policy-suffix";
  e && e.hasAttribute(s) && (n = e.getAttribute(s));
  const a = "dompurify" + (n ? "#" + n : "");
  try {
    return t.createPolicy(a, {
      createHTML(r) {
        return r;
      },
      createScriptURL(r) {
        return r;
      }
    });
  } catch {
    return console.warn("TrustedTypes policy " + a + " could not be created."), null;
  }
}, xr = function() {
  return {
    afterSanitizeAttributes: [],
    afterSanitizeElements: [],
    afterSanitizeShadowDOM: [],
    beforeSanitizeAttributes: [],
    beforeSanitizeElements: [],
    beforeSanitizeShadowDOM: [],
    uponSanitizeAttribute: [],
    uponSanitizeElement: [],
    uponSanitizeShadowNode: []
  };
};
function Wo() {
  let i = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : Cd();
  const t = (tt) => Wo(tt);
  if (t.version = "3.2.4", t.removed = [], !i || !i.document || i.document.nodeType !== gn.document || !i.Element)
    return t.isSupported = !1, t;
  let {
    document: e
  } = i;
  const n = e, s = n.currentScript, {
    DocumentFragment: a,
    HTMLTemplateElement: r,
    Node: o,
    Element: c,
    NodeFilter: l,
    NamedNodeMap: h = i.NamedNodeMap || i.MozNamedAttrMap,
    HTMLFormElement: d,
    DOMParser: u,
    trustedTypes: p
  } = i, f = c.prototype, g = fn(f, "cloneNode"), m = fn(f, "remove"), y = fn(f, "nextSibling"), S = fn(f, "childNodes"), v = fn(f, "parentNode");
  if (typeof r == "function") {
    const tt = e.createElement("template");
    tt.content && tt.content.ownerDocument && (e = tt.content.ownerDocument);
  }
  let E, x = "";
  const {
    implementation: b,
    createNodeIterator: _,
    createDocumentFragment: k,
    getElementsByTagName: G
  } = e, {
    importNode: R
  } = n;
  let A = xr();
  t.isSupported = typeof Bo == "function" && typeof v == "function" && b && b.createHTMLDocument !== void 0;
  const {
    MUSTACHE_EXPR: H,
    ERB_EXPR: N,
    TMPLIT_EXPR: M,
    DATA_ATTR: O,
    ARIA_ATTR: P,
    IS_SCRIPT_OR_DATA: $,
    ATTR_WHITESPACE: C,
    CUSTOM_ELEMENT: V
  } = Er;
  let {
    IS_ALLOWED_URI: q
  } = Er, X = null;
  const F = ut({}, [...gr, ...si, ...ii, ...ai, ...mr]);
  let Z = null;
  const rt = ut({}, [...vr, ...ri, ...yr, ...Qn]);
  let j = Object.seal(zo(null, {
    tagNameCheck: {
      writable: !0,
      configurable: !1,
      enumerable: !0,
      value: null
    },
    attributeNameCheck: {
      writable: !0,
      configurable: !1,
      enumerable: !0,
      value: null
    },
    allowCustomizedBuiltInElements: {
      writable: !0,
      configurable: !1,
      enumerable: !0,
      value: !1
    }
  })), Y = null, K = null, ot = !0, ct = !0, st = !1, it = !0, B = !1, z = !0, U = !1, Mt = !1, Se = !1, et = !1, yt = !1, Zt = !1, Wt = !0, rn = !1;
  const on = "user-content-";
  let Oe = !0, ne = !1, $e = {}, Ve = null;
  const ea = ut({}, ["annotation-xml", "audio", "colgroup", "desc", "foreignobject", "head", "iframe", "math", "mi", "mn", "mo", "ms", "mtext", "noembed", "noframes", "noscript", "plaintext", "script", "style", "svg", "template", "thead", "title", "video", "xmp"]);
  let na = null;
  const sa = ut({}, ["audio", "video", "img", "source", "image", "track"]);
  let ks = null;
  const ia = ut({}, ["alt", "class", "for", "id", "label", "name", "pattern", "placeholder", "role", "summary", "title", "value", "style", "xmlns"]), Nn = "http://www.w3.org/1998/Math/MathML", Pn = "http://www.w3.org/2000/svg", de = "http://www.w3.org/1999/xhtml";
  let Ge = de, _s = !1, Is = null;
  const Ko = ut({}, [Nn, Pn, de], ni);
  let $n = ut({}, ["mi", "mo", "mn", "ms", "mtext"]), Vn = ut({}, ["annotation-xml"]);
  const Jo = ut({}, ["title", "style", "font", "a", "script"]);
  let ln = null;
  const Qo = ["application/xhtml+xml", "text/html"], tl = "text/html";
  let wt = null, He = null;
  const el = e.createElement("form"), aa = function(w) {
    return w instanceof RegExp || w instanceof Function;
  }, Rs = function() {
    let w = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};
    if (!(He && He === w)) {
      if ((!w || typeof w != "object") && (w = {}), w = ke(w), ln = // eslint-disable-next-line unicorn/prefer-includes
      Qo.indexOf(w.PARSER_MEDIA_TYPE) === -1 ? tl : w.PARSER_MEDIA_TYPE, wt = ln === "application/xhtml+xml" ? ni : cs, X = ie(w, "ALLOWED_TAGS") ? ut({}, w.ALLOWED_TAGS, wt) : F, Z = ie(w, "ALLOWED_ATTR") ? ut({}, w.ALLOWED_ATTR, wt) : rt, Is = ie(w, "ALLOWED_NAMESPACES") ? ut({}, w.ALLOWED_NAMESPACES, ni) : Ko, ks = ie(w, "ADD_URI_SAFE_ATTR") ? ut(ke(ia), w.ADD_URI_SAFE_ATTR, wt) : ia, na = ie(w, "ADD_DATA_URI_TAGS") ? ut(ke(sa), w.ADD_DATA_URI_TAGS, wt) : sa, Ve = ie(w, "FORBID_CONTENTS") ? ut({}, w.FORBID_CONTENTS, wt) : ea, Y = ie(w, "FORBID_TAGS") ? ut({}, w.FORBID_TAGS, wt) : {}, K = ie(w, "FORBID_ATTR") ? ut({}, w.FORBID_ATTR, wt) : {}, $e = ie(w, "USE_PROFILES") ? w.USE_PROFILES : !1, ot = w.ALLOW_ARIA_ATTR !== !1, ct = w.ALLOW_DATA_ATTR !== !1, st = w.ALLOW_UNKNOWN_PROTOCOLS || !1, it = w.ALLOW_SELF_CLOSE_IN_ATTR !== !1, B = w.SAFE_FOR_TEMPLATES || !1, z = w.SAFE_FOR_XML !== !1, U = w.WHOLE_DOCUMENT || !1, et = w.RETURN_DOM || !1, yt = w.RETURN_DOM_FRAGMENT || !1, Zt = w.RETURN_TRUSTED_TYPE || !1, Se = w.FORCE_BODY || !1, Wt = w.SANITIZE_DOM !== !1, rn = w.SANITIZE_NAMED_PROPS || !1, Oe = w.KEEP_CONTENT !== !1, ne = w.IN_PLACE || !1, q = w.ALLOWED_URI_REGEXP || Uo, Ge = w.NAMESPACE || de, $n = w.MATHML_TEXT_INTEGRATION_POINTS || $n, Vn = w.HTML_INTEGRATION_POINTS || Vn, j = w.CUSTOM_ELEMENT_HANDLING || {}, w.CUSTOM_ELEMENT_HANDLING && aa(w.CUSTOM_ELEMENT_HANDLING.tagNameCheck) && (j.tagNameCheck = w.CUSTOM_ELEMENT_HANDLING.tagNameCheck), w.CUSTOM_ELEMENT_HANDLING && aa(w.CUSTOM_ELEMENT_HANDLING.attributeNameCheck) && (j.attributeNameCheck = w.CUSTOM_ELEMENT_HANDLING.attributeNameCheck), w.CUSTOM_ELEMENT_HANDLING && typeof w.CUSTOM_ELEMENT_HANDLING.allowCustomizedBuiltInElements == "boolean" && (j.allowCustomizedBuiltInElements = w.CUSTOM_ELEMENT_HANDLING.allowCustomizedBuiltInElements), B && (ct = !1), yt && (et = !0), $e && (X = ut({}, mr), Z = [], $e.html === !0 && (ut(X, gr), ut(Z, vr)), $e.svg === !0 && (ut(X, si), ut(Z, ri), ut(Z, Qn)), $e.svgFilters === !0 && (ut(X, ii), ut(Z, ri), ut(Z, Qn)), $e.mathMl === !0 && (ut(X, ai), ut(Z, yr), ut(Z, Qn))), w.ADD_TAGS && (X === F && (X = ke(X)), ut(X, w.ADD_TAGS, wt)), w.ADD_ATTR && (Z === rt && (Z = ke(Z)), ut(Z, w.ADD_ATTR, wt)), w.ADD_URI_SAFE_ATTR && ut(ks, w.ADD_URI_SAFE_ATTR, wt), w.FORBID_CONTENTS && (Ve === ea && (Ve = ke(Ve)), ut(Ve, w.FORBID_CONTENTS, wt)), Oe && (X["#text"] = !0), U && ut(X, ["html", "head", "body"]), X.table && (ut(X, ["tbody"]), delete Y.tbody), w.TRUSTED_TYPES_POLICY) {
        if (typeof w.TRUSTED_TYPES_POLICY.createHTML != "function")
          throw pn('TRUSTED_TYPES_POLICY configuration option must provide a "createHTML" hook.');
        if (typeof w.TRUSTED_TYPES_POLICY.createScriptURL != "function")
          throw pn('TRUSTED_TYPES_POLICY configuration option must provide a "createScriptURL" hook.');
        E = w.TRUSTED_TYPES_POLICY, x = E.createHTML("");
      } else
        E === void 0 && (E = kd(p, s)), E !== null && typeof x == "string" && (x = E.createHTML(""));
      Ht && Ht(w), He = w;
    }
  }, ra = ut({}, [...si, ...ii, ...Ed]), oa = ut({}, [...ai, ...xd]), nl = function(w) {
    let W = v(w);
    (!W || !W.tagName) && (W = {
      namespaceURI: Ge,
      tagName: "template"
    });
    const Q = cs(w.tagName), St = cs(W.tagName);
    return Is[w.namespaceURI] ? w.namespaceURI === Pn ? W.namespaceURI === de ? Q === "svg" : W.namespaceURI === Nn ? Q === "svg" && (St === "annotation-xml" || $n[St]) : !!ra[Q] : w.namespaceURI === Nn ? W.namespaceURI === de ? Q === "math" : W.namespaceURI === Pn ? Q === "math" && Vn[St] : !!oa[Q] : w.namespaceURI === de ? W.namespaceURI === Pn && !Vn[St] || W.namespaceURI === Nn && !$n[St] ? !1 : !oa[Q] && (Jo[Q] || !ra[Q]) : !!(ln === "application/xhtml+xml" && Is[w.namespaceURI]) : !1;
  }, re = function(w) {
    hn(t.removed, {
      element: w
    });
    try {
      v(w).removeChild(w);
    } catch {
      m(w);
    }
  }, Gn = function(w, W) {
    try {
      hn(t.removed, {
        attribute: W.getAttributeNode(w),
        from: W
      });
    } catch {
      hn(t.removed, {
        attribute: null,
        from: W
      });
    }
    if (W.removeAttribute(w), w === "is")
      if (et || yt)
        try {
          re(W);
        } catch {
        }
      else
        try {
          W.setAttribute(w, "");
        } catch {
        }
  }, la = function(w) {
    let W = null, Q = null;
    if (Se)
      w = "<remove></remove>" + w;
    else {
      const Ct = fr(w, /^[\r\n\t ]+/);
      Q = Ct && Ct[0];
    }
    ln === "application/xhtml+xml" && Ge === de && (w = '<html xmlns="http://www.w3.org/1999/xhtml"><head></head><body>' + w + "</body></html>");
    const St = E ? E.createHTML(w) : w;
    if (Ge === de)
      try {
        W = new u().parseFromString(St, ln);
      } catch {
      }
    if (!W || !W.documentElement) {
      W = b.createDocument(Ge, "template", null);
      try {
        W.documentElement.innerHTML = _s ? x : St;
      } catch {
      }
    }
    const It = W.body || W.documentElement;
    return w && Q && It.insertBefore(e.createTextNode(Q), It.childNodes[0] || null), Ge === de ? G.call(W, U ? "html" : "body")[0] : U ? W.documentElement : It;
  }, ca = function(w) {
    return _.call(
      w.ownerDocument || w,
      w,
      // eslint-disable-next-line no-bitwise
      l.SHOW_ELEMENT | l.SHOW_COMMENT | l.SHOW_TEXT | l.SHOW_PROCESSING_INSTRUCTION | l.SHOW_CDATA_SECTION,
      null
    );
  }, Ds = function(w) {
    return w instanceof d && (typeof w.nodeName != "string" || typeof w.textContent != "string" || typeof w.removeChild != "function" || !(w.attributes instanceof h) || typeof w.removeAttribute != "function" || typeof w.setAttribute != "function" || typeof w.namespaceURI != "string" || typeof w.insertBefore != "function" || typeof w.hasChildNodes != "function");
  }, ua = function(w) {
    return typeof o == "function" && w instanceof o;
  };
  function pe(tt, w, W) {
    Jn(tt, (Q) => {
      Q.call(t, w, W, He);
    });
  }
  const ha = function(w) {
    let W = null;
    if (pe(A.beforeSanitizeElements, w, null), Ds(w))
      return re(w), !0;
    const Q = wt(w.nodeName);
    if (pe(A.uponSanitizeElement, w, {
      tagName: Q,
      allowedTags: X
    }), w.hasChildNodes() && !ua(w.firstElementChild) && $t(/<[/\w]/g, w.innerHTML) && $t(/<[/\w]/g, w.textContent) || w.nodeType === gn.progressingInstruction || z && w.nodeType === gn.comment && $t(/<[/\w]/g, w.data))
      return re(w), !0;
    if (!X[Q] || Y[Q]) {
      if (!Y[Q] && pa(Q) && (j.tagNameCheck instanceof RegExp && $t(j.tagNameCheck, Q) || j.tagNameCheck instanceof Function && j.tagNameCheck(Q)))
        return !1;
      if (Oe && !Ve[Q]) {
        const St = v(w) || w.parentNode, It = S(w) || w.childNodes;
        if (It && St) {
          const Ct = It.length;
          for (let zt = Ct - 1; zt >= 0; --zt) {
            const oe = g(It[zt], !0);
            oe.__removalCount = (w.__removalCount || 0) + 1, St.insertBefore(oe, y(w));
          }
        }
      }
      return re(w), !0;
    }
    return w instanceof c && !nl(w) || (Q === "noscript" || Q === "noembed" || Q === "noframes") && $t(/<\/no(script|embed|frames)/i, w.innerHTML) ? (re(w), !0) : (B && w.nodeType === gn.text && (W = w.textContent, Jn([H, N, M], (St) => {
      W = dn(W, St, " ");
    }), w.textContent !== W && (hn(t.removed, {
      element: w.cloneNode()
    }), w.textContent = W)), pe(A.afterSanitizeElements, w, null), !1);
  }, da = function(w, W, Q) {
    if (Wt && (W === "id" || W === "name") && (Q in e || Q in el))
      return !1;
    if (!(ct && !K[W] && $t(O, W))) {
      if (!(ot && $t(P, W))) {
        if (!Z[W] || K[W]) {
          if (
            // First condition does a very basic check if a) it's basically a valid custom element tagname AND
            // b) if the tagName passes whatever the user has configured for CUSTOM_ELEMENT_HANDLING.tagNameCheck
            // and c) if the attribute name passes whatever the user has configured for CUSTOM_ELEMENT_HANDLING.attributeNameCheck
            !(pa(w) && (j.tagNameCheck instanceof RegExp && $t(j.tagNameCheck, w) || j.tagNameCheck instanceof Function && j.tagNameCheck(w)) && (j.attributeNameCheck instanceof RegExp && $t(j.attributeNameCheck, W) || j.attributeNameCheck instanceof Function && j.attributeNameCheck(W)) || // Alternative, second condition checks if it's an `is`-attribute, AND
            // the value passes whatever the user has configured for CUSTOM_ELEMENT_HANDLING.tagNameCheck
            W === "is" && j.allowCustomizedBuiltInElements && (j.tagNameCheck instanceof RegExp && $t(j.tagNameCheck, Q) || j.tagNameCheck instanceof Function && j.tagNameCheck(Q)))
          ) return !1;
        } else if (!ks[W]) {
          if (!$t(q, dn(Q, C, ""))) {
            if (!((W === "src" || W === "xlink:href" || W === "href") && w !== "script" && gd(Q, "data:") === 0 && na[w])) {
              if (!(st && !$t($, dn(Q, C, "")))) {
                if (Q)
                  return !1;
              }
            }
          }
        }
      }
    }
    return !0;
  }, pa = function(w) {
    return w !== "annotation-xml" && fr(w, V);
  }, fa = function(w) {
    pe(A.beforeSanitizeAttributes, w, null);
    const {
      attributes: W
    } = w;
    if (!W || Ds(w))
      return;
    const Q = {
      attrName: "",
      attrValue: "",
      keepAttr: !0,
      allowedAttributes: Z,
      forceKeepAttr: void 0
    };
    let St = W.length;
    for (; St--; ) {
      const It = W[St], {
        name: Ct,
        namespaceURI: zt,
        value: oe
      } = It, cn = wt(Ct);
      let Pt = Ct === "value" ? oe : md(oe);
      if (Q.attrName = cn, Q.attrValue = Pt, Q.keepAttr = !0, Q.forceKeepAttr = void 0, pe(A.uponSanitizeAttribute, w, Q), Pt = Q.attrValue, rn && (cn === "id" || cn === "name") && (Gn(Ct, w), Pt = on + Pt), z && $t(/((--!?|])>)|<\/(style|title)/i, Pt)) {
        Gn(Ct, w);
        continue;
      }
      if (Q.forceKeepAttr || (Gn(Ct, w), !Q.keepAttr))
        continue;
      if (!it && $t(/\/>/i, Pt)) {
        Gn(Ct, w);
        continue;
      }
      B && Jn([H, N, M], (ma) => {
        Pt = dn(Pt, ma, " ");
      });
      const ga = wt(w.nodeName);
      if (da(ga, cn, Pt)) {
        if (E && typeof p == "object" && typeof p.getAttributeType == "function" && !zt)
          switch (p.getAttributeType(ga, cn)) {
            case "TrustedHTML": {
              Pt = E.createHTML(Pt);
              break;
            }
            case "TrustedScriptURL": {
              Pt = E.createScriptURL(Pt);
              break;
            }
          }
        try {
          zt ? w.setAttributeNS(zt, Ct, Pt) : w.setAttribute(Ct, Pt), Ds(w) ? re(w) : pr(t.removed);
        } catch {
        }
      }
    }
    pe(A.afterSanitizeAttributes, w, null);
  }, sl = function tt(w) {
    let W = null;
    const Q = ca(w);
    for (pe(A.beforeSanitizeShadowDOM, w, null); W = Q.nextNode(); )
      pe(A.uponSanitizeShadowNode, W, null), ha(W), fa(W), W.content instanceof a && tt(W.content);
    pe(A.afterSanitizeShadowDOM, w, null);
  };
  return t.sanitize = function(tt) {
    let w = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {}, W = null, Q = null, St = null, It = null;
    if (_s = !tt, _s && (tt = "<!-->"), typeof tt != "string" && !ua(tt))
      if (typeof tt.toString == "function") {
        if (tt = tt.toString(), typeof tt != "string")
          throw pn("dirty is not a string, aborting");
      } else
        throw pn("toString is not a function");
    if (!t.isSupported)
      return tt;
    if (Mt || Rs(w), t.removed = [], typeof tt == "string" && (ne = !1), ne) {
      if (tt.nodeName) {
        const oe = wt(tt.nodeName);
        if (!X[oe] || Y[oe])
          throw pn("root node is forbidden and cannot be sanitized in-place");
      }
    } else if (tt instanceof o)
      W = la("<!---->"), Q = W.ownerDocument.importNode(tt, !0), Q.nodeType === gn.element && Q.nodeName === "BODY" || Q.nodeName === "HTML" ? W = Q : W.appendChild(Q);
    else {
      if (!et && !B && !U && // eslint-disable-next-line unicorn/prefer-includes
      tt.indexOf("<") === -1)
        return E && Zt ? E.createHTML(tt) : tt;
      if (W = la(tt), !W)
        return et ? null : Zt ? x : "";
    }
    W && Se && re(W.firstChild);
    const Ct = ca(ne ? tt : W);
    for (; St = Ct.nextNode(); )
      ha(St), fa(St), St.content instanceof a && sl(St.content);
    if (ne)
      return tt;
    if (et) {
      if (yt)
        for (It = k.call(W.ownerDocument); W.firstChild; )
          It.appendChild(W.firstChild);
      else
        It = W;
      return (Z.shadowroot || Z.shadowrootmode) && (It = R.call(n, It, !0)), It;
    }
    let zt = U ? W.outerHTML : W.innerHTML;
    return U && X["!doctype"] && W.ownerDocument && W.ownerDocument.doctype && W.ownerDocument.doctype.name && $t(Fo, W.ownerDocument.doctype.name) && (zt = "<!DOCTYPE " + W.ownerDocument.doctype.name + `>
` + zt), B && Jn([H, N, M], (oe) => {
      zt = dn(zt, oe, " ");
    }), E && Zt ? E.createHTML(zt) : zt;
  }, t.setConfig = function() {
    let tt = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};
    Rs(tt), Mt = !0;
  }, t.clearConfig = function() {
    He = null, Mt = !1;
  }, t.isValidAttribute = function(tt, w, W) {
    He || Rs({});
    const Q = wt(tt), St = wt(w);
    return da(Q, St, W);
  }, t.addHook = function(tt, w) {
    typeof w == "function" && hn(A[tt], w);
  }, t.removeHook = function(tt, w) {
    if (w !== void 0) {
      const W = pd(A[tt], w);
      return W === -1 ? void 0 : fd(A[tt], W, 1)[0];
    }
    return pr(A[tt]);
  }, t.removeHooks = function(tt) {
    A[tt] = [];
  }, t.removeAllHooks = function() {
    A = xr();
  }, t;
}
var Ki = Wo();
const ts = (i) => Ki.sanitize(i, {
  USE_PROFILES: {
    html: !0,
    svg: !0,
    svgFilters: !0
  }
}), _d = (i) => Ki.sanitize(i, {
  NAMESPACE: "http://www.w3.org/2000/svg",
  USE_PROFILES: {
    html: !0,
    svg: !0,
    svgFilters: !0
  }
}), he = (i) => Ki.sanitize(i, { ALLOWED_TAGS: [] }), Ts = class Ts extends dt {
  constructor() {
    super(...arguments), this.type = "toolbar", this.renderType = at.HTML;
  }
  init() {
    const t = () => this.updateOverflowMenu(!1);
    this.services.events.addEventListener(T.Toolbar.SHOW_OVERFLOW_MENU, () => {
      this.renderOverflowMenu(), document.body.addEventListener("click", t);
    }), this.services.events.addEventListener(T.Toolbar.HIDE_OVERFLOW_MENU, () => {
      document.body.removeEventListener("click", t);
    });
  }
  // eslint-disable-next-line @typescript-eslint/ban-ts-comment
  // @ts-ignore
  // eslint-disable-next-line @typescript-eslint/no-unused-vars
  render(t = !0) {
    const e = this.getComponentContainer({
      ariaLabel: "toolbar"
    }).attr("role", "group");
    if (L(this.getOptions(), "data", "loading"))
      e.html(""), this.overflowMenu = null;
    else {
      this.overflowMenu || (this.overflowMenu = e.append("div").attr(
        "class",
        "cds--overflow-menu-options cds--overflow-menu--flip cds--overflow-menu-options cds--overflow-menu--flip"
      ).attr("tabindex", -1).html("<ul role='menu'></ul>"));
      const { buttonList: s, overflowMenuItemList: a } = this.getControlConfigs();
      a && s.push(this.getOverflowButtonConfig());
      const r = e.selectAll("div.toolbar-control").data(s, (l) => l.id);
      r.exit().remove();
      const o = r.enter().append("div").attr("class", "toolbar-control cds--overflow-menu cds--overflow-menu"), c = this;
      o.merge(r).classed("disabled", (l) => l.shouldBeDisabled()).attr("role", "button").attr("aria-disabled", (l) => l.shouldBeDisabled()).attr("aria-label", (l) => l.title).html((l) => `
			<button
				class="cds--overflow-menu__trigger cds--overflow-menu__trigger"
				aria-haspopup="true" aria-expanded="false" id="${this.services.domUtils.generateElementIDString(
        `control-${he(l.id)}`
      )}" aria-label="${he(l.title)}">
				<svg focusable="false" preserveAspectRatio="xMidYMid meet" xmlns="http://www.w3.org/2000/svg" class="cds--overflow-menu__icon cds--overflow-menu__icon" viewBox="0 0 32 32" aria-hidden="true">
					${_d(l.iconSVG.content)}
				</svg>
			</button>`).each(function(l, h) {
        D(this).select("svg").style("pointer-events", "none").style("will-change", "transform").style("width", l.iconSVG.width !== void 0 ? l.iconSVG.width : "20px").style("height", l.iconSVG.height !== void 0 ? l.iconSVG.height : "20px"), D(this).select("button").on("mouseover focus", function(d) {
          const u = D(this);
          u.classed("hovered", !0), c.services.events.dispatchEvent(T.Toolbar.SHOW_TOOLTIP, {
            event: d,
            hoveredElement: u,
            content: l.title,
            noWrap: !0,
            placements: ["top", "bottom"]
          });
        }).on("mouseout blur", function() {
          c.services.events.dispatchEvent(T.Toolbar.HIDE_TOOLTIP);
        }).on("click", (d) => {
          l.shouldBeDisabled() || c.triggerFunctionAndEvent(l, d, this);
        }).on("keydown", (d) => {
          d.key && d.key === "Enter" || d.key === " " ? (d.preventDefault(), c.triggerFunctionAndEvent(l, d, this)) : d.key && d.key === "ArrowLeft" ? c.focusOnPreviousEnabledToolbarItem(h) : d.key && d.key === "ArrowRight" && c.focusOnNextEnabledToolbarItem(h);
        });
      }), this.overflowButton = this.getComponentContainer().select(
        `button.cds--overflow-menu__trigger#${this.services.domUtils.generateElementIDString(
          "control-toolbar-overflow-menu"
        )}`
      );
    }
  }
  renderOverflowMenu() {
    const { overflowMenuItemList: t } = this.getControlConfigs(), e = this.overflowMenu.select("ul").selectAll("li.cds--overflow-menu-options__option").data(t, (s) => L(s, "id"));
    e.exit().remove();
    const n = e.enter().append("li").attr("id", (s) => this.services.domUtils.generateElementIDString(`control-${s.id}`)).attr("class", "cds--overflow-menu-options__option cds--overflow-menu-options__option").attr("role", "menuitem").attr("tabindex", 1);
    n.append("button").attr("class", "cds--overflow-menu-options__btn cds--overflow-menu-options__btn"), n.merge(e).classed("cds--overflow-menu-options__option--disabled", (s) => s.shouldBeDisabled()).classed("cds--overflow-menu-options__option--disabled", (s) => s.shouldBeDisabled()).attr("aria-disabled", (s) => s.shouldBeDisabled()).selectAll("button").text((s) => s.title);
  }
  isOverflowMenuOpen() {
    return this.overflowMenu.classed("is-open");
  }
  // show/hide overflow menu
  updateOverflowMenu(t) {
    this.overflowMenu && (this.overflowMenu.classed("is-open", t), this.overflowButton && (this.overflowButton.attr("aria-expanded", t), D(this.overflowButton.node().parentNode).classed("cds--overflow-menu--open", t).classed("cds--overflow-menu--open", t)), t ? this.services.events.dispatchEvent(T.Toolbar.SHOW_OVERFLOW_MENU) : this.services.events.dispatchEvent(T.Toolbar.HIDE_OVERFLOW_MENU));
  }
  // Toolbar controllers
  focusOnPreviousEnabledToolbarItem(t) {
    const e = this.getToolbarButtonItems();
    let n = e.length;
    for (let s = t - 1; s >= 0; s--)
      if (!e[s].shouldBeDisabled()) {
        n = s;
        break;
      }
    if (n < e.length) {
      const s = D(
        `button#${this.services.domUtils.generateElementIDString(
          `control-${e[n].id}`
        )}`
      ).node();
      "focus" in s && s.focus();
    }
  }
  focusOnNextEnabledToolbarItem(t) {
    const e = this.getToolbarButtonItems();
    let n = -1;
    for (let s = t + 1; s < e.length; s++)
      if (!e[s].shouldBeDisabled()) {
        n = s;
        break;
      }
    if (n > -1) {
      const s = D(
        `button#${this.services.domUtils.generateElementIDString(
          `control-${e[n].id}`
        )}`
      ).node();
      "focus" in s && s.focus();
    }
  }
  focusOnPreviousEnabledMenuItem(t) {
    const e = this.getOverflowMenuItems();
    let n = e.length;
    for (let s = t - 1; s >= 0; s--)
      if (!e[s].shouldBeDisabled()) {
        n = s;
        break;
      }
    if (n < e.length) {
      const s = D(
        `#${this.services.domUtils.generateElementIDString(
          `control-${e[n].id}`
        )} button`
      ).node();
      "focus" in s && s.focus();
    }
  }
  focusOnNextEnabledMenuItem(t) {
    const e = this.getOverflowMenuItems();
    let n = -1;
    for (let s = t + 1; s < e.length; s++)
      if (!e[s].shouldBeDisabled()) {
        n = s;
        break;
      }
    if (n > -1) {
      const s = D(
        `#${this.services.domUtils.generateElementIDString(
          `control-${e[n].id}`
        )} button`
      ).node();
      "focus" in s && s.focus();
    }
  }
  toggleOverflowMenu(t) {
    if (this.isOverflowMenuOpen())
      this.updateOverflowMenu(!1);
    else {
      this.updateOverflowMenu(!0);
      const e = this;
      this.getOverflowMenuItems().forEach((s, a) => {
        const r = D(
          `#${this.services.domUtils.generateElementIDString(`control-${s.id}`)}`
        );
        r !== null && (r.on("click", () => {
          e.triggerFunctionAndEvent(s, t, r.node()), e.updateOverflowMenu(!1);
        }), r.on("keydown", (o) => {
          o && o.key === "Enter" ? e.triggerFunctionAndEvent(s, t, r.node()) : o && o.key === "ArrowUp" ? e.focusOnPreviousEnabledMenuItem(a) : o && o.key === "ArrowDown" ? e.focusOnNextEnabledMenuItem(a) : o && o.key === "Escape" && e.updateOverflowMenu(!1), o.preventDefault();
        }));
      }), e.focusOnNextEnabledMenuItem(-1);
    }
    t && t.stopImmediatePropagation();
  }
  // Calls passed function && dispatches event
  triggerFunctionAndEvent(t, e, n) {
    typeof t.shouldBeDisabled == "function" && t.shouldBeDisabled() || (typeof t.clickFunction == "function" && t.clickFunction(e), this.services.events.dispatchEvent(T.Toolbar.BUTTON_CLICK, {
      control: t,
      event: e,
      element: n
    }));
  }
  getControlConfigs() {
    const t = L(this.getOptions(), "toolbar", "numberOfIcons") - 1, e = L(this.getOptions(), "toolbar", "controls"), n = [], s = [], a = [];
    return e.forEach((r) => {
      let o = null;
      if (r.type === Tt.CUSTOM)
        L(r, "id") === null && (r.id = `toolbar-button-${Ts.buttonID++}`), L(r, "shouldBeDisabled") === null && (r.shouldBeDisabled = () => !1), o = r;
      else {
        const c = this.services.domUtils.isFullScreenMode();
        r.type === Tt.MAKE_FULLSCREEN && c ? r.type = Tt.EXIT_FULLSCREEN : r.type === Tt.EXIT_FULLSCREEN && !c && (r.type = Tt.MAKE_FULLSCREEN), o = this.getControlConfigByType(r.type);
      }
      o && (o.text = r.text ? r.text : r.type, o.id.indexOf("toolbar-export") !== -1 ? n.push(o) : s.length < t ? L(o, "iconSVG", "content") === null ? a.push(o) : s.push(o) : a.push(o));
    }), a.push(...n), a.length ? {
      buttonList: s,
      overflowMenuItemList: a
    } : {
      buttonList: s
    };
  }
  getToolbarButtonItems() {
    const { buttonList: t, overflowMenuItemList: e } = this.getControlConfigs();
    return e && t.push(this.getOverflowButtonConfig()), t || [];
  }
  getOverflowMenuItems() {
    const { overflowMenuItemList: t } = this.getControlConfigs();
    return t || [];
  }
  // special button config for overflow button
  getOverflowButtonConfig() {
    const { moreOptions: t } = L(
      this.model.getOptions(),
      "locale",
      "translations",
      "toolbar"
    );
    return {
      id: "toolbar-overflow-menu",
      title: t,
      shouldBeDisabled: () => !1,
      iconSVG: {
        content: `<circle cx="16" cy="8" r="2"></circle>
				<circle cx="16" cy="16" r="2"></circle>
				<circle cx="16" cy="24" r="2"></circle>`
      },
      clickFunction: (e) => this.toggleOverflowMenu(e)
    };
  }
  getControlConfigByType(t) {
    const e = this.services.zoom && this.services.zoom.isZoomBarEnabled() && !this.services.zoom.isEmptyState(), n = this.model.getDisplayData(), s = this.model.getOptions(), {
      exportAsCSV: a,
      exportAsJPG: r,
      exportAsPNG: o,
      zoomIn: c,
      zoomOut: l,
      resetZoom: h,
      makeFullScreen: d,
      exitFullScreen: u,
      showAsTable: p
    } = L(s, "locale", "translations", "toolbar");
    let f;
    switch (t) {
      case Tt.ZOOM_IN:
        e && (f = {
          id: "toolbar-zoomIn",
          title: c,
          shouldBeDisabled: () => this.services.zoom.isMinZoomDomain(),
          iconSVG: {
            content: this.getControlIconByType(t)
          },
          clickFunction: () => this.services.zoom.zoomIn()
        });
        break;
      case Tt.ZOOM_OUT:
        e && (f = {
          id: "toolbar-zoomOut",
          title: l,
          shouldBeDisabled: () => this.services.zoom.isMaxZoomDomain(),
          iconSVG: {
            content: this.getControlIconByType(t)
          },
          clickFunction: () => this.services.zoom.zoomOut()
        });
        break;
      case Tt.RESET_ZOOM:
        e && (f = {
          id: "toolbar-resetZoom",
          title: h,
          shouldBeDisabled: () => this.services.zoom.isMaxZoomDomain(),
          iconSVG: {
            content: this.getControlIconByType(t)
          },
          clickFunction: () => this.services.zoom.resetZoomDomain()
        });
        break;
      case Tt.MAKE_FULLSCREEN:
        f = {
          id: "toolbar-makefullscreen",
          iconSVG: {
            content: this.getControlIconByType(t),
            width: "15px",
            height: "15px"
          },
          title: d,
          shouldBeDisabled: () => !1,
          clickFunction: () => {
            this.services.domUtils.toggleFullscreen();
          }
        };
        break;
      case Tt.EXIT_FULLSCREEN:
        f = {
          id: "toolbar-exitfullscreen",
          iconSVG: {
            content: this.getControlIconByType(t),
            width: "15px",
            height: "15px"
          },
          title: u,
          shouldBeDisabled: () => !1,
          clickFunction: () => {
            this.services.domUtils.toggleFullscreen();
          }
        };
        break;
      case Tt.SHOW_AS_DATATABLE:
        f = {
          id: "toolbar-showasdatatable",
          iconSVG: {
            content: this.getControlIconByType(t)
          },
          title: p,
          shouldBeDisabled: () => n.length === 0,
          clickFunction: () => this.services.events.dispatchEvent(T.Modal.SHOW)
        };
        break;
      case Tt.EXPORT_CSV:
        f = {
          id: "toolbar-export-CSV",
          title: a,
          shouldBeDisabled: () => !1,
          iconSVG: {
            content: this.getControlIconByType(t)
          },
          clickFunction: () => this.model.exportToCSV()
        };
        break;
      case Tt.EXPORT_PNG:
        f = {
          id: "toolbar-export-PNG",
          title: o,
          shouldBeDisabled: () => !1,
          iconSVG: {
            content: this.getControlIconByType(t)
          },
          clickFunction: () => this.services.domUtils.exportToPNG()
        };
        break;
      case Tt.EXPORT_JPG:
        f = {
          id: "toolbar-export-JPG",
          title: r,
          shouldBeDisabled: () => !1,
          iconSVG: {
            content: this.getControlIconByType(t)
          },
          clickFunction: () => this.services.domUtils.exportToJPG()
        };
        break;
      // add more toolbar control configuration here
      default:
        throw Error("Not supported toolbar control type: " + t);
    }
    return f;
  }
  getControlIconByType(t) {
    switch (t) {
      case Tt.ZOOM_IN:
        return `<polygon points="19 13 15 13 15 9 13 9 13 13 9 13 9 15 13 15 13 19 15 19 15 15 19 15 19 13"/>
						<path d="M22.45,21A10.87,10.87,0,0,0,25,14,11,11,0,1,0,14,25a10.87,10.87,0,0,0,7-2.55L28.59,30,30,28.59ZM14,23a9,9,0,1,1,9-9A9,9,0,0,1,14,23Z"/>`;
      case Tt.ZOOM_OUT:
        return `<rect x="9" y="13" width="10" height="2"/>
						<path d="M22.45,21A10.87,10.87,0,0,0,25,14,11,11,0,1,0,14,25a10.87,10.87,0,0,0,7-2.55L28.59,30,30,28.59ZM14,23a9,9,0,1,1,9-9A9,9,0,0,1,14,23Z"/>`;
      case Tt.RESET_ZOOM:
        return '<path d="M22.4478,21A10.855,10.855,0,0,0,25,14,10.99,10.99,0,0,0,6,6.4658V2H4v8h8V8H7.332a8.9768,8.9768,0,1,1-2.1,8H3.1912A11.0118,11.0118,0,0,0,14,25a10.855,10.855,0,0,0,7-2.5522L28.5859,30,30,28.5859Z"/>';
      case Tt.MAKE_FULLSCREEN:
        return '<polygon points="21 2 21 4 26.59 4 17 13.58 18.41 15 28 5.41 28 11 30 11 30 2 21 2"/><polygon points="15 18.42 13.59 17 4 26.59 4 21 2 21 2 30 11 30 11 28 5.41 28 15 18.42"/>';
      case Tt.EXIT_FULLSCREEN:
        return '<polygon points="4 18 4 20 10.586 20 2 28.582 3.414 30 12 21.414 12 28 14 28 14 18 4 18"/><polygon points="30 3.416 28.592 2 20 10.586 20 4 18 4 18 14 28 14 28 12 21.414 12 30 3.416"/>';
      case Tt.SHOW_AS_DATATABLE:
        return '<rect x="4" y="6" width="18" height="2"/><rect x="4" y="12" width="18" height="2"/><rect x="4" y="18" width="18" height="2"/><rect x="4" y="24" width="18" height="2"/><rect x="26" y="6" width="2" height="2"/><rect x="26" y="12" width="2" height="2"/><rect x="26" y="18" width="2" height="2"/><rect x="26" y="24" width="2" height="2"/>';
      case Tt.EXPORT_CSV:
        return '<path d="M22.4478,21A10.855,10.855,0,0,0,25,14,10.99,10.99,0,0,0,6,6.4658V2H4v8h8V8H7.332a8.9768,8.9768,0,1,1-2.1,8H3.1912A11.0118,11.0118,0,0,0,14,25a10.855,10.855,0,0,0,7-2.5522L28.5859,30,30,28.5859Z"/>';
      case Tt.EXPORT_JPG:
        return '<path d="M22.4478,21A10.855,10.855,0,0,0,25,14,10.99,10.99,0,0,0,6,6.4658V2H4v8h8V8H7.332a8.9768,8.9768,0,1,1-2.1,8H3.1912A11.0118,11.0118,0,0,0,14,25a10.855,10.855,0,0,0,7-2.5522L28.5859,30,30,28.5859Z"/>';
      case Tt.EXPORT_PNG:
        return '<path d="M22.4478,21A10.855,10.855,0,0,0,25,14,10.99,10.99,0,0,0,6,6.4658V2H4v8h8V8H7.332a8.9768,8.9768,0,1,1-2.1,8H3.1912A11.0118,11.0118,0,0,0,14,25a10.855,10.855,0,0,0,7-2.5522L28.5859,30,30,28.5859Z"/>';
      // add more icons here
      // svg icon must be with 32x32 viewBox
      default:
        throw Error("Not supported toolbar control type: " + t);
    }
  }
};
Ts.buttonID = 0;
let Sr = Ts;
const bs = class bs extends dt {
  constructor(t, e, n, s) {
    super(t, e, s), this.type = "layout", this.configs = s, this.children = n, this._instanceID = bs.instanceID++, this.init();
  }
  init() {
    this.children.forEach((t) => {
      t.components.forEach((e) => {
        e.init();
      });
    });
  }
  getPreferedAndFixedSizeSum() {
    const t = this.parent;
    let e = 0;
    return t.selectAll(`div.layout-child-${this._instanceID}`).filter((n) => {
      const s = L(n, "growth");
      return s === Te.PREFERRED || s === Te.FIXED;
    }).each(function(n) {
      e += n.size;
    }), e;
  }
  getNumOfStretchChildren() {
    return this.parent.selectAll(`div.layout-child-${this._instanceID}`).filter((e) => L(e, "growth") === Te.STRETCH).size();
  }
  render(t = !0) {
    const e = this.model.getOptions(), n = this.parent, { width: s, height: a } = I.getHTMLElementSize(n.node()), r = this.configs.direction === Be.ROW || this.configs.direction === Be.ROW_REVERSE, o = L(this.model.getOptions(), "style", "prefix"), c = n.classed(
      `${Kt}--${o}--layout-row`,
      this.configs.direction === Be.ROW
    ).classed(
      `${Kt}--${o}--layout-row-reverse`,
      this.configs.direction === Be.ROW_REVERSE
    ).classed(
      `${Kt}--${o}--layout-column`,
      this.configs.direction === Be.COLUMN
    ).classed(
      `${Kt}--${o}--layout-column-reverse`,
      this.configs.direction === Be.COLUMN_REVERSE
    ).classed(
      `${Kt}--${o}--layout-alignitems-center`,
      this.configs.alignItems === El.CENTER
    ).selectAll(`div.layout-child-${this._instanceID}`).data(this.children, (d) => d.id);
    c.enter().append("div").merge(n.selectAll(`div.layout-child-${this._instanceID}`)).attr("class", (d) => `layout-child layout-child-${this._instanceID} ${d.id}`).each(function(d) {
      d.components.forEach((u) => {
        var y;
        const p = D(this), g = L(d, "renderType") === at.SVG;
        u.setParent(
          g ? I.appendOrSelect(p, "svg.layout-svg-wrapper").attr("width", "100%").attr("height", "100%") : p
        ), g && !p.select("svg.layout-svg-wrapper").attr("aria-label") && p.select("svg.layout-svg-wrapper").attr("aria-label", ((y = e == null ? void 0 : e.accessibility) == null ? void 0 : y.svgAriaLabel) || (e == null ? void 0 : e.title));
        const m = L(d, "growth");
        (m === Te.PREFERRED || m === Te.FIXED) && u.render(t);
      });
    }), n.selectAll(`div.layout-child-${this._instanceID}`).style("height", null).style("width", null).each(function(d) {
      const u = L(d, "growth"), f = L(d, "renderType") === at.SVG ? I.getSVGElementSize(D(this).select("svg.layout-svg-wrapper"), {
        useBBox: !0
      }) : I.getHTMLElementSize(this);
      if (u === Te.PREFERRED) {
        const g = r ? f.width : f.height, m = r ? s : a;
        d.size = g / m * 100;
      }
    }), c.exit().remove(), this.children.filter((d) => L(d, "growth") === Te.STRETCH).forEach((d) => {
      d.size = (100 - +this.getPreferedAndFixedSizeSum()) / +this.getNumOfStretchChildren();
    });
    const h = n.selectAll(`div.layout-child-${this._instanceID}`).data(this.children, (d) => d.id);
    r ? h.style("width", (d) => `${d.size / 100 * s}px`).style("height", "100%") : h.style("height", (d) => `${d.size / 100 * a}px`).style("width", "100%"), h.each(function(d) {
      d.components.forEach((u) => {
        L(d, "growth") === Te.STRETCH && u.render(t);
      });
    });
  }
  // Pass on model to children as well
  setModel(t) {
    super.setModel(t), this.children.forEach((e) => {
      e.components.forEach((n) => n.setModel(t));
    });
  }
  // Pass on essentials to children as well
  setServices(t) {
    super.setServices(t), this.children.forEach((e) => {
      e.components.forEach((n) => n.setServices(t));
    });
  }
  destroy() {
    this.children.forEach((t) => {
      t.components.forEach((e) => e.destroy());
    });
  }
};
bs.instanceID = Math.floor(Math.random() * 99999999999);
let Tr = bs;
class rm extends dt {
  constructor() {
    super(...arguments), this.type = "spacer";
  }
  // eslint-disable-next-line @typescript-eslint/ban-ts-comment
  // @ts-ignore
  // eslint-disable-next-line @typescript-eslint/no-unused-vars
  render(t = !1) {
    this.getComponentContainer({
      isPresentational: !0
    }).style("width", `${this.configs.size || ya.default.size}px`).style("height", `${this.configs.size || ya.default.size}px`).attr("opacity", 0);
  }
}
class om extends dt {
  constructor(t, e, n) {
    super(t, e, n), this.type = "modal", this.isEventListenerAdded = !1, this.handleShowModal = () => {
      const s = this.services.domUtils.getChartID();
      this.modal.attr("data-modal", !0).attr("class", "cds--modal").attr("role", "dialog").attr("aria-modal", !0).attr("aria-labelledby", `${s}__modal-title`).attr("aria-describedby", `${s}__modal-description`).attr("tabindex", -1).style("opacity", 1).style("visibility", "visible"), this.modal.html(this.getModalHTML()), this.modal.select("div.cds--modal-footer button.cds--btn").on("click", () => this.model.exportToCSV()), this.modal.on("click", this.handleHideModal), this.modal.select(".cds--modal-container").on("click", (a) => {
        a.stopPropagation();
      }), this.modal.select(".cds--modal-close").on("click", this.handleHideModal), typeof window < "u" && window.addEventListener("keydown", this.handleEscapeKey);
    }, this.handleEscapeKey = (s) => {
      s.key === "Escape" && this.handleHideModal();
    }, this.handleHideModal = () => {
      this.modal.attr("role", null).attr("aria-modal", null).attr("aria-labelledby", null).attr("aria-describedby", null).attr("tabindex", null).style("opacity", 0).style("visibility", "hidden"), this.modal.on("click", null), this.modal.select(".cds--modal-container").on("click", null), this.modal.select(".cds--modal-close").on("click", null), typeof window < "u" && window.removeEventListener("keydown", this.handleEscapeKey);
    }, this.init();
  }
  addEventListeners() {
    this.services.events.addEventListener(T.Modal.SHOW, this.handleShowModal);
  }
  removeEventListeners() {
    this.services.events.removeEventListener(T.Modal.SHOW, this.handleShowModal);
  }
  getModalHTML() {
    const t = this.services.domUtils.getChartID(), e = this.model.getOptions(), { title: n, downloadAsCSV: s } = L(e, "locale", "translations", "tabularRep"), a = L(e, "style", "prefix"), r = this.model.getTabularDataArray();
    return `
		<div class="cds--modal-container">
			<div class="cds--modal-header">

				<p class="cds--modal-header__label cds--type-delta" id="modal-title">${n}</p>

				<p class="cds--modal-header__heading cds--type-beta" id="${t}__modal-description">${he(
      e.title
    )}</p>

				<button class="cds--modal-close" type="button" data-modal-close aria-label="close modal"  data-modal-primary-focus>
					<svg focusable="false" preserveAspectRatio="xMidYMid meet" xmlns="http://www.w3.org/2000/svg" fill="currentColor" aria-label="Close" width="20" height="20" viewBox="0 0 32 32" role="img" class="cds--modal-close__icon">
						<path d="M24 9.4L22.6 8 16 14.6 9.4 8 8 9.4 14.6 16 8 22.6 9.4 24 16 17.4 22.6 24 24 22.6 17.4 16 24 9.4z"></path>
					</svg>
				</button>
			</div>

			<div class="cds--modal-content">
				<table class="cds--data-table cds--data-table--no-border">
					<thead>
						<tr>
							${xt(r, 0).map(
      (o) => `<th scope="col">
								<div class="cds--table-header-label">${he(o)}</div>
							</th>`
    ).join("")}
						</tr>
					</thead>

					<tbody>${r.slice(1).map(
      (o) => `
							<tr>
								${o.map((c) => `<td>${he(c)}</td>`).join("")}
							</tr>`
    ).join("")}
					</tbody>
				</table>
			</div>

			<div class="cds--modal-footer">
			  <div class="${Kt}--${a}-modal-footer-spacer"></div>
			  <button class="cds--btn cds--btn--primary" type="button" data-modal-primary-focus>${s}</button>
			</div>
		</div>`;
  }
  // eslint-disable-next-line @typescript-eslint/ban-ts-comment
  // @ts-ignore
  // eslint-disable-next-line @typescript-eslint/no-unused-vars
  render(t = !1) {
    const e = this.model.getOptions();
    if (!this.isEventListenerAdded) {
      const n = D(this.services.domUtils.getHolder()), s = L(e, "style", "prefix");
      this.modal = I.appendOrSelect(n, `div.${Kt}--${s}--modal`), this.addEventListeners(), this.isEventListenerAdded = !0;
    }
  }
  destroy() {
    this.removeEventListeners(), this.isEventListenerAdded = !1;
  }
}
class Id extends dt {
  constructor() {
    super(...arguments), this.type = "title", this.renderType = at.HTML;
  }
  // eslint-disable-next-line @typescript-eslint/ban-ts-comment
  // @ts-ignore
  // eslint-disable-next-line @typescript-eslint/no-unused-vars
  render(t = !1) {
    const e = this.getComponentContainer(), n = L(this.getOptions(), "title"), s = e.selectAll("p.title").data([n]);
    if (s.enter().append("p").classed("title", !0).attr("role", "heading").attr("aria-level", 2).merge(s).html((a) => he(a)), s.node() && s.node().offsetWidth < s.node().scrollWidth) {
      const a = this;
      s.on("mouseover", function(r) {
        a.services.events.dispatchEvent(T.Tooltip.SHOW, {
          event: r,
          hoveredElement: s,
          content: s.text()
        });
      }).on("mousemove", function(r) {
        a.services.events.dispatchEvent(T.Tooltip.MOVE, {
          event: r
        });
      }).on("mouseout", function() {
        a.services.events.dispatchEvent(T.Tooltip.HIDE);
      });
    }
    s.exit().remove();
  }
  /**
   * Truncates title creating ellipses and attaching tooltip for exposing full title.
   */
  truncateTitle(t, e) {
    if (e <= 0)
      return;
    const n = t.text();
    if (t.node().getComputedTextLength() > e) {
      t.append("tspan").text("...");
      const s = I.appendOrSelect(t, "tspan").node().getComputedTextLength(), a = t.text(), r = this.getSubstringIndex(
        t.node(),
        0,
        a.length - 1,
        e - s
      );
      t.html(a.substring(0, r - 1)).append("tspan").text("...");
      const o = this;
      t.on("mouseover", function(c) {
        o.services.events.dispatchEvent(T.Tooltip.SHOW, {
          event: c,
          hoveredElement: t,
          content: n
        });
      }).on("mousemove", function(c) {
        o.services.events.dispatchEvent(T.Tooltip.MOVE, {
          event: c
        });
      }).on("mouseout", function() {
        o.services.events.dispatchEvent(T.Tooltip.HIDE);
      });
    }
  }
  // computes the maximum space a title can take
  getMaxTitleWidth() {
    return I.getSVGElementSize(this.parent.node(), {
      useAttrs: !0
    }).width;
  }
  /**
   * Returns the index for a maximum length substring that is less than the width parameter.
   * @param title the title node used for getting the text lengths of substrings
   * @param start the start index for the binary search
   * @param end the end index for the binary search
   * @param width the width of the svg container that holds the title
   */
  getSubstringIndex(t, e, n, s) {
    const a = Math.floor((n + e) / 2);
    return t.getSubStringLength(0, a) > s ? this.getSubstringIndex(t, e, a, s) : t.getSubStringLength(0, a) < s ? t.getSubStringLength(0, a + 1) > s ? a : this.getSubstringIndex(t, a, n, s) : a;
  }
}
class Rd extends dt {
  constructor() {
    super(...arguments), this.type = "legend", this.renderType = at.HTML;
  }
  // eslint-disable-next-line @typescript-eslint/ban-ts-comment
  // @ts-ignore
  // eslint-disable-next-line @typescript-eslint/no-unused-vars
  render(t = !1) {
    const e = this.getOptions(), n = L(e, "legend"), s = L(n, "alignment"), a = L(e, "legend", "orientation");
    let r = this.model.getDataGroups();
    const { DISABLED: o } = At.items.status, c = r.some((S) => S.status === o), l = L(n, "order"), h = this.getComponentContainer().classed("center-aligned", s === te.CENTER).classed("right-aligned", s === te.RIGHT).classed(a, !0).classed("has-deactivated-items", c).attr("role", lt.GROUP).attr("aria-label", "Data groups").attr("data-name", "legend-items");
    l && (r = this.sortDataGroups(r, l));
    const d = h.selectAll("div.legend-item").data(r, (S) => S.name), u = d.enter().append("div").attr("class", "legend-item");
    u.merge(h.selectAll("div.legend-item")).classed("active", function(S) {
      return S.status === At.items.status.ACTIVE;
    });
    const p = L(this.getOptions(), "legend", "clickable");
    h.classed("clickable", p && r.length > 1);
    const f = At.checkbox.radius, g = u.append("div").classed("checkbox", !0), m = g.merge(d.select("div.checkbox")).attr("role", lt.CHECKBOX).attr("tabindex", p ? 0 : -1).attr(
      "aria-labelledby",
      (S, v) => this.services.domUtils.generateElementIDString(`legend-datagroup-${v}-title`)
    ).attr("aria-checked", ({ status: S }) => S === At.items.status.ACTIVE).attr("width", f * 2).attr("height", f * 2).attr(
      "class",
      (S) => this.model.getColorClassName({
        classNameTypes: [nt.BACKGROUND],
        dataGroupName: S.name,
        originalClassName: "checkbox"
      })
    ).style(
      "background",
      (S) => S.status === At.items.status.ACTIVE ? this.model.getFillColor(S.name) || this.model.getStrokeColor(S.name) : null
    ).classed("active", function(S) {
      return S.status === At.items.status.ACTIVE;
    });
    g.append("svg").attr("focusable", !1).attr("preserveAspectRatio", "xMidYMid meet").attr("xmlns", "http://www.w3.org/2000/svg").attr("width", "11").attr("height", "11").attr("viewBox", "0 0 31 28").attr("aria-hidden", !0).style("will-change", "transform").append("path").attr("d", "M13 21.2l-7.1-7.1-1.4 1.4 7.1 7.1L13 24 27.1 9.9l-1.4-1.5z"), u.append("p").merge(d.select("p"));
    const y = L(e, "legend", "additionalItems");
    if (y && r.length) {
      const S = this, v = h.selectAll("div.additional-item").data(y);
      v.exit().remove();
      const E = v.enter().append("div").merge(v).classed("legend-item", !0).classed("additional", !0).attr(
        "aria-labelledby",
        (_, k) => this.services.domUtils.generateElementIDString(
          `legend-datagroup-${m.size() + k}-title`
        )
      );
      E.selectAll("*").remove();
      let x, b = 1;
      E.append("svg").classed("icon", !0).each(function(_) {
        const k = D(this);
        !x || x != _.type ? (x = _.type, b = 1) : b++, S.addAdditionalItem(k, _, b);
      }), E.append("p").merge(E.select("p")), this.truncateLegendText();
    }
    d.exit().on("mouseover", null).on("click", null).on("mouseout", null).remove(), p && u.size() > 1 && this.addEventListeners();
  }
  sortDataGroups(t, e) {
    if (t.sort(
      (n, s) => e.indexOf(n.name) - e.indexOf(s.name)
    ), e.length < t.length) {
      const n = t.length - e.length;
      return t.slice(n).concat(t.slice(0, n));
    }
    return t;
  }
  addAdditionalItem(t, e, n) {
    const { width: s, height: a } = At.area;
    if (e.type === Ae.RADIUS ? t.style("width", `${a}px`).style("height", `${a}px`) : t.style("width", `${s}px`).style("height", `${a}px`), e.type === Ae.RADIUS) {
      const { iconData: r, fill: o, stroke: c } = At.radius;
      t.attr("fill", "none").selectAll("circle").data(r).enter().append("circle").classed("radius", !0).attr("role", lt.IMG).attr("aria-label", "radius").attr("cx", (h) => h.cx).attr("cy", (h) => h.cy).attr("r", (h) => h.r).style("fill", e.fill ? e.fill : o).style("stroke", e.stroke ? e.stroke : c);
    } else if (e.type === Ae.LINE) {
      const r = At.line;
      t.select("line.line").empty() && t.append("line").classed(`line-${n}`, !0).attr("role", lt.IMG).attr("aria-label", "line").attr("x1", 0).attr("y1", r.yPosition).attr("x2", s).attr("y2", r.yPosition).style("stroke", e.stroke ? e.stroke : r.stroke).style("stroke-width", r.strokeWidth);
    } else if (e.type === Ae.AREA)
      t.select("rect.area").empty() && t.append("rect").classed(`area-${n}`, !0).attr("role", lt.IMG).attr("aria-label", "area").attr("width", s).attr("height", a).style(
        "fill",
        n > 3 && !e.fill ? At.area.fill : e.fill
      ).style("stroke", e.stroke);
    else if (e.type === Ae.SIZE) {
      const { iconData: r, fill: o, stroke: c } = At.size;
      t.attr("fill", "none").attr("role", lt.IMG).attr("aria-label", "size").selectAll("rect").data(r).enter().append("rect").classed("size", !0).attr("width", (h) => h.width).attr("height", (h) => h.height).attr("y", () => 0).style("fill", e.fill ? e.fill : o).style("stroke", e.stroke ? e.stroke : c).style("stroke-width", 1);
    } else if (e.type === Ae.QUARTILE) {
      const { iconData: r } = At.quartile;
      t.selectAll("rect").attr("role", lt.IMG).attr("aria-label", "quartile").data(r).enter().append("rect").attr("class", (c, l) => `quartile-${l === 0 ? "wrapper" : "line"}`).attr("x", (c) => c.x).attr("y", (c) => c.y).attr("width", (c) => c.width).attr("height", (c) => c.height);
    } else if (e.type === Ae.ZOOM) {
      const { iconData: r, color: o } = L(At, "zoom"), c = t.attr("role", lt.IMG).attr("aria-label", "zoom").selectAll("g.icon").data(r).enter();
      c.append("g").attr("x", (l) => l.x).attr("y", (l) => l.y).attr("width", (l) => l.width).attr("height", (l) => l.height).append("polygon").attr(
        "points",
        "7.7 4.82 5.78 4.82 5.78 2.89 4.82 2.89 4.82 4.82 2.89 4.82 2.89 5.78 4.82 5.78 4.82 7.7 5.78 7.7 5.78 5.78 7.7 5.78 7.7 4.82"
      ).attr("fill", () => e.color ? e.color : o), c.append("path").attr(
        "d",
        "M9.36,8.67A5.22,5.22,0,0,0,10.59,5.3,5.3,5.3,0,1,0,5.3,10.59,5.22,5.22,0,0,0,8.67,9.36L12.32,13l.68-.68Zm-4.06,1A4.34,4.34,0,1,1,9.63,5.3,4.33,4.33,0,0,1,5.3,9.63Z"
      ).attr("fill", () => e.color ? e.color : o);
    }
  }
  truncateLegendText() {
    const t = this.getComponentContainer(), e = L(this.getOptions(), "legend", "truncation"), n = L(e, "type"), s = L(e, "threshold"), a = L(e, "numCharacter"), r = t.selectAll("div.legend-item p");
    r.attr("id", function() {
      return (this.parentNode.querySelector("div.checkbox") || this.parentNode).getAttribute("aria-labelledby");
    }), n !== Ke.NONE ? r.html(function(o) {
      const c = he(o.name);
      return c.length > s && c.length !== a ? wn(c, n, a) : c;
    }) : r.html((o) => he(o.name));
  }
  addEventListeners() {
    const t = this, e = this.getComponentContainer(), n = this.getOptions(), s = L(n, "legend"), a = L(s, "truncation");
    e.selectAll("div.legend-item").on("mouseover", function(r) {
      t.services.events.dispatchEvent(T.Legend.ITEM_HOVER, {
        hoveredElement: D(this)
      });
      const o = D(this);
      o.select("div.checkbox").classed("hovered", !0);
      const c = o.datum();
      c.name.length > a.threshold && a.numCharacter < c.name.length && a.type !== Ke.NONE && t.services.events.dispatchEvent(T.Tooltip.SHOW, {
        event: r,
        hoveredElement: o,
        content: c.name
      });
    }).on("mousemove", function(r) {
      D(this).datum().name.length > a.threshold && a.type !== Ke.NONE && t.services.events.dispatchEvent(T.Tooltip.MOVE, {
        event: r
      });
    }).on("click", function() {
      t.services.events.dispatchEvent(T.Legend.ITEM_CLICK, {
        clickedElement: D(this)
      });
      const o = D(this).datum();
      t.model.toggleDataLabel(o.name);
    }).on("mouseout", function() {
      const r = D(this);
      r.select("div.checkbox").classed("hovered", !1), r.datum().name.length > a.threshold && a.type !== Ke.NONE && t.services.events.dispatchEvent(T.Tooltip.HIDE), t.services.events.dispatchEvent(T.Legend.ITEM_MOUSEOUT, {
        hoveredElement: r
      });
    }), e.selectAll("div.legend-item div.checkbox").on("keyup", function(r) {
      r.key && r.key === "Tab" && t.services.events.dispatchEvent(T.Legend.ITEM_HOVER, {
        hoveredElement: D(this)
      });
    }), e.selectAll("div.legend-item div.checkbox").on("keydown", function(r, o) {
      r.key && r.key === " " ? (r.preventDefault(), t.model.toggleDataLabel(o.name)) : r.key && r.key === "Tab" && t.services.events.dispatchEvent(T.Legend.ITEM_MOUSEOUT, {
        hoveredElement: D(this)
      });
    }), e.selectAll("g.additional-item").on("mouseover", function(r) {
      const o = D(this), c = o.datum();
      c.name.length > a.threshold && t.services.events.dispatchEvent(T.Tooltip.SHOW, {
        event: r,
        hoveredElement: o,
        content: c.name
      });
    });
  }
}
class Dd extends dt {
  constructor(t, e, n) {
    super(t, e, n), this.type = "chart-clip", this.renderType = at.SVG, this.chartClipId = "chart-clip-id-" + Math.floor(Math.random() * 99999999999), this.init();
  }
  init() {
    this.model.set({ chartClipId: this.chartClipId }, { skipUpdate: !0 });
  }
  // eslint-disable-next-line @typescript-eslint/ban-ts-comment
  // @ts-ignore
  // eslint-disable-next-line @typescript-eslint/no-unused-vars
  render(t = !0) {
    this.createClipPath();
  }
  createClipPath() {
    const t = this.parent, { cartesianScales: e } = this.services;
    if (!e) throw new Error("Service cartesianScales was undefined");
    const n = e.getMainXScale(), s = e.getMainYScale(), [a, r] = n.range(), [o, c] = s.range();
    if (!t)
      throw new Error("svg is undefined");
    this.chartClipPath = I.appendOrSelect(
      t,
      `clipPath.${this.type}`
    ).attr("id", this.chartClipId);
    const l = I.appendOrSelect(this.chartClipPath, `rect.${this.type}`);
    r - a > 0 && l.attr("x", a).attr("y", c).attr("width", r - a).attr("height", o - c), this.chartClipPath.merge(l).lower();
  }
}
class lm extends Dd {
  constructor() {
    super(...arguments), this.type = "canvas-chart-clip", this.chartClipId = "canvas-chart-clip-id-" + Math.floor(Math.random() * 99999999999);
  }
  createClipPath() {
    const t = this.parent, { width: e, height: n } = I.getSVGElementSize(this.parent, {
      useAttrs: !0
    });
    this.chartClipPath = I.appendOrSelect(t, `clipPath.${this.type}`).attr(
      "id",
      this.chartClipId
    );
    const s = I.appendOrSelect(this.chartClipPath, `rect.${this.type}`);
    s.attr("x", 0).attr("y", 0).attr("width", e).attr("height", n), this.chartClipPath.merge(s).lower();
  }
}
var Xe, Lt;
(function(i) {
  i.LEFT = "left", i.RIGHT = "right", i.TOP = "top", i.BOTTOM = "bottom";
})(Lt || (Lt = {}));
var br = (Xe = {}, Xe[Lt.LEFT] = function(i, t, e) {
  return {
    top: i.top - Math.round(t.offsetHeight / 2) + Math.round(e.height / 2),
    left: Math.round(i.left - t.offsetWidth)
  };
}, Xe[Lt.RIGHT] = function(i, t, e) {
  return {
    top: i.top - Math.round(t.offsetHeight / 2) + Math.round(e.height / 2),
    left: Math.round(i.left + e.width)
  };
}, Xe[Lt.TOP] = function(i, t, e) {
  return {
    top: Math.round(i.top - t.offsetHeight),
    left: i.left - Math.round(t.offsetWidth / 2) + Math.round(e.width / 2)
  };
}, Xe[Lt.BOTTOM] = function(i, t, e) {
  return {
    top: Math.round(i.top + e.height),
    left: i.left - Math.round(t.offsetWidth / 2) + Math.round(e.width / 2)
  };
}, Xe), Or = typeof window < "u" ? window : {
  innerHeight: 0,
  innerWidth: 0
}, Cs = (
  /** @class */
  function() {
    function i(t) {
      t === void 0 && (t = {}), this.positions = br, this.positions = Object.assign({}, br, t);
    }
    return i.prototype.getRelativeOffset = function(t) {
      for (var e = {
        left: t.offsetLeft,
        top: t.offsetTop
      }; t.offsetParent && getComputedStyle(t.offsetParent).position === "static"; )
        e.left += t.offsetLeft, e.top += t.offsetTop, t = t.offsetParent;
      return e;
    }, i.prototype.getAbsoluteOffset = function(t) {
      for (var e = t, n = {
        top: 0,
        left: 0
      }; e.offsetParent; ) {
        var s = getComputedStyle(e.offsetParent);
        s.position === "static" && s.marginLeft && s.marginTop && (parseInt(s.marginTop, 10) && (n.top += parseInt(s.marginTop, 10)), parseInt(s.marginLeft, 10) && (n.left += parseInt(s.marginLeft, 10))), e = e.offsetParent;
      }
      var a = t.getBoundingClientRect(), r = document.body.getBoundingClientRect();
      return {
        top: a.top - r.top + n.top,
        left: a.left - r.left + n.left
      };
    }, i.prototype.findRelative = function(t, e, n) {
      var s = this.getRelativeOffset(t), a = t.getBoundingClientRect();
      return this.calculatePosition(s, a, e, n);
    }, i.prototype.findAbsolute = function(t, e, n) {
      var s = this.getAbsoluteOffset(t), a = t.getBoundingClientRect();
      return this.calculatePosition(s, a, e, n);
    }, i.prototype.findPosition = function(t, e, n, s) {
      s === void 0 && (s = this.getAbsoluteOffset.bind(this));
      var a = s(t), r = t.getBoundingClientRect();
      return this.calculatePosition(a, r, e, n);
    }, i.prototype.findPositionAt = function(t, e, n) {
      return this.calculatePosition(t, { top: 0, left: 0, height: 0, width: 0 }, e, n);
    }, i.prototype.getPlacementBox = function(t, e) {
      var n = t.offsetHeight + e.top, s = t.offsetWidth + e.left;
      return {
        top: e.top,
        bottom: n,
        left: e.left,
        right: s
      };
    }, i.prototype.addOffset = function(t, e, n) {
      return e === void 0 && (e = 0), n === void 0 && (n = 0), Object.assign({}, t, {
        top: t.top + e,
        left: t.left + n
      });
    }, i.prototype.setElement = function(t, e) {
      t.style.top = e.top + "px", t.style.left = e.left + "px";
    }, i.prototype.findBestPlacement = function(t, e, n, s, a) {
      var r = this;
      s === void 0 && (s = this.defaultContainerFunction.bind(this)), a === void 0 && (a = this.findPosition.bind(this));
      var o = n.map(function(c) {
        var l = a(t, e, c), h = r.getPlacementBox(e, l), d = 0, u = 0, p = s();
        h.top < p.top ? d = p.top - h.top : h.bottom > p.height && (d = h.bottom - p.height), h.left < p.left ? u = p.left - h.left : h.right > p.width && (u = h.right - p.width), d && !u ? u = 1 : u && !d && (d = 1);
        var f = e.offsetHeight * e.offsetWidth, g = d * u, m = f - g, y = m / f;
        return {
          placement: c,
          weight: y
        };
      });
      return o.sort(function(c, l) {
        return l.weight - c.weight;
      }), o[0].placement;
    }, i.prototype.findBestPlacementAt = function(t, e, n, s) {
      var a = this;
      s === void 0 && (s = this.defaultContainerFunction.bind(this));
      var r = function(o, c, l) {
        return a.findPositionAt(t, c, l);
      };
      return this.findBestPlacement(null, e, n, s, r);
    }, i.prototype.defaultContainerFunction = function() {
      return {
        // we go with window here, because that's going to be the simple/common case
        top: 0,
        left: 0,
        height: Or.innerHeight,
        width: Or.innerWidth
      };
    }, i.prototype.calculatePosition = function(t, e, n, s) {
      return this.positions[s] ? this.positions[s](t, n, e) : (console.error("No function found for placement, defaulting to 0,0"), { left: 0, top: 0 });
    }, i;
  }()
);
new Cs();
class Nd extends dt {
  constructor(t, e, n) {
    super(t, e, n), this.type = "tooltip", this.renderType = at.HTML, this.isEventListenerAdded = !1, this.lastTriggeredEventType = "", this.positionService = new Cs(), this.handleShowTooltip = (s) => {
      const a = s.detail.data || s.detail.items, r = D(s.detail.event.target).datum();
      let o;
      const c = this.formatItems(this.getItems(s));
      s.detail.content ? o = `<div class="title-tooltip"><p>${ts(s.detail.content)}</p></div>` : o = ts(this.getTooltipHTML(c));
      const l = I.appendOrSelect(this.tooltip, "div.content-box");
      if (L(this.getOptions(), "tooltip", "customHTML"))
        if (s.detail.content) {
          const h = `<div class="title-tooltip"><p>${ts(
            s.detail.content
          )}</p></div>`;
          l.html(h);
        } else
          l.html(
            `<div class="title-tooltip"><p>${ts(
              this.model.getOptions().tooltip.customHTML(a, o, r)
            )}</p></div>`
          );
      else
        l.html(o);
      l.selectAll(".datapoint-tooltip").each(function(h, d) {
        const u = c[d];
        c[d] && c[d].color && D(this).select(".tooltip-color").attr("class", "tooltip-color").style("background-color", u.color);
      }), this.positionTooltip(s), this.tooltip.classed("hidden", !1).attr("aria-hidden", !1), this.lastTriggeredEventType = s.type;
    }, this.handleHideTooltip = () => {
      this.tooltip.classed("hidden", !0).attr("aria-hidden", !0);
    }, this.init();
  }
  addTooltipEventListener() {
    this.services.events.addEventListener(T.Tooltip.MOVE, (t) => {
      this.lastTriggeredEventType !== T.Toolbar.SHOW_TOOLTIP && this.tooltip.classed("hidden") === !1 && this.positionTooltip(t);
    }), this.services.events.addEventListener(T.Tooltip.SHOW, this.handleShowTooltip), this.services.events.addEventListener(T.Tooltip.HIDE, this.handleHideTooltip), this.services.events.addEventListener(T.Chart.MOUSEOUT, this.handleHideTooltip), this.services.events.addEventListener(T.Toolbar.SHOW_TOOLTIP, this.handleShowTooltip), this.services.events.addEventListener(T.Toolbar.HIDE_TOOLTIP, this.handleHideTooltip);
  }
  removeTooltipEventListener() {
    this.services.events.removeEventListener(T.Tooltip.MOVE, null), this.services.events.removeEventListener(T.Tooltip.SHOW, this.handleShowTooltip), this.services.events.removeEventListener(T.Tooltip.HIDE, this.handleHideTooltip), this.services.events.removeEventListener(T.Chart.MOUSEOUT, this.handleHideTooltip), this.services.events.removeEventListener(T.Toolbar.SHOW_TOOLTIP, this.handleShowTooltip), this.services.events.removeEventListener(T.Toolbar.HIDE_TOOLTIP, this.handleHideTooltip);
  }
  getItems(t) {
    return t.detail.items ? t.detail.items : [];
  }
  formatItems(t) {
    const e = this.getOptions(), n = L(e, "tooltip", "truncation", "type"), s = L(e, "tooltip", "truncation", "threshold"), a = L(e, "tooltip", "truncation", "numCharacter");
    return n !== Ke.NONE ? t.map((r) => {
      const o = r.labelIcon ? 12 : 0;
      return r.value = r.value ? this.valueFormatter(r.value, r.label) : r.value, r.label && r.label.length + o > s && (r.label = wn(r.label, n, a)), r.value && r.value.length > s && (r.value = wn(r.value, n, a)), r;
    }) : t.map((r) => (r.value = r.value ? this.valueFormatter(r.value, r.label) : r.value, r));
  }
  getTooltipHTML(t) {
    return '<ul class="multi-tooltip">' + t.map(
      (e) => `<li>
					<div class="datapoint-tooltip${e.bold ? " bold" : ""}">
						${e.class || e.color ? `<div class="tooltip-color ${e.class}"></div>` : ""}
						<div class="label">
						<p>${e.label || ""}</p>
						${e.labelIcon ? `<span class="label-icon"/>${e.labelIcon}</span>` : ""}
						</div>
						${e.value === void 0 || e.value === null ? "" : `<p class="value"/>${e.value}</p>`}
					</div>
				</li>`
    ).join("") + "</ul>";
  }
  isDate(t) {
    return t instanceof Date;
  }
  valueFormatter(t, e) {
    const n = this.getOptions(), s = L(n, "tooltip", "valueFormatter"), {
      code: a,
      number: r,
      date: o
    } = L(n, "locale");
    if (s)
      return s(t, e);
    if (this.isDate(t))
      return o(t, a, { month: "short", day: "numeric", year: "numeric" });
    try {
      if (typeof t == "string" && /\d{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2}.\d{3}Z/.test(t)) {
        const c = new Date(t);
        return o(c, a, {
          month: "short",
          day: "numeric",
          year: "numeric"
        });
      }
    } catch {
    }
    return r(t, a);
  }
  // eslint-disable-next-line @typescript-eslint/ban-ts-comment
  // @ts-ignore
  // eslint-disable-next-line @typescript-eslint/no-unused-vars
  render(t = !1) {
    const e = this.getOptions(), n = L(e, "tooltip", "enabled");
    if (n) {
      const s = D(this.services.domUtils.getHolder()), a = L(e, "style", "prefix");
      this.tooltip = I.appendOrSelect(s, `div.${Kt}--${a}--tooltip`), this.tooltip.style("max-width", null).attr("role", "tooltip"), this.isEventListenerAdded || (this.addTooltipEventListener(), this.isEventListenerAdded = !0), this.tooltip.classed("hidden", !0);
    } else !n && this.isEventListenerAdded && (this.removeTooltipEventListener(), this.isEventListenerAdded = !1);
  }
  addOffsetByPlacement(t, e, n) {
    const s = Object.assign({}, t);
    return e == Lt.LEFT ? s.left -= n : e == Lt.RIGHT ? s.left += n : e == Lt.TOP ? s.top -= n : e == Lt.BOTTOM && (s.top += n), s;
  }
  positionTooltip(t) {
    const e = this.services.domUtils.getHolder(), n = e.offsetWidth, s = e.offsetHeight, a = this.tooltip.node(), r = this.getOptions(), o = L(r, "zoomBar", "top", "enabled"), c = !!L(t, "detail", "noWrap"), l = Array.isArray(L(t, "detail", "placements")), h = l ? L(t, "detail", "placements") : [Lt.RIGHT, Lt.LEFT, Lt.TOP, Lt.BOTTOM];
    let d, { horizontalOffset: u } = Ea;
    const { defaultOffset: p } = Ea;
    if (this.tooltip.select("div.title-tooltip").classed("title-tooltip-nowrap", c), l) {
      const m = L(t, "detail", "event", "target"), y = this.services.domUtils.getElementOffset(m, !0);
      d = this.positionService.findBestPlacementAt(
        y,
        a,
        h,
        () => ({
          top: 0,
          left: 0,
          width: n,
          height: s
        })
      );
      let S = this.positionService.findPosition(
        m,
        a,
        d,
        () => this.services.domUtils.getElementOffset(m)
      );
      S = this.addOffsetByPlacement(S, d, p), this.positionService.setElement(a, S);
      return;
    }
    let f = L(t, "detail", "mousePosition");
    if (!f)
      f = nn(L(t, "detail", "event"), e);
    else {
      const m = L(r, "zoomBar", "top", "type"), y = jt.height[m];
      o && (f[1] += y + jt.spacerHeight);
    }
    f[0] / n > 0.9 ? d = Lt.LEFT : f[0] / n < 0.1 ? d = Lt.RIGHT : d = this.positionService.findBestPlacementAt(
      {
        left: f[0],
        top: f[1]
      },
      a,
      h,
      () => ({
        top: void 0,
        // properties were never set to optional (probably should)
        left: void 0,
        // ditto
        width: n,
        height: s
      })
    ), d === Lt.LEFT && (u *= -1);
    const g = this.positionService.findPositionAt(
      {
        left: f[0] + u,
        top: f[1]
      },
      a,
      d
    );
    this.positionService.setElement(a, g);
  }
}
const tn = class tn extends dt {
  constructor() {
    super(...arguments), this.type = "grid-brush", this.renderType = at.SVG, this.selectionSelector = "rect.selection", this.frontSelectionSelector = "rect.frontSelection";
  }
  // needs to match the class name in _grid-brush.scss
  // eslint-disable-next-line @typescript-eslint/ban-ts-comment
  // @ts-ignore
  // eslint-disable-next-line @typescript-eslint/no-unused-vars
  render(t = !0) {
    const e = this.parent, n = this.getComponentContainer({
      isPresentational: !0
    });
    if (!e) throw new Error("SVG was not defined");
    const s = I.appendOrSelect(
      e,
      "svg.chart-grid-backdrop"
    ), a = I.appendOrSelect(s, `g.${this.type}`), r = I.appendOrSelect(a, this.selectionSelector), { width: o, height: c } = I.getSVGElementSize(s, {
      useAttrs: !0
    }), { cartesianScales: l } = this.services, h = l.getMainXScaleType(), d = l.getMainXScale(), [u] = d.range();
    n.attr("transform", `translate(${u},0)`);
    const p = I.appendOrSelect(n, this.frontSelectionSelector);
    if (d && h === kt.TIME) {
      let f = this.model.get("zoomDomain");
      f === void 0 && (f = this.services.zoom.getDefaultZoomBarDomain(), f && this.model.set({ zoomDomain: f }, { animate: !1 }));
      const g = (x) => {
        const b = x[1] - x[0];
        let _ = "0," + b.toString();
        const k = Math.floor(c / tn.DASH_LENGTH), G = k * tn.DASH_LENGTH;
        for (let R = 0; R < k; R++)
          _ += "," + tn.DASH_LENGTH;
        _ += "," + (c - G), k % 2 === 1 && (_ += ",0"), _ += "," + b.toString(), _ += "," + c.toString(), p.attr("stroke-dasharray", _);
      }, m = (x) => {
        const b = x.selection;
        b === null || b[0] === b[1] || (p.attr("x", parseFloat(r.attr("x")) + parseFloat(s.attr("x"))).attr("y", r.attr("y")).attr("width", r.attr("width")).attr("height", r.attr("height")).style("cursor", "pointer").style("display", null), g(b));
      }, y = (x, b) => {
        const _ = Ol().range([0, o]).domain(f);
        let k = [_.invert(x), _.invert(b)];
        k[0].valueOf() === k[1].valueOf() && (k = this.services.zoom.getDefaultZoomBarDomain()), (f[0].valueOf() !== k[0].valueOf() || f[1].valueOf() !== k[1].valueOf()) && this.services.zoom.handleDomainChange(k);
      };
      let S;
      const v = (x) => {
        const b = x.selection;
        b !== null && (y(b[0], b[1]), a.call(S.move, null), p.style("display", "none"));
      };
      c != 0 && o != 0 && (S = ho().extent([
        [0, 0],
        [o - 1, c]
      ]).on("start brush end", m).on("end.brushed", v), a.call(S));
      const E = this.services.zoom.getZoomRatio();
      s.on("click", function(x) {
        if (x.shiftKey) {
          const b = this.services.domUtils.getHolder(), _ = nn(a.node(), b)[0];
          let k = _ - o * E / 2;
          k < 0 && (k = 0);
          let G = _ + o * E / 2;
          G > o && (G = o), y(k, G);
        }
      });
    }
  }
};
tn.DASH_LENGTH = 4;
let Lr = tn;
class cm extends dt {
  constructor() {
    super(...arguments), this.type = "zoom-bar", this.renderType = at.SVG, this.MIN_SELECTION_DIFF = 9e-10, this.brushSelector = "g.zoom-bar-brush", this.clipId = "zoomBarClip-" + Math.floor(Math.random() * 99999999999), this.brush = ho(), this.highlightStrokeWidth = 1;
  }
  init() {
    this.services.events.addEventListener(T.ZoomBar.UPDATE, this.render.bind(this));
    const t = L(this.getOptions(), "zoomBar", J.TOP, "data");
    this.model.setZoomBarData(t);
  }
  // eslint-disable-next-line @typescript-eslint/ban-ts-comment
  // @ts-ignore
  // eslint-disable-next-line @typescript-eslint/no-unused-vars
  render(t = !0) {
    const e = this.getComponentContainer({
      ariaLabel: "zoom bar"
    }), n = this.services.zoom.isZoomBarLoading(J.TOP), s = this.services.zoom.isZoomBarLocked(J.TOP), a = L(this.getOptions(), "zoomBar", J.TOP, "type"), r = L(this.getOptions(), "axes", J.BOTTOM, "highlights"), o = jt.height[a], { width: c } = I.getSVGElementSize(this.parent, {
      useAttrs: !0
    });
    if (c === 0)
      return;
    let l = 0;
    const h = this.model.get("axesMargins");
    h && h.left && (l = h.left);
    const d = I.appendOrSelect(e, "svg.zoom-container").attr("width", "100%").attr("height", o).attr("opacity", 1);
    if (I.appendOrSelect(e, "rect.zoom-spacer").attr("x", 0).attr("y", o).attr("width", "100%").attr("height", jt.spacerHeight).attr("opacity", 1).attr("fill", "none"), a === ze.GRAPH_VIEW ? I.appendOrSelect(d, "rect.zoom-bg").attr("x", l).attr("y", 0).attr("width", c - l).attr("height", "100%").classed("zoom-bg-skeleton", n).style(
      "stroke",
      n ? `url(#${this.services.domUtils.generateElementIDString("shimmer-lines")})` : null
    ) : a === ze.SLIDER_VIEW && I.appendOrSelect(d, "rect.zoom-slider-bg").attr("x", l).attr("y", o / 2 - 1).attr("width", c - l).attr("height", 2).classed("zoom-slider-bg-skeleton", n).style(
      "stroke",
      n ? `url(#${this.services.domUtils.generateElementIDString("shimmer-lines")})` : null
    ), n) {
      this.renderSkeleton(d, l, c);
      return;
    }
    const { cartesianScales: u } = this.services, p = u.getMainXScale(), f = u.getMainYScale(), g = u.getMainXScaleType();
    if (p && g === kt.TIME) {
      let m = this.services.zoom.getZoomBarData();
      if (Fr(m) || m.length === 1)
        return;
      this.xScale = p.copy(), this.yScale = f.copy();
      const y = this.services.zoom.getDefaultZoomBarDomain(m);
      m = this.compensateDataForDefaultDomain(m, y);
      const S = this.model.get("initialZoomDomain"), v = L(
        this.getOptions(),
        "zoomBar",
        J.TOP,
        "initialZoomDomain"
      );
      v && v[0] && v[1] && (v[0] = new Date(v[0]), v[1] = new Date(v[1])), v && !(S && S[0].valueOf() === v[0].valueOf() && S[1].valueOf() === v[1].valueOf()) ? this.model.set(
        {
          // use a new object instead of newInitialZoomDomain
          initialZoomDomain: en([], v),
          zoomDomain: v ? en([], v) : y
        },
        { skipUpdate: !0 }
      ) : v === null && S !== null && this.model.set(
        {
          initialZoomDomain: null,
          zoomDomain: en([], y)
        },
        { skipUpdate: !0 }
      ), this.xScale.range([l, c]).domain(y), this.maxSelectionRange = this.xScale.range(), this.yScale.range([0, o - 6]).domain(Os(m, (b) => b.value));
      const E = this.model.get("zoomDomain");
      if (a === ze.GRAPH_VIEW && (this.renderZoomBarArea(d, "path.zoom-graph-area-unselected", m, null), this.updateClipPath(e, this.clipId, 0, 0, 0, 0), this.renderZoomBarArea(d, "path.zoom-graph-area", m, this.clipId), this.renderZoomBarBaseline(d, l, c), r)) {
        const b = r.highlightStartMapsTo, _ = r.highlightEndMapsTo, k = r.color, G = r.labelMapsTo;
        r.data.forEach((R, A) => {
          I.appendOrSelect(d, `rect.highlight-${A}`).attr("height", o - 2 * this.highlightStrokeWidth).attr("y", this.highlightStrokeWidth).attr("x", this.xScale(R[b])).attr(
            "width",
            this.xScale(R[_]) - this.xScale(R[b])
          ).style(
            "fill",
            k && k.scale[R[G]] ? k.scale[R[G]] : null
          ).style("fill-opacity", 0.1).style(
            "stroke",
            k && k.scale[R[G]] ? k.scale[R[G]] : null
          ).style("stroke-dasharray", "2, 2").attr("stroke-width", "1px");
        });
      }
      this.addBrushEventListener(E, l, c);
      const x = I.appendOrSelect(e, this.brushSelector).call(this.brush);
      if (E !== void 0) if (E[0].valueOf() === E[1].valueOf())
        x.call(this.brush.move, this.xScale.range()), this.updateBrushHandle(this.getComponentContainer(), this.xScale.range());
      else {
        const b = E.map((_) => this.xScale(_));
        b[1] - b[0] < this.MIN_SELECTION_DIFF || (x.call(this.brush.move, b), this.updateBrushHandle(this.getComponentContainer(), b));
      }
      s && (this.brush.filter(() => !1), x.selectAll("rect").attr("cursor", "auto"));
    }
  }
  addBrushEventListener(t, e, n) {
    const s = (o) => {
      const c = o.selection;
      c === null ? this.handleBrushedEvent(o, t, this.xScale, this.xScale.range()) : c[0] === c[1] || this.handleBrushedEvent(o, t, this.xScale, c);
    }, a = L(this.getOptions(), "zoomBar", J.TOP, "type"), r = jt.height[a];
    this.brush.extent([
      [e, 0],
      [n, r]
    ]).on("start brush end", null).on("start brush end", s);
  }
  // brush event listener
  handleBrushedEvent(t, e, n, s) {
    const a = [n.invert(s[0]), n.invert(s[1])];
    if (this.updateBrushHandle(this.getComponentContainer(), s), t.sourceEvent != null && (t.sourceEvent.type === "mousemove" || t.sourceEvent.type === "mouseup" || t.sourceEvent.type === "mousedown" || t.sourceEvent.type === "touchstart" || t.sourceEvent.type === "touchmove" || t.sourceEvent.type === "touchend")) {
      (e === void 0 || e[0] !== a[0] || e[1] !== a[1]) && this.services.zoom.handleDomainChange(a, {
        dispatchEvent: !1
      });
      let r;
      t.type === "start" ? r = T.ZoomBar.SELECTION_START : t.type === "brush" ? r = T.ZoomBar.SELECTION_IN_PROGRESS : t.type === "end" && (r = T.ZoomBar.SELECTION_END, this.services.events.dispatchEvent(T.ZoomDomain.CHANGE, {
        newDomain: a
      })), this.services.events.dispatchEvent(r, {
        selection: s,
        newDomain: a
      });
    }
  }
  updateBrushHandle(t, e) {
    const n = this, s = jt.handleWidth, a = L(this.getOptions(), "zoomBar", J.TOP, "type"), r = jt.height[a], o = -s / 2, c = jt.handleBarWidth, l = a === ze.GRAPH_VIEW ? jt.handleBarHeight : 6, h = -c / 2, d = (r - l) / 2;
    t.select(this.brushSelector).selectAll("rect.handle").data([{ type: "w" }, { type: "e" }]).attr("x", function(p) {
      if (p.type === "w")
        return Math.max(e[0] + o, n.maxSelectionRange[0]);
      if (p.type === "e")
        return Math.min(e[1] + o, n.maxSelectionRange[1] - s);
    }).attr("y", 0).attr("width", s).attr("height", r).attr("cursor", "ew-resize").style("display", null);
    const u = t.select(this.brushSelector).selectAll("rect.handle-bar").data([{ type: "w" }, { type: "e" }]);
    u.enter().append("rect").attr("class", function(p) {
      return "handle-bar handle-bar--" + p.type;
    }), u.attr("x", function(p) {
      if (p.type === "w")
        return Math.max(
          e[0] + h,
          n.maxSelectionRange[0] - o + h
        );
      if (p.type === "e")
        return Math.min(
          e[1] + h,
          n.maxSelectionRange[1] + o + h
        );
    }).attr("y", d).attr("width", c).attr("height", l).attr("cursor", "ew-resize"), a === ze.SLIDER_VIEW && this.updateSliderSelectedArea(e), this.updateClipPath(
      t,
      this.clipId,
      e[0],
      0,
      e[1] - e[0],
      r
    );
  }
  updateSliderSelectedArea(t) {
    const e = L(this.getOptions(), "zoomBar", J.TOP, "type"), n = jt.height[e], a = this.getComponentContainer().select("svg.zoom-container");
    I.appendOrSelect(a, "rect.zoom-slider-selected-area").attr("x", t[0]).attr("y", n / 2 - 1).attr("width", t[1] - t[0]).attr("height", 2);
  }
  renderZoomBarArea(t, e, n, s) {
    const { cartesianScales: a } = this.services, r = a.getMainXAxisPosition(), o = a.getMainYAxisPosition(), c = a.getMainXScaleType(), l = a.getMainYScaleType(), h = (y, S, v) => (E) => a.getValueFromScale(y, S, v, E), d = h(this.xScale, c, r), u = h(this.yScale, l, o), p = L(this.getOptions(), "zoomBar", J.TOP, "type"), f = jt.height[p], g = ji().x((y) => d(y)).y0(f).y1((y) => f - u(y)), m = I.appendOrSelect(t, e).datum(n).attr("d", g);
    s && m.attr("clip-path", `url(#${s})`);
  }
  updateClipPath(t, e, n, s, a, r) {
    const o = I.appendOrSelect(t, "clipPath").attr("id", e);
    I.appendOrSelect(o, "rect").attr("x", n).attr("y", s).attr("width", a).attr("height", r);
  }
  // assume the domains in data are already sorted
  compensateDataForDefaultDomain(t, e) {
    if (!t || t.length < 2)
      return;
    const n = hl(t), s = this.services.cartesianScales.getDomainIdentifier(), a = this.services.cartesianScales.getRangeIdentifier();
    if (Number(e[0]) < Number(n[0][s])) {
      const r = {};
      r[s] = e[0], r[a] = 0, n.unshift(r);
    }
    if (Number(e[1]) > Number(n[n.length - 1][s])) {
      const r = {};
      r[s] = e[1], r[a] = 0, n.push(r);
    }
    return n;
  }
  renderZoomBarBaseline(t, e, n, s = !1) {
    const a = L(
      this.model.getOptions(),
      "zoomBar",
      J.TOP,
      "type"
    ), r = jt.height[a], o = Dn()([
      [e, r],
      [n, r]
    ]);
    I.appendOrSelect(t, "path.zoom-bg-baseline").attr("d", o).classed("zoom-bg-baseline-skeleton", s).style(
      "stroke",
      s ? `url(#${this.services.domUtils.generateElementIDString("shimmer-lines")})` : null
    );
  }
  renderSkeleton(t, e, n) {
    this.renderZoomBarArea(t, "path.zoom-graph-area-unselected", [], null), this.renderZoomBarArea(t, "path.zoom-graph-area", [], this.clipId), this.brush.on("start brush end", null), I.appendOrSelect(this.getComponentContainer(), this.brushSelector).html(null), L(this.getOptions(), "zoomBar", J.TOP, "type") === ze.GRAPH_VIEW && this.renderZoomBarBaseline(t, e, n, !0);
  }
  destroy() {
    this.brush.on("start brush end", null), this.services.events.removeEventListener(T.ZoomBar.UPDATE, this.render.bind(this));
  }
}
class um extends dt {
  constructor(t, e) {
    super(t, e), this.type = "threshold", this.renderType = at.SVG, this.positionService = new Cs();
  }
  render(t = !1) {
    const e = L(this.getOptions(), "axes"), n = [];
    Object.keys(e).forEach((u) => {
      if (Object.values(J).includes(u)) {
        const p = e[u];
        p.thresholds && p.thresholds.length > 0 && n.push({
          axisPosition: u,
          thresholds: p.thresholds,
          correspondingDatasets: p == null ? void 0 : p.correspondingDatasets,
          mapsTo: p == null ? void 0 : p.mapsTo
        });
      }
    });
    const a = this.getComponentContainer({
      ariaLabel: "threshold lines",
      withinChartClip: !0
    }).selectAll("g.axis-thresholds").data(n, (u) => u.axisPosition);
    a.exit().attr("opacity", 0).remove();
    const o = a.enter().append("g").merge(a);
    o.attr("class", (u) => `axis-thresholds ${u.axisPosition}`);
    const c = o.selectAll("g.threshold-group").data(
      (u) => u.thresholds.map((p) => (p.axisPosition = u.axisPosition, p.datum = this.constructDatumObj(u, p), p))
    );
    c.exit().attr("opacity", 0).remove();
    const l = c.enter().append("g");
    l.append("line").attr("class", "threshold-line"), l.append("rect").attr("class", "threshold-hoverable-area"), l.merge(c).attr("class", "threshold-group");
    const d = this;
    o.each(function({ axisPosition: u }) {
      const p = d.services.cartesianScales.getScaleByPosition(
        u
      ), f = d.services.cartesianScales.getScaleTypeByPosition(u);
      let g = null, m = null;
      u === J.LEFT || u === J.RIGHT ? (m = p, g = d.services.cartesianScales.getMainXScale()) : (g = p, m = d.services.cartesianScales.getMainYScale());
      const y = f === kt.LABELS, [S, v] = g.range(), [E, x] = m.range(), { cartesianScales: b } = d.services, _ = b.getOrientation(), k = (N) => b.getDomainValue(N), G = (N) => b.getRangeValue(N), [R, A] = Ee(
        k,
        G,
        _
      ), H = D(this);
      u === J.TOP || u === J.BOTTOM ? (H.selectAll("line.threshold-line").transition().call(
        (N) => d.services.transitions.setupTransition({
          transition: N,
          name: "threshold-line-update",
          animate: t
        })
      ).attr("y1", x).attr("y2", E).attr(
        "x1",
        ({ datum: N }) => R(N) + (y ? p.step() / 2 : 0)
      ).attr(
        "x2",
        ({ datum: N }) => R(N) + (y ? p.step() / 2 : 0)
      ).style("stroke", ({ fillColor: N }) => N), H.selectAll("rect.threshold-hoverable-area").attr("x", 0).attr("y", ({ datum: N }) => -R(N)).attr("width", Math.abs(E - x)).classed("rotate", !0)) : (H.selectAll("line.threshold-line").transition().call(
        (N) => d.services.transitions.setupTransition({
          transition: N,
          name: "threshold-line-update",
          animate: t
        })
      ).attr("x1", S).attr("x2", v).attr(
        "y1",
        ({ datum: N }) => A(N) + (y ? p.step() / 2 : 0)
      ).attr(
        "y2",
        ({ datum: N }) => A(N) + (y ? p.step() / 2 : 0)
      ).style("stroke", ({ fillColor: N }) => N), H.selectAll("rect.threshold-hoverable-area").attr("x", S).attr("y", ({ datum: N }) => A(N)).attr("width", Math.abs(v - S)).classed("rotate", !1));
    }), this.services.events.addEventListener(T.Threshold.SHOW, (u) => {
      this.setThresholdLabelPosition(u.detail), this.label.classed("hidden", !1);
    }), this.services.events.addEventListener(T.Threshold.HIDE, () => {
      this.label.classed("hidden", !0);
    }), this.appendThresholdLabel(), this.addEventListeners();
  }
  getFormattedValue(t) {
    const { value: e, axisPosition: n } = t, s = this.getOptions(), a = this.services.cartesianScales.getScaleTypeByPosition(n), { code: r, number: o } = L(s, "locale");
    if (a === kt.TIME) {
      const c = [J.LEFT, J.RIGHT].includes(n), l = this.services.cartesianScales.getMainXScale(), h = this.services.cartesianScales.getMainYScale(), d = c ? h : l, u = L(s, "timeScale"), p = ui(
        d.ticks(),
        L(u, "timeInterval")
      );
      return hi(e, 0, d.ticks(), p, u, s.locale);
    }
    return o(e, r);
  }
  appendThresholdLabel() {
    const t = D(this.services.domUtils.getHolder()), e = L(this.getOptions(), "style", "prefix");
    this.label = I.appendOrSelect(
      t,
      `div.${Kt}--${e}--threshold--label`
    ).classed("hidden", !0);
  }
  setThresholdLabelPosition({ event: t, datum: e }) {
    const n = this.services.domUtils.getHolder(), s = nn(t, n), a = e.valueFormatter ? e.valueFormatter(e.value) : this.getFormattedValue(e);
    this.label.html(he(`${e.label || "Threshold"}: ${a}`)).style("background-color", e.fillColor);
    const r = this.label.node(), o = this.positionService.findBestPlacementAt(
      {
        left: s[0],
        top: s[1]
      },
      r,
      [Lt.RIGHT, Lt.LEFT, Lt.TOP, Lt.BOTTOM],
      () => ({
        top: void 0,
        // other package lists this as non-optional
        left: void 0,
        // ditto
        width: n.offsetWidth,
        height: n.offsetHeight
      })
    ), c = this.positionService.findPositionAt(
      {
        left: s[0],
        top: s[1]
      },
      r,
      o
    );
    this.positionService.setElement(r, c);
  }
  // Constructs object to pass in scale functions
  constructDatumObj(t, e) {
    const n = {};
    return t.correspondingDatasets && (n.group = L(t, "correspondingDatasets", 0)), n[t.mapsTo] = e.value, n;
  }
  addEventListeners() {
    const t = this;
    this.getComponentContainer({ withinChartClip: !0 }).selectAll("rect.threshold-hoverable-area").on("mouseover mousemove", function(n) {
      D(this.parentNode).select("line.threshold-line").classed("active", !0), t.services.events.dispatchEvent(T.Threshold.SHOW, {
        event: n,
        hoveredElement: D(this),
        datum: D(this).datum()
      });
    }).on("mouseout", function(n) {
      D(this.parentNode).select("line.threshold-line").classed("active", !1), t.services.events.dispatchEvent(T.Threshold.HIDE, {
        event: n,
        hoveredElement: D(this),
        datum: D(this).datum()
      });
    });
  }
}
class hm extends dt {
  constructor(t, e) {
    super(t, e), this.type = "highlight", this.renderType = at.SVG, this.positionService = new Cs(), this.highlightStrokeWidth = 1;
  }
  render(t = !1) {
    const e = L(this.getOptions(), "axes"), n = [];
    Object.keys(e).forEach((u) => {
      if (Object.values(J).includes(u)) {
        const p = e[u];
        p.highlights && p.highlights.data.length > 0 && n.push({
          axisPosition: u,
          highlightStartMapsTo: p.highlights.highlightStartMapsTo,
          highlightEndMapsTo: p.highlights.highlightEndMapsTo,
          labelMapsTo: p.highlights.labelMapsTo,
          highlight: p.highlights.data,
          color: p.highlights.color
        });
      }
    });
    const a = this.getComponentContainer({
      ariaLabel: "highlight areas",
      withinChartClip: !0
    }).selectAll("g.axis-highlight").data(n, (u) => u.axisPosition);
    a.exit().attr("opacity", 0).remove();
    const o = a.enter().append("g").merge(a);
    o.attr("class", (u) => `axis-highlight ${u.axisPosition}`);
    const c = o.selectAll("g.highlight-group").data(
      (u) => u.highlight.map((p) => (p.axisPosition = u.axisPosition, p.highlightStartMapsTo = u.highlightStartMapsTo, p.labelMapsTo = u.labelMapsTo, p.color = u.color, p.highlightEndMapsTo = u.highlightEndMapsTo, p))
    );
    c.exit().attr("opacity", 0).remove();
    const l = c.enter().append("g");
    l.append("rect").attr("class", "highlight-bar"), l.append("line").attr("class", "highlight-line"), l.merge(c).attr("class", "highlight-group");
    const d = this;
    o.each(function({ axisPosition: u }) {
      const p = d.services.cartesianScales.getMainXScale(), f = d.services.cartesianScales.getMainYScale(), [g, m] = p.range(), [y, S] = f.range(), { cartesianScales: v } = d.services, E = v.getOrientation(), x = (R) => v.getDomainValue(R), b = (R) => v.getRangeValue(R), [_, k] = Ee(
        x,
        b,
        E
      ), G = D(this);
      u === J.TOP || u === J.BOTTOM ? G.selectAll("rect.highlight-bar").transition().call(
        (R) => d.services.transitions.setupTransition({
          transition: R,
          name: "highlight-bar-update",
          animate: t
        })
      ).attr("y", Math.max(S + d.highlightStrokeWidth, 0)).attr("height", Math.max(y - 2 * d.highlightStrokeWidth, 0)).attr("x", ({ highlightStartMapsTo: R, ...A }) => _(A[R])).attr(
        "width",
        ({ highlightStartMapsTo: R, highlightEndMapsTo: A, ...H }) => Math.max(_(H[A]) - _(H[R]), 0)
      ).style("stroke", ({ color: R, labelMapsTo: A, ...H }) => R && R.scale[H[A]] ? R.scale[H[A]] : null).style("stroke-dasharray", "2, 2").attr("stroke-width", d.highlightStrokeWidth + "px").style("fill-opacity", 0.1).style("fill", ({ color: R, labelMapsTo: A, ...H }) => R && R.scale[H[A]] ? R.scale[H[A]] : null) : G.selectAll("rect.highlight-bar").transition().call(
        (R) => d.services.transitions.setupTransition({
          transition: R,
          name: "highlight-bar-update",
          animate: t
        })
      ).attr("x", g).attr("width", Math.max(m - g, 0)).attr("y", ({ highlightEndMapsTo: R, ...A }) => k(A[R])).attr(
        "height",
        ({ highlightStartMapsTo: R, highlightEndMapsTo: A, ...H }) => Math.max(k(H[R]) - k(H[A]), 0)
      ).style("stroke", ({ color: R, labelMapsTo: A, ...H }) => R && R.scale[H[A]] ? R.scale[H[A]] : null).style("stroke-dasharray", "2, 2").attr("stroke-width", d.highlightStrokeWidth + "px").style("fill-opacity", 0.1).style("fill", ({ color: R, labelMapsTo: A, ...H }) => R && R.scale[H[A]] ? R.scale[H[A]] : null);
    });
  }
}
class dm extends Nd {
  getItems(t) {
    if (t.detail.items)
      return t.detail.items;
    const { data: e } = t.detail;
    if (!e || !e.length || !e[0])
      return [];
    const n = this.getOptions(), { cartesianScales: s } = this.services, a = s.getDomainIdentifier(), r = s.isDualAxes(), { groupMapsTo: o } = n.data, c = s.getDomainLabel();
    let l = s.getRangeLabel();
    const h = e[0][a];
    let d;
    if (e.length === 1) {
      const u = e[0], p = s.getRangeIdentifier(u);
      if (r) {
        const g = s.getRangeAxisPosition({
          datum: u,
          groups: [u[o]]
        });
        l = s.getScaleLabel(g);
      }
      const f = u[p];
      d = [
        {
          label: c,
          value: h
        },
        ...Array.isArray(f) && f.length === 2 ? [
          {
            label: "Start",
            value: f[0]
          },
          {
            label: "End",
            value: f[1]
          }
        ] : [
          {
            label: l,
            value: u[p]
          }
        ]
      ], t.detail.additionalItems && t.detail.additionalItems.forEach(
        (g) => d.push({
          label: g.label,
          value: g.value
        })
      ), d.push({
        label: xt(n, "locale.translations.group") || xt(n, "tooltip.groupLabel"),
        value: u[o],
        color: this.model.getFillColor(u[o]),
        class: this.model.getColorClassName({
          classNameTypes: [nt.TOOLTIP],
          dataGroupName: u[o]
        })
      });
    } else if (e.length > 1 && (d = [
      {
        label: c,
        value: h
      }
    ], d = d.concat(
      e.map((u) => {
        const p = u[s.getRangeIdentifier(u)];
        return {
          label: u[o],
          value: Array.isArray(p) && p.length === 2 ? `${p[0]} - ${p[1]}` : p,
          color: this.model.getFillColor(u[o]),
          class: this.model.getColorClassName({
            classNameTypes: [nt.TOOLTIP],
            dataGroupName: u[o]
          })
        };
      }).sort((u, p) => p.value - u.value)
    ), !r && L(n, "tooltip", "showTotal") === !0)) {
      const u = s.getRangeIdentifier();
      d.push({
        label: xt(n, "locale.translations.total") || xt(n, "tooltip.totalLabel") || "Total",
        value: e.reduce(
          (p, f) => p + f[u],
          0
        ),
        bold: !0
      });
    }
    return d;
  }
}
function Ar(i, t) {
  let e;
  if (t === void 0)
    for (const n of i)
      n != null && (e < n || e === void 0 && n >= n) && (e = n);
  else {
    let n = -1;
    for (let s of i)
      (s = t(s, ++n, i)) != null && (e < s || e === void 0 && s >= s) && (e = s);
  }
  return e;
}
function Pd(i, t) {
  let e;
  if (t === void 0)
    for (const n of i)
      n != null && (e > n || e === void 0 && n >= n) && (e = n);
  else {
    let n = -1;
    for (let s of i)
      (s = t(s, ++n, i)) != null && (e > s || e === void 0 && s >= s) && (e = s);
  }
  return e;
}
function oi(i, t) {
  let e = 0;
  if (t === void 0)
    for (let n of i)
      (n = +n) && (e += n);
  else {
    let n = -1;
    for (let s of i)
      (s = +t(s, ++n, i)) && (e += s);
  }
  return e;
}
function $d(i) {
  return i.depth;
}
function Vd(i, t) {
  return t - 1 - i.height;
}
function Xo(i, t) {
  return i.sourceLinks.length ? i.depth : t - 1;
}
function es(i) {
  return function() {
    return i;
  };
}
function Mr(i, t) {
  return Ss(i.source, t.source) || i.index - t.index;
}
function wr(i, t) {
  return Ss(i.target, t.target) || i.index - t.index;
}
function Ss(i, t) {
  return i.y0 - t.y0;
}
function li(i) {
  return i.value;
}
function Gd(i) {
  return i.index;
}
function Hd(i) {
  return i.nodes;
}
function Bd(i) {
  return i.links;
}
function Cr(i, t) {
  const e = i.get(t);
  if (!e) throw new Error("missing: " + t);
  return e;
}
function kr({ nodes: i }) {
  for (const t of i) {
    let e = t.y0, n = e;
    for (const s of t.sourceLinks)
      s.y0 = e + s.width / 2, e += s.width;
    for (const s of t.targetLinks)
      s.y1 = n + s.width / 2, n += s.width;
  }
}
function zd() {
  let i = 0, t = 0, e = 1, n = 1, s = 24, a = 8, r, o = Gd, c = Xo, l, h, d = Hd, u = Bd, p = 6;
  function f() {
    const O = { nodes: d.apply(null, arguments), links: u.apply(null, arguments) };
    return g(O), m(O), y(O), S(O), x(O), kr(O), O;
  }
  f.update = function(O) {
    return kr(O), O;
  }, f.nodeId = function(O) {
    return arguments.length ? (o = typeof O == "function" ? O : es(O), f) : o;
  }, f.nodeAlign = function(O) {
    return arguments.length ? (c = typeof O == "function" ? O : es(O), f) : c;
  }, f.nodeSort = function(O) {
    return arguments.length ? (l = O, f) : l;
  }, f.nodeWidth = function(O) {
    return arguments.length ? (s = +O, f) : s;
  }, f.nodePadding = function(O) {
    return arguments.length ? (a = r = +O, f) : a;
  }, f.nodes = function(O) {
    return arguments.length ? (d = typeof O == "function" ? O : es(O), f) : d;
  }, f.links = function(O) {
    return arguments.length ? (u = typeof O == "function" ? O : es(O), f) : u;
  }, f.linkSort = function(O) {
    return arguments.length ? (h = O, f) : h;
  }, f.size = function(O) {
    return arguments.length ? (i = t = 0, e = +O[0], n = +O[1], f) : [e - i, n - t];
  }, f.extent = function(O) {
    return arguments.length ? (i = +O[0][0], e = +O[1][0], t = +O[0][1], n = +O[1][1], f) : [[i, t], [e, n]];
  }, f.iterations = function(O) {
    return arguments.length ? (p = +O, f) : p;
  };
  function g({ nodes: O, links: P }) {
    for (const [C, V] of O.entries())
      V.index = C, V.sourceLinks = [], V.targetLinks = [];
    const $ = new Map(O.map((C, V) => [o(C, V, O), C]));
    for (const [C, V] of P.entries()) {
      V.index = C;
      let { source: q, target: X } = V;
      typeof q != "object" && (q = V.source = Cr($, q)), typeof X != "object" && (X = V.target = Cr($, X)), q.sourceLinks.push(V), X.targetLinks.push(V);
    }
    if (h != null)
      for (const { sourceLinks: C, targetLinks: V } of O)
        C.sort(h), V.sort(h);
  }
  function m({ nodes: O }) {
    for (const P of O)
      P.value = P.fixedValue === void 0 ? Math.max(oi(P.sourceLinks, li), oi(P.targetLinks, li)) : P.fixedValue;
  }
  function y({ nodes: O }) {
    const P = O.length;
    let $ = new Set(O), C = /* @__PURE__ */ new Set(), V = 0;
    for (; $.size; ) {
      for (const q of $) {
        q.depth = V;
        for (const { target: X } of q.sourceLinks)
          C.add(X);
      }
      if (++V > P) throw new Error("circular link");
      $ = C, C = /* @__PURE__ */ new Set();
    }
  }
  function S({ nodes: O }) {
    const P = O.length;
    let $ = new Set(O), C = /* @__PURE__ */ new Set(), V = 0;
    for (; $.size; ) {
      for (const q of $) {
        q.height = V;
        for (const { source: X } of q.targetLinks)
          C.add(X);
      }
      if (++V > P) throw new Error("circular link");
      $ = C, C = /* @__PURE__ */ new Set();
    }
  }
  function v({ nodes: O }) {
    const P = Ar(O, (V) => V.depth) + 1, $ = (e - i - s) / (P - 1), C = new Array(P);
    for (const V of O) {
      const q = Math.max(0, Math.min(P - 1, Math.floor(c.call(null, V, P))));
      V.layer = q, V.x0 = i + q * $, V.x1 = V.x0 + s, C[q] ? C[q].push(V) : C[q] = [V];
    }
    if (l) for (const V of C)
      V.sort(l);
    return C;
  }
  function E(O) {
    const P = Pd(O, ($) => (n - t - ($.length - 1) * r) / oi($, li));
    for (const $ of O) {
      let C = t;
      for (const V of $) {
        V.y0 = C, V.y1 = C + V.value * P, C = V.y1 + r;
        for (const q of V.sourceLinks)
          q.width = q.value * P;
      }
      C = (n - C + r) / ($.length + 1);
      for (let V = 0; V < $.length; ++V) {
        const q = $[V];
        q.y0 += C * (V + 1), q.y1 += C * (V + 1);
      }
      H($);
    }
  }
  function x(O) {
    const P = v(O);
    r = Math.min(a, (n - t) / (Ar(P, ($) => $.length) - 1)), E(P);
    for (let $ = 0; $ < p; ++$) {
      const C = Math.pow(0.99, $), V = Math.max(1 - C, ($ + 1) / p);
      _(P, C, V), b(P, C, V);
    }
  }
  function b(O, P, $) {
    for (let C = 1, V = O.length; C < V; ++C) {
      const q = O[C];
      for (const X of q) {
        let F = 0, Z = 0;
        for (const { source: j, value: Y } of X.targetLinks) {
          let K = Y * (X.layer - j.layer);
          F += N(j, X) * K, Z += K;
        }
        if (!(Z > 0)) continue;
        let rt = (F / Z - X.y0) * P;
        X.y0 += rt, X.y1 += rt, A(X);
      }
      l === void 0 && q.sort(Ss), k(q, $);
    }
  }
  function _(O, P, $) {
    for (let C = O.length, V = C - 2; V >= 0; --V) {
      const q = O[V];
      for (const X of q) {
        let F = 0, Z = 0;
        for (const { target: j, value: Y } of X.sourceLinks) {
          let K = Y * (j.layer - X.layer);
          F += M(X, j) * K, Z += K;
        }
        if (!(Z > 0)) continue;
        let rt = (F / Z - X.y0) * P;
        X.y0 += rt, X.y1 += rt, A(X);
      }
      l === void 0 && q.sort(Ss), k(q, $);
    }
  }
  function k(O, P) {
    const $ = O.length >> 1, C = O[$];
    R(O, C.y0 - r, $ - 1, P), G(O, C.y1 + r, $ + 1, P), R(O, n, O.length - 1, P), G(O, t, 0, P);
  }
  function G(O, P, $, C) {
    for (; $ < O.length; ++$) {
      const V = O[$], q = (P - V.y0) * C;
      q > 1e-6 && (V.y0 += q, V.y1 += q), P = V.y1 + r;
    }
  }
  function R(O, P, $, C) {
    for (; $ >= 0; --$) {
      const V = O[$], q = (V.y1 - P) * C;
      q > 1e-6 && (V.y0 -= q, V.y1 -= q), P = V.y0 - r;
    }
  }
  function A({ sourceLinks: O, targetLinks: P }) {
    if (h === void 0) {
      for (const { source: { sourceLinks: $ } } of P)
        $.sort(wr);
      for (const { target: { targetLinks: $ } } of O)
        $.sort(Mr);
    }
  }
  function H(O) {
    if (h === void 0)
      for (const { sourceLinks: P, targetLinks: $ } of O)
        P.sort(wr), $.sort(Mr);
  }
  function N(O, P) {
    let $ = O.y0 - (O.sourceLinks.length - 1) * r / 2;
    for (const { target: C, width: V } of O.sourceLinks) {
      if (C === P) break;
      $ += V + r;
    }
    for (const { source: C, width: V } of P.targetLinks) {
      if (C === O) break;
      $ -= V;
    }
    return $;
  }
  function M(O, P) {
    let $ = P.y0 - (P.targetLinks.length - 1) * r / 2;
    for (const { source: C, width: V } of P.targetLinks) {
      if (C === O) break;
      $ += V + r;
    }
    for (const { target: C, width: V } of O.sourceLinks) {
      if (C === P) break;
      $ -= V;
    }
    return $;
  }
  return f;
}
var $i = Math.PI, Vi = 2 * $i, _e = 1e-6, Ud = Vi - _e;
function Gi() {
  this._x0 = this._y0 = // start of current subpath
  this._x1 = this._y1 = null, this._ = "";
}
function Yo() {
  return new Gi();
}
Gi.prototype = Yo.prototype = {
  constructor: Gi,
  moveTo: function(i, t) {
    this._ += "M" + (this._x0 = this._x1 = +i) + "," + (this._y0 = this._y1 = +t);
  },
  closePath: function() {
    this._x1 !== null && (this._x1 = this._x0, this._y1 = this._y0, this._ += "Z");
  },
  lineTo: function(i, t) {
    this._ += "L" + (this._x1 = +i) + "," + (this._y1 = +t);
  },
  quadraticCurveTo: function(i, t, e, n) {
    this._ += "Q" + +i + "," + +t + "," + (this._x1 = +e) + "," + (this._y1 = +n);
  },
  bezierCurveTo: function(i, t, e, n, s, a) {
    this._ += "C" + +i + "," + +t + "," + +e + "," + +n + "," + (this._x1 = +s) + "," + (this._y1 = +a);
  },
  arcTo: function(i, t, e, n, s) {
    i = +i, t = +t, e = +e, n = +n, s = +s;
    var a = this._x1, r = this._y1, o = e - i, c = n - t, l = a - i, h = r - t, d = l * l + h * h;
    if (s < 0) throw new Error("negative radius: " + s);
    if (this._x1 === null)
      this._ += "M" + (this._x1 = i) + "," + (this._y1 = t);
    else if (d > _e) if (!(Math.abs(h * o - c * l) > _e) || !s)
      this._ += "L" + (this._x1 = i) + "," + (this._y1 = t);
    else {
      var u = e - a, p = n - r, f = o * o + c * c, g = u * u + p * p, m = Math.sqrt(f), y = Math.sqrt(d), S = s * Math.tan(($i - Math.acos((f + d - g) / (2 * m * y))) / 2), v = S / y, E = S / m;
      Math.abs(v - 1) > _e && (this._ += "L" + (i + v * l) + "," + (t + v * h)), this._ += "A" + s + "," + s + ",0,0," + +(h * u > l * p) + "," + (this._x1 = i + E * o) + "," + (this._y1 = t + E * c);
    }
  },
  arc: function(i, t, e, n, s, a) {
    i = +i, t = +t, e = +e, a = !!a;
    var r = e * Math.cos(n), o = e * Math.sin(n), c = i + r, l = t + o, h = 1 ^ a, d = a ? n - s : s - n;
    if (e < 0) throw new Error("negative radius: " + e);
    this._x1 === null ? this._ += "M" + c + "," + l : (Math.abs(this._x1 - c) > _e || Math.abs(this._y1 - l) > _e) && (this._ += "L" + c + "," + l), e && (d < 0 && (d = d % Vi + Vi), d > Ud ? this._ += "A" + e + "," + e + ",0,1," + h + "," + (i - r) + "," + (t - o) + "A" + e + "," + e + ",0,1," + h + "," + (this._x1 = c) + "," + (this._y1 = l) : d > _e && (this._ += "A" + e + "," + e + ",0," + +(d >= $i) + "," + h + "," + (this._x1 = i + e * Math.cos(s)) + "," + (this._y1 = t + e * Math.sin(s))));
  },
  rect: function(i, t, e, n) {
    this._ += "M" + (this._x0 = this._x1 = +i) + "," + (this._y0 = this._y1 = +t) + "h" + +e + "v" + +n + "h" + -e + "Z";
  },
  toString: function() {
    return this._;
  }
};
function _r(i) {
  return function() {
    return i;
  };
}
function Fd(i) {
  return i[0];
}
function Wd(i) {
  return i[1];
}
var Xd = Array.prototype.slice;
function Yd(i) {
  return i.source;
}
function Zd(i) {
  return i.target;
}
function qd(i) {
  var t = Yd, e = Zd, n = Fd, s = Wd, a = null;
  function r() {
    var o, c = Xd.call(arguments), l = t.apply(this, c), h = e.apply(this, c);
    if (a || (a = o = Yo()), i(a, +n.apply(this, (c[0] = l, c)), +s.apply(this, c), +n.apply(this, (c[0] = h, c)), +s.apply(this, c)), o) return a = null, o + "" || null;
  }
  return r.source = function(o) {
    return arguments.length ? (t = o, r) : t;
  }, r.target = function(o) {
    return arguments.length ? (e = o, r) : e;
  }, r.x = function(o) {
    return arguments.length ? (n = typeof o == "function" ? o : _r(+o), r) : n;
  }, r.y = function(o) {
    return arguments.length ? (s = typeof o == "function" ? o : _r(+o), r) : s;
  }, r.context = function(o) {
    return arguments.length ? (a = o ?? null, r) : a;
  }, r;
}
function jd(i, t, e, n, s) {
  i.moveTo(t, e), i.bezierCurveTo(t = (t + n) / 2, e, t, s, n, s);
}
function Kd() {
  return qd(jd);
}
function Jd(i) {
  return [i.source.x1, i.y0];
}
function Qd(i) {
  return [i.target.x0, i.y1];
}
function tp() {
  return Kd().source(Jd).target(Qd);
}
class pm extends dt {
  constructor() {
    super(...arguments), this.type = "alluvial", this.renderType = at.SVG, this.gradient_id = "gradient-id-" + Math.floor(Math.random() * 99999999999);
  }
  // eslint-disable-next-line @typescript-eslint/ban-ts-comment
  // @ts-ignore
  // eslint-disable-next-line @typescript-eslint/no-unused-vars
  render(t = !0) {
    const e = this.getComponentContainer({ ariaLabel: "alluvial graphs", withinChartClip: !0 });
    e.html("");
    const { width: n, height: s } = I.getSVGElementSize(e, {
      useAttrs: !0
    });
    if (n < 1 || s < 1)
      return;
    const a = this.model.getOptions(), r = this.model.getDisplayData(), o = L(
      this.getOptions(),
      "color",
      "gradient",
      "enabled"
    );
    let c = se.minNodePadding;
    a.alluvial.nodePadding > se.minNodePadding && (c = a.alluvial.nodePadding);
    const l = L(a, "alluvial", "nodeAlignment");
    let h = Xo;
    l === te.LEFT ? h = $d : l === te.RIGHT && (h = Vd);
    const d = zd().nodeId((v) => v.name).nodeWidth(se.nodeWidth).nodePadding(c).nodeAlign(h).extent([
      [2, 30],
      [n - 2, s]
    ]);
    this.graph = d({
      nodes: a.alluvial.nodes.map((v) => Object.assign({}, v)),
      links: r.map((v) => Object.assign({}, v))
    }), this.graph.nodes = this.graph.nodes.filter((v) => v.value !== 0);
    const u = {};
    this.graph.nodes.forEach((v) => {
      const E = v.x0;
      v.category && (u[E] = v == null ? void 0 : v.category);
    }), e.append("g").classed("header-arrows", !0).selectAll("g").data(Object.keys(u)).join("g").attr("transform", (v) => `translate(${v}, 0)`).append("text").attr(
      "id",
      (v, E) => this.services.domUtils.generateElementIDString(`alluvial-category-${E}`)
    ).style("font-size", "14px").text((v) => u[v] ? u[v] : "").attr("y", 20).attr("x", (v, E) => {
      const x = this.services.domUtils.generateElementIDString(
        `alluvial-category-${E}`
      ), { width: b } = I.getSVGElementSize(D(`text#${x}`), {
        useBBox: !0
      });
      let _ = 0;
      return v + _ >= b && (_ = -b + 4), _;
    });
    const f = e.append("g").attr("fill", "none").selectAll("g").data(this.graph.links);
    if (f.exit().remove(), o) {
      const v = L(this.getOptions(), "color", "scale");
      v && f.enter().append("linearGradient").attr("id", (E) => `${this.gradient_id}-link-${E.index}`).attr("gradientUnits", "userSpaceOnUse").call(
        (E) => E.append("stop").attr("offset", "0%").attr("stop-color", (x) => v[x.source.name])
      ).call(
        (E) => E.append("stop").attr("offset", "100%").attr("stop-color", (x) => v[x.target.name])
      ), f.exit().remove();
    }
    f.enter().append("path").classed("link", !0).attr("d", tp()).attr(
      "id",
      (v) => this.services.domUtils.generateElementIDString(`alluvial-line-${v.index}`)
    ).attr("class", (v) => a.alluvial.monochrome ? this.model.getColorClassName({
      classNameTypes: [nt.STROKE],
      dataGroupName: 0,
      originalClassName: "link"
    }) : this.model.getColorClassName({
      classNameTypes: [nt.STROKE],
      dataGroupName: v.source.index,
      originalClassName: "link"
    })).style("stroke", (v) => o ? `url(#${this.gradient_id}-link-${v.index})` : this.model.getFillColor(v.source.name, null, {
      ...v,
      source: v.source.name,
      target: v.target.name
    })).attr("stroke-width", (v) => Math.max(1, v.width)).style("stroke-opacity", se.opacity.default).attr(
      "aria-label",
      (v) => `${v.source.name} → ${v.target.name} (${v.value}${a.alluvial.units ? " " + a.alluvial.units : ""})`
    );
    const g = e.append("g").selectAll("g").data(this.graph.nodes).enter().append("g").attr(
      "id",
      (v) => this.services.domUtils.generateElementIDString(`alluvial-node-${v.index}`)
    ).classed("node-group", !0).attr("transform", (v) => `translate(${v.x0}, ${v.y0})`);
    g.append("rect").classed("node", !0).attr("height", (v) => v.y1 - v.y0).attr("width", (v) => v.x1 - v.x0).attr("fill", "black");
    const m = g.append("g").attr(
      "id",
      (v) => this.services.domUtils.generateElementIDString(`alluvial-node-title-${v.index}`)
    ), { code: y, number: S } = L(a, "locale");
    m.append("text").attr(
      "id",
      (v) => this.services.domUtils.generateElementIDString(`alluvial-node-text-${v.index}`)
    ).attr("class", "node-text").style("font-size", "12px").attr("text-anchor", "start").attr("fill", "white").attr("x", 4).attr("dy", 13).text((v) => `${v.name} (${S(v.value, y)})`).attr("aria-label", (v) => `${v.name} (${v.value})`), m.append("rect").classed("node-text-bg", !0).attr("width", (v, E) => {
      const x = this.services.domUtils.generateElementIDString(
        `alluvial-node-text-${E}`
      ), { width: b } = I.getSVGElementSize(D(`text#${x}`), {
        useBBox: !0
      });
      return b + 8;
    }).attr("height", 18).attr("stroke-width", 2).lower(), m.attr("transform", (v, E) => {
      const x = this.services.domUtils.generateElementIDString(
        `alluvial-node-text-${E}`
      ), { width: b } = I.getSVGElementSize(D(`text#${x}`), {
        useBBox: !0
      }), _ = (v.y1 - v.y0) / 2 - 9;
      let k = v.x1 - v.x0;
      return v.x1 >= b ? k = k - (b + 16) : k += 4, `translate(${k}, ${_})`;
    }), this.addLineEventListener(), this.addNodeEventListener();
  }
  addLineEventListener() {
    const t = this.getOptions(), e = this, { number: n, code: s } = L(this.getOptions(), "locale"), a = pi((r, o = "mouseover") => {
      const c = e.parent.selectAll("path.link").transition().call(
        (l) => e.services.transitions.setupTransition({
          transition: l,
          name: "alluvial-links-mouse-highlight"
        })
      );
      o === "mouseout" ? (D(r).lower(), c.style("stroke-opacity", se.opacity.default)) : c.style("stroke-opacity", function() {
        return r === this ? (D(this).raise(), se.opacity.selected) : se.opacity.unfocus;
      });
    }, 33);
    this.parent.selectAll("path.link").on("mouseover", function(r, o) {
      const c = D(this);
      a(this, "mouseover"), c.classed("link-hovered", !0);
      const l = getComputedStyle(this).getPropertyValue("stroke");
      e.services.events.dispatchEvent(T.Alluvial.LINE_MOUSEOVER, {
        event: r,
        element: c,
        datum: o
      }), e.services.events.dispatchEvent(T.Tooltip.SHOW, {
        event: r,
        hoveredElement: c,
        items: [
          {
            label: o.target.name,
            value: (n(o.value, s) ? `${n(o.value, s)}` : "-") + (t.alluvial.units ? ` ${t.alluvial.units}` : ""),
            color: l,
            labelIcon: e.getRightArrowIcon()
          }
        ]
      });
    }).on("mousemove", function(r, o) {
      e.services.events.dispatchEvent(T.Alluvial.LINE_MOUSEMOVE, {
        event: r,
        element: D(this),
        datum: o
      }), e.services.events.dispatchEvent(T.Tooltip.MOVE, {
        event: r
      });
    }).on("click", function(r, o) {
      e.services.events.dispatchEvent(T.Alluvial.LINE_CLICK, {
        event: r,
        element: D(this),
        datum: o
      });
    }).on("mouseout", function(r, o) {
      const c = D(this);
      a(this, "mouseout"), c.classed("link-hovered", !1), e.services.events.dispatchEvent(T.Alluvial.LINE_MOUSEOUT, {
        event: r,
        element: c,
        datum: o
      }), e.services.events.dispatchEvent(T.Tooltip.HIDE, {
        event: r,
        hoveredElement: c
      });
    });
  }
  addNodeEventListener() {
    const t = this, e = pi((n = [], s = "mouseover") => {
      if (s === "mouseout" || n.length === 0) {
        t.parent.selectAll("path.link").classed("link-hovered", !1).data(this.graph.links, (r) => r.index).order().style("stroke-opacity", se.opacity.default);
        return;
      }
      t.parent.selectAll("path.link").transition().call(
        (r) => this.services.transitions.setupTransition({
          transition: r,
          name: "alluvial-link-mouse-highlight"
        })
      ).style("stroke-opacity", function(r) {
        return n.some((o) => o === r.index) ? (D(this).classed("link-hovered", !0).raise(), se.opacity.selected) : se.opacity.unfocus;
      });
    }, 66);
    t.parent.selectAll(".node-group").on("mouseover", function(n, s) {
      const a = D(this), r = [];
      if (t.traverse({ link: "sourceLinks", node: "target" }, s, r), t.traverse({ link: "targetLinks", node: "source" }, s, r), r.length) {
        const o = vn(a.attr("transform"));
        if (a.attr("transform", `translate(${o.x - 2}, ${o.y})`), a.classed("node-hovered", !0).selectAll("rect.node").attr("width", 8), s.x0 - 2 === 0) {
          const l = t.services.domUtils.generateElementIDString(
            `alluvial-node-title-${s.index}`
          ), h = t.parent.select(`g#${l}`), d = vn(h.attr("transform"));
          h.attr("transform", `translate(${d.x + 4},${d.y})`);
        }
        const c = t.services.domUtils.generateElementIDString(
          `alluvial-node-text-${s.index}`
        );
        t.parent.select(`text#${c}`).style("font-weight", "bold"), e(r, "mouseover"), t.services.events.dispatchEvent(T.Alluvial.NODE_MOUSEOVER, {
          event: n,
          element: a,
          datum: s
        });
      }
    }).on("mousemove", function(n, s) {
      t.services.events.dispatchEvent(T.Alluvial.NODE_MOUSEMOVE, {
        event: n,
        element: D(this),
        datum: s
      }), t.services.events.dispatchEvent(T.Tooltip.MOVE, {
        event: n
      });
    }).on("click", function(n, s) {
      t.services.events.dispatchEvent(T.Alluvial.NODE_CLICK, {
        event: n,
        element: D(this),
        datum: s
      });
    }).on("mouseout", function(n, s) {
      const a = D(this), r = vn(a.attr("transform"));
      if (a.classed("node-hovered", !1).attr("transform", `translate(${r.x + 2}, ${r.y})`).select("rect.node").attr("width", se.nodeWidth), s.x0 - 2 === 0) {
        const c = t.services.domUtils.generateElementIDString(
          `alluvial-node-title-${s.index}`
        ), l = t.parent.select(`g#${c}`), h = vn(l.attr("transform"));
        l.attr("transform", `translate(${h.x - 4},${h.y})`);
      }
      const o = t.services.domUtils.generateElementIDString(
        `alluvial-node-text-${s.index}`
      );
      t.parent.select(`text#${o}`).style("font-weight", "normal"), e([], "mouseout"), t.services.events.dispatchEvent(T.Alluvial.NODE_MOUSEOUT, {
        event: n,
        element: a,
        datum: s
      }), t.services.events.dispatchEvent(T.Tooltip.HIDE, {
        hoveredElement: a
      });
    });
  }
  // Traverse graph and get all connected links to node
  traverse(t, e, n = []) {
    e[t.link].map((a) => (n.push(a.index), a[t.node])).forEach((a) => this.traverse(t, a, n));
  }
  getRightArrowIcon() {
    return `
		<svg xmlns="http://www.w3.org/2000/svg" class="arrow-right" width="32" height="32" viewBox="0 0 32 32">
			<polygon points="18 6 16.57 7.393 24.15 15 4 15 4 17 24.15 17 16.57 24.573 18 26 28 16 18 6"/>
			<rect width="32" height="32"/>
		</svg>`;
  }
  // Remove event listeners
  destroy() {
    this.parent.selectAll("path.line,.node-group").on("mouseover", null).on("mousemove", null).on("click", null).on("mouseout", null);
  }
}
class fm extends dt {
  constructor() {
    super(...arguments), this.type = "grid", this.renderType = at.SVG;
  }
  render(t = !0) {
    const e = L(this.getOptions(), "grid", "x", "enabled"), n = L(this.getOptions(), "grid", "y", "enabled");
    this.drawBackdrop(e, n), !(!e && !n) && (e && (I.appendOrSelect(this.backdrop, "g.x.grid"), this.drawXGrid(t)), n && (I.appendOrSelect(this.backdrop, "g.y.grid"), this.drawYGrid(t)));
  }
  drawXGrid(t) {
    const e = this.parent, n = this.backdrop.attr("height"), s = this.services.cartesianScales.getMainXScale(), a = Ui(s).tickSizeInner(-n).tickSizeOuter(0);
    if (L(this.getOptions(), "grid", "x", "alignWithAxisTicks")) {
      const c = this.services.cartesianScales.getDomainAxisPosition(), l = L(this.getOptions(), "axes", c, "ticks", "values");
      l && a.tickValues(l);
    } else {
      const c = L(this.getOptions(), "grid", "x", "numberOfTicks");
      a.ticks(c);
    }
    const o = e.select(".x.grid").attr("transform", `translate(${-this.backdrop.attr("x")}, ${n})`);
    t ? o.transition().call(
      (c) => this.services.transitions.setupTransition({
        transition: c,
        name: "grid-update",
        animate: t
      })
    ).call(a) : o.call(a), this.cleanGrid(o);
  }
  drawYGrid(t) {
    const e = this.parent, n = this.backdrop.attr("width"), s = this.services.cartesianScales.getMainYScale(), a = uo(s).tickSizeInner(-n).tickSizeOuter(0);
    if (L(this.getOptions(), "grid", "y", "alignWithAxisTicks")) {
      const c = this.services.cartesianScales.getRangeAxisPosition(), l = L(this.getOptions(), "axes", c, "ticks", "values");
      l && a.tickValues(l);
    } else {
      const c = L(this.getOptions(), "grid", "y", "numberOfTicks");
      a.ticks(c);
    }
    const o = e.select(".y.grid").attr("transform", `translate(0, ${-this.backdrop.attr("y")})`);
    t ? o.transition().call(
      (c) => this.services.transitions.setupTransition({
        transition: c,
        name: "grid-update",
        animate: t
      })
    ).call(a) : o.call(a), this.cleanGrid(o);
  }
  /**
   * Returns the threshold for the gridline tooltips based on the mouse location.
   * Calculated based on the mouse position between the two closest gridlines or edges of chart.
   */
  getGridlineThreshold(t) {
    const e = this.parent, n = e.selectAll(".x.grid .tick").nodes().sort((h, d) => Number(ge(h).tx) - Number(ge(d).tx));
    let s = -1;
    if (!n.length)
      return;
    n.forEach((h) => {
      t[0] >= +ge(h).tx && s++;
    });
    const a = s + 1 < n.length ? s + 1 : n.length, r = n[s], o = n[a];
    let c;
    if (!r)
      c = +ge(o).tx;
    else if (o)
      c = +ge(o).tx - +ge(r).tx;
    else {
      const h = e.select("rect.chart-grid-backdrop").node();
      c = I.getSVGElementSize(h).width - +ge(r).tx;
    }
    const { threshold: l } = this.getOptions().tooltip.gridline;
    return c * l;
  }
  /**
   * Returns the active gridlines based on the gridline threshold and mouse position.
   * @param position mouse positon
   */
  getActiveGridline(t) {
    const e = L(this.getOptions, "tooltip", "gridline", "threshold"), n = e || this.getGridlineThreshold(t);
    return this.parent.selectAll(".x.grid .tick").filter(function() {
      const r = ge(this), o = {
        min: Number(r.tx) - n,
        max: Number(r.tx) + n
      };
      return o.min <= t[0] && t[0] <= o.max;
    });
  }
  drawBackdrop(t, e) {
    const n = this.parent, s = this.services.cartesianScales.getMainXScale(), a = this.services.cartesianScales.getMainYScale(), [r, o] = s.range(), [c, l] = a.range();
    this.backdrop = I.appendOrSelect(n, "svg.chart-grid-backdrop").attr(
      "role",
      "presentation"
    );
    const h = I.appendOrSelect(
      this.backdrop,
      t || e ? "rect.chart-grid-backdrop.stroked" : "rect.chart-grid-backdrop"
    );
    this.backdrop.merge(h).attr("x", r).attr("y", l).attr("width", Math.abs(o - r)).attr("height", Math.abs(c - l)).lower(), h.attr("width", "100%").attr("height", "100%");
  }
  cleanGrid(t) {
    t.selectAll("text").remove(), t.select(".domain").remove();
  }
}
class gm extends dt {
  constructor() {
    super(...arguments), this.type = "area", this.renderType = at.SVG, this.gradient_id = "gradient-id-" + Math.floor(Math.random() * 99999999999), this.handleLegendOnHover = (t) => {
      const { hoveredElement: e } = t.detail;
      this.parent.selectAll("path.area").transition("legend-hover-area").call(
        (n) => this.services.transitions.setupTransition({
          transition: n,
          name: "legend-hover-area"
        })
      ).attr("opacity", (n) => n.name !== e.datum().name ? ve.opacity.unselected : ve.opacity.selected);
    }, this.handleLegendMouseOut = () => {
      this.parent.selectAll("path.area").transition("legend-mouseout-area").call(
        (t) => this.services.transitions.setupTransition({
          transition: t,
          name: "legend-mouseout-area"
        })
      ).attr("opacity", ve.opacity.selected);
    };
  }
  init() {
    const t = this.services.events;
    t.addEventListener(T.Legend.ITEM_HOVER, this.handleLegendOnHover), t.addEventListener(T.Legend.ITEM_MOUSEOUT, this.handleLegendMouseOut);
  }
  render(t = !0) {
    const e = this.getComponentContainer({ ariaLabel: "area graphs", withinChartClip: !0 }), n = this.getOptions();
    let s = [0, 0];
    const { cartesianScales: a } = this.services, r = a.getOrientation(), o = ji().curve(this.services.curves.getD3Curve()).defined((x) => {
      const b = a.getRangeIdentifier(), _ = x[b];
      return _ != null;
    }), c = this.model.getGroupedData(this.configs.groups), l = L(n, "bounds"), h = l && c && c.length === 1;
    !h && l && console.warn(
      `Bounds can only be shown when having 1 single datagroup, you've supplied ${c.length}`
    );
    let d = 0;
    const u = (x, b) => {
      L(n, "axes", x, "includeZero") === !1 && b[0] > 0 && b[1] > 0 && (d = b[0]);
    }, p = (x) => h ? a.getBoundedScaledValues(x)[0] : a.getRangeValue(d), f = (x) => h ? a.getBoundedScaledValues(x)[1] : a.getRangeValue(x);
    r === Xt.VERTICAL ? (s = a.getMainYScale().domain(), u(a.getMainYAxisPosition(), s), o.x((x) => a.getDomainValue(x)).y0((x) => p(x)).y1((x) => f(x))) : (s = a.getMainXScale().domain(), u(a.getMainXAxisPosition(), s), o.x0((x) => p(x)).x1((x) => f(x)).y((x) => a.getDomainValue(x)));
    const g = L(n, "color", "gradient", "enabled"), m = c && c.length === 1 && g;
    c.length > 1 && g && console.error("Gradients can only be enabled when having 1 single dataset");
    const y = e.selectAll("path.area").data(c, (x) => x.name), S = D(this.services.domUtils.getMainContainer());
    if (y.exit().attr("opacity", 0).remove(), !c.length)
      return;
    if (m) {
      const x = S.select(
        `path.${this.model.getColorClassName({
          classNameTypes: [nt.STROKE],
          dataGroupName: c[0].name
        })}`
      ).node();
      let b;
      if (x)
        b = getComputedStyle(x, null).getPropertyValue(
          "stroke"
        );
      else {
        const _ = L(this.model.getOptions(), "color", "scale");
        if (_ !== null) {
          const k = Object.keys(_);
          b = _[k[0]];
        }
      }
      wa.appendOrUpdateLinearGradient({
        svg: this.parent,
        id: this.services.domUtils.generateElementIDString(
          `${c[0].name.replace(" ", "")}_${this.gradient_id}`
        ),
        x1: "0%",
        x2: "0%",
        y1: "0%",
        y2: "100%",
        stops: wa.getStops(s, b)
      });
    } else
      this.parent.selectAll("defs linearGradient").empty() || this.parent.selectAll("defs linearGradient").each(function() {
        this.parentNode.remove();
      });
    const v = this, E = y.enter().append("path");
    m ? E.merge(y).style(
      "fill",
      (x) => `url(#${this.services.domUtils.generateElementIDString(
        `${x.name.replace(" ", "")}_${this.gradient_id}`
      )})`
    ).attr("class", "area").attr(
      "class",
      (x) => this.model.getColorClassName({
        classNameTypes: [nt.FILL],
        dataGroupName: x.name,
        originalClassName: "area"
      })
    ).attr("d", (x) => {
      const { data: b } = x;
      return o(b);
    }) : (E.attr("opacity", 0).merge(y).attr("class", "area").attr(
      "class",
      (x) => this.model.getColorClassName({
        classNameTypes: [nt.FILL, nt.STROKE],
        dataGroupName: x.name,
        originalClassName: "area"
      })
    ).style("fill", (x) => v.model.getFillColor(x.name, null, x.data)).transition().call(
      (x) => this.services.transitions.setupTransition({
        transition: x,
        name: "area-update-enter",
        animate: t
      })
    ).attr("opacity", h ? 1 : ve.opacity.selected).attr("d", (x) => {
      const { data: b } = x;
      return o(b);
    }), h && E.attr("fill-opacity", ve.opacity.selected).style("stroke", (x) => v.model.getStrokeColor(x.name, null, x.data)).style("stroke-dasharray", "2, 2").attr("stroke-width", 0.7 + "px"));
  }
  destroy() {
    const t = this.services.events;
    t.removeEventListener(T.Legend.ITEM_HOVER, this.handleLegendOnHover), t.removeEventListener(T.Legend.ITEM_MOUSEOUT, this.handleLegendMouseOut);
  }
}
class mm extends dt {
  constructor() {
    super(...arguments), this.type = "line", this.renderType = at.SVG, this.handleLegendOnHover = (t) => {
      const { hoveredElement: e } = t.detail;
      this.parent.selectAll("path.line").transition("legend-hover-line").call(
        (n) => this.services.transitions.setupTransition({
          transition: n,
          name: "legend-hover-line"
        })
      ).attr("opacity", (n) => n.name !== e.datum().name ? me.opacity.unselected : me.opacity.selected);
    }, this.handleLegendMouseOut = () => {
      this.parent.selectAll("path.line").transition("legend-mouseout-line").call(
        (t) => this.services.transitions.setupTransition({
          transition: t,
          name: "legend-mouseout-line"
        })
      ).attr("opacity", me.opacity.selected);
    };
  }
  init() {
    const { events: t } = this.services;
    t.addEventListener(T.Legend.ITEM_HOVER, this.handleLegendOnHover), t.addEventListener(T.Legend.ITEM_MOUSEOUT, this.handleLegendMouseOut);
  }
  render(t = !0) {
    const e = this.getComponentContainer({ ariaLabel: "lines", withinChartClip: !0 }), { cartesianScales: n, curves: s } = this.services, a = (f) => n.getDomainValue(f), r = (f) => n.getRangeValue(f), [o, c] = Ee(
      a,
      r,
      n.getOrientation()
    ), l = this.getOptions(), h = Dn().x(o).y(c).curve(s.getD3Curve()).defined((f) => {
      const g = n.getRangeIdentifier(f), m = f[g];
      return m != null;
    });
    let d = [];
    if (this.configs.stacked) {
      const f = Object.keys(l.axes).some((y) => l.axes[y].percentage), { groupMapsTo: g } = l.data;
      d = this.model.getStackedData({
        groups: this.configs.groups,
        percentage: f
      }).map((y) => {
        const S = this.services.cartesianScales.getDomainIdentifier(y), v = this.services.cartesianScales.getRangeIdentifier(y);
        return {
          name: L(y, 0, g),
          data: y.map((E) => ({
            [S]: E.data.sharedStackKey,
            [g]: E[g],
            [v]: E[1]
          })),
          hidden: !Mc(y, (E) => E[0] !== E[1])
        };
      });
    } else
      d = this.model.getGroupedData(this.configs.groups);
    const u = e.selectAll("path.line").data(d, (f) => f.name);
    u.exit().attr("opacity", 0).remove(), u.enter().append("path").classed("line", !0).attr("opacity", 0).merge(u).data(d, (f) => f.name).attr(
      "class",
      (f) => this.model.getColorClassName({
        classNameTypes: [nt.STROKE],
        dataGroupName: f.name,
        originalClassName: "line"
      })
    ).style("stroke", (f) => this.model.getStrokeColor(f.name, null, f.data)).attr("role", lt.GRAPHICS_SYMBOL).attr("aria-roledescription", "line").attr("aria-label", (f) => {
      const { data: g } = f;
      return g.map((m) => {
        const y = this.services.cartesianScales.getRangeIdentifier(m);
        return m[y];
      }).join(",");
    }).transition().call(
      (f) => this.services.transitions.setupTransition({
        transition: f,
        name: "line-update-enter",
        animate: t
      })
    ).attr("opacity", (f) => f.hidden ? 0 : 1).attr("d", (f) => {
      const { data: g } = f;
      return h(g);
    });
  }
  destroy() {
    const t = this.services.events;
    t.removeEventListener(T.Legend.ITEM_HOVER, this.handleLegendOnHover), t.removeEventListener(T.Legend.ITEM_MOUSEOUT, this.handleLegendMouseOut);
  }
}
const Ir = 5;
function ep(i, t) {
  return i > t - Ir && i < t + Ir;
}
class Zo extends dt {
  constructor() {
    super(...arguments), this.type = "ruler", this.renderType = at.SVG, this.isXGridEnabled = L(this.getOptions(), "grid", "x", "enabled"), this.isYGridEnabled = L(this.getOptions(), "grid", "y", "enabled"), this.isEventListenerAdded = !1;
  }
  // eslint-disable-next-line @typescript-eslint/ban-ts-comment
  // @ts-ignore
  // eslint-disable-next-line @typescript-eslint/no-unused-vars
  render(t = !1) {
    const e = L(this.getOptions(), "ruler", "enabled");
    this.drawBackdrop(), e && !this.isEventListenerAdded ? this.addBackdropEventListeners() : !e && this.isEventListenerAdded && this.removeBackdropEventListeners();
  }
  removeBackdropEventListeners() {
    this.isEventListenerAdded = !1, this.backdrop.on("mousemove mouseover mouseout", null);
  }
  formatTooltipData(t) {
    return t;
  }
  showRuler(t, [e, n]) {
    const s = this.parent, a = this.services.cartesianScales.getOrientation(), r = this.model.getDisplayData(), o = this.services.cartesianScales.getRangeScale(), [c, l] = o.range(), h = a === Xt.HORIZONTAL ? n : e, d = I.appendOrSelect(s, "g.ruler").attr("aria-label", "ruler"), u = I.appendOrSelect(d, "line.ruler-line"), p = s.selectAll("[role=graphics-symbol]"), f = r.map((m) => ({
      domainValue: this.services.cartesianScales.getDomainValue(m),
      originalData: m
    })).filter((m) => ep(m.domainValue, h));
    if (this.pointsWithinLine && f.length === this.pointsWithinLine.length && f.map((m) => m.domainValue).join() === this.pointsWithinLine.map((m) => m.domainValue).join())
      return this.pointsWithinLine = f, this.services.events.dispatchEvent(T.Tooltip.MOVE, {
        mousePosition: [e, n]
      });
    this.pointsWithinLine = f;
    const g = this.pointsWithinLine.reduce((m, y) => {
      if (m.length === 0)
        return m.push(y), m;
      const S = m[0].domainValue, v = Math.abs(h - y.domainValue), E = Math.abs(h - S);
      return v > E || (v < E ? m = [y] : m.push(y)), m;
    }, []);
    if (g.length > 0) {
      const m = g.map((E) => E.originalData).filter((E) => {
        const x = this.services.cartesianScales.getRangeIdentifier(E), b = E[x];
        return b != null;
      }), y = g.map(
        (E) => E.domainValue
      ), S = p.filter((E) => {
        const x = this.services.cartesianScales.getDomainValue(E);
        return y.includes(x);
      });
      this.elementsToHighlight && this.elementsToHighlight.size() > 0 && !lo(this.elementsToHighlight, S) && this.hideRuler(), S.dispatch("mouseover"), this.elementsToHighlight = S, this.services.events.dispatchEvent(T.Tooltip.SHOW, {
        event: t,
        mousePosition: [e, n],
        hoveredElement: u,
        data: this.formatTooltipData(m)
      }), d.attr("opacity", 1);
      const v = g[0];
      a === "horizontal" ? u.attr("x1", l).attr("x2", c).attr("y1", v.domainValue).attr("y2", v.domainValue) : u.attr("y1", l).attr("y2", c).attr("x1", v.domainValue).attr("x2", v.domainValue);
    } else
      this.hideRuler();
  }
  hideRuler() {
    const t = this.parent, e = I.appendOrSelect(t, "g.ruler");
    t.selectAll("[role=graphics-symbol]").dispatch("mouseout"), this.services.events.dispatchEvent(T.Tooltip.HIDE), e.attr("opacity", 0);
  }
  /**
   * Adds the listener on the X grid to trigger multiple point tooltips along the x axis.
   */
  addBackdropEventListeners() {
    this.isEventListenerAdded = !0;
    const t = this, e = this.services.domUtils.getHolder(), n = this.model.getDisplayData();
    let s = function(a) {
      const r = nn(a, t.parent.node());
      t.showRuler(a, r);
    };
    if (n.length > 100) {
      const a = n.length % 50 * 12.5;
      s = dl(
        function(r) {
          const { mousePosition: o } = this;
          t.showRuler(r, o);
        },
        a,
        e
      );
    }
    this.backdrop.on("mousemove mouseover", s).on("mouseout", this.hideRuler.bind(this));
  }
  drawBackdrop() {
    const t = this.parent;
    this.backdrop = I.appendOrSelect(t, "svg.chart-grid-backdrop");
  }
}
class Ji extends dt {
  constructor() {
    super(...arguments), this.type = "scatter", this.renderType = at.SVG, this.handleChartHolderOnHover = () => {
      if (!this.parent) throw new Error("Parent not defined");
      this.parent.selectAll("circle.dot").transition("chart-holder-hover-scatter").call(
        (t) => {
          var e;
          return (e = this.services.transitions) == null ? void 0 : e.setupTransition({
            transition: t,
            name: "chart-holder-hover-scatter"
          });
        }
      ).attr("opacity", 1);
    }, this.handleChartHolderOnMouseOut = () => {
      if (!this.parent) throw new Error("Parent not defined");
      this.parent.selectAll("circle.dot").transition("chart-holder-mouseout-scatter").call(
        (t) => {
          var e;
          return (e = this.services.transitions) == null ? void 0 : e.setupTransition({
            transition: t,
            name: "chart-holder-mouseout-scatter"
          });
        }
      ).attr("opacity", 0);
    }, this.handleLegendOnHover = (t) => {
      const { hoveredElement: e } = t.detail, { groupMapsTo: n } = this.getOptions().data;
      if (!this.parent) throw new Error("Parent not defined");
      this.parent.selectAll("circle.dot").transition("legend-hover-scatter").call(
        (s) => {
          var a;
          return (a = this.services.transitions) == null ? void 0 : a.setupTransition({
            transition: s,
            name: "legend-hover-scatter"
          });
        }
      ).attr("opacity", (s) => s[n] !== e.datum().name ? 0.3 : 1);
    }, this.handleLegendMouseOut = () => {
      if (!this.parent) throw new Error("Parent not defined");
      this.parent.selectAll("circle.dot").transition("legend-mouseout-scatter").call(
        (t) => {
          var e;
          return (e = this.services.transitions) == null ? void 0 : e.setupTransition({
            transition: t,
            name: "legend-mouseout-scatter"
          });
        }
      ).attr("opacity", 1);
    };
  }
  init() {
    const { events: t } = this.services;
    if (!t) throw new Error("Services events are undefined.");
    t.addEventListener(
      T.Legend.ITEM_HOVER,
      this.handleLegendOnHover
    ), t.addEventListener(T.Legend.ITEM_MOUSEOUT, this.handleLegendMouseOut);
    const { fadeInOnChartHolderMouseover: e } = this.configs;
    e && (t.addEventListener(T.Chart.MOUSEOVER, this.handleChartHolderOnHover), t.addEventListener(T.Chart.MOUSEOUT, this.handleChartHolderOnMouseOut));
  }
  filterBasedOnZoomDomain(t) {
    const { cartesianScales: e } = this.services;
    if (!e) throw new Error("Services cartesianScales are undefined.");
    const n = e.getDomainIdentifier(t), s = this.model.get("zoomDomain");
    return s !== void 0 ? t.filter(
      (a) => a[n].getTime() >= s[0].getTime() && a[n].getTime() <= s[1].getTime()
    ) : t;
  }
  getScatterData() {
    const t = this.getOptions(), { stacked: e } = this.configs;
    let n;
    if (e) {
      const s = Object.keys(t.axes).some((a) => t.axes[a].percentage);
      n = this.model.getStackedData({
        groups: this.configs.groups,
        percentage: s
      });
    } else {
      const { cartesianScales: s } = this.services;
      if (!s) throw new Error("Services cartesianScales are undefined.");
      n = this.model.getDisplayData(this.configs.groups).filter((a) => {
        const r = s.getRangeIdentifier(a);
        return a[r] !== void 0 && a[r] !== null;
      });
    }
    return this.filterBasedOnZoomDomain(n);
  }
  render(t) {
    if (!(L(this.getOptions(), "points", "enabled") || L(this.getOptions(), "bubble", "enabled")))
      return;
    const n = this.getComponentContainer({ ariaLabel: "scatter points", withinChartClip: !0 }), s = this.getOptions(), { groupMapsTo: a } = s.data, { cartesianScales: r } = this.services;
    if (!r) throw new Error("Services cartesianScales are undefined.");
    const o = r.getDomainIdentifier(), c = n.selectAll("circle.dot").data(
      this.getScatterData(),
      (d) => `${d[a]}-${d[o]}`
    );
    c.exit().attr("opacity", 0).remove();
    const h = c.enter().append("circle").classed("dot", !0).attr("opacity", 0).merge(c);
    this.styleCircles(h, t), this.addEventListeners();
  }
  // A value is an anomaly if is above all defined domain and range thresholds
  isDatapointThresholdAnomaly(t) {
    const { handleThresholds: e } = this.configs;
    if (!e)
      return !1;
    const { cartesianScales: n } = this.services;
    if (!n) throw new Error("Cartesian scales service is undefined");
    const s = n.getOrientation(), [a, r] = Ee(
      n.getHighestDomainThreshold(),
      n.getHighestRangeThreshold(),
      s
    ), [o, c] = Ee(
      (d) => n.getDomainValue(d),
      (d) => n.getRangeValue(d),
      s
    ), l = o(t), h = c(t);
    return r && a ? h <= r.scaleValue && l >= a.scaleValue : r ? h <= r.scaleValue : a ? l >= a.scaleValue : !1;
  }
  styleCircles(t, e) {
    const n = this.getOptions(), { filled: s, fillOpacity: a } = n.points, { cartesianScales: r } = this.services;
    if (!r) throw new Error("Cartesian scales service is undefined");
    const { groupMapsTo: o } = n.data, c = (p) => r.getDomainValue(p), l = (p) => r.getRangeValue(p), [h, d] = Ee(
      c,
      l,
      r.getOrientation()
    ), { fadeInOnChartHolderMouseover: u } = this.configs;
    t.raise().classed("dot", !0).attr("class", (p) => {
      const f = r.getDomainIdentifier(p), m = this.model.getIsFilled(p[o], p[f], p, s) ? [nt.FILL, nt.STROKE] : [nt.STROKE];
      return this.model.getColorClassName({
        classNameTypes: m,
        dataGroupName: p[o],
        originalClassName: "dot"
      }) || "";
    }).classed("threshold-anomaly", (p) => this.isDatapointThresholdAnomaly(p)).classed("filled", (p) => {
      const f = r.getDomainIdentifier(p);
      return this.model.getIsFilled(p[o], p[f], p, s);
    }).classed("unfilled", (p) => {
      const f = r.getDomainIdentifier(p);
      return !this.model.getIsFilled(p[o], p[f], p, s);
    }).transition().call(
      (p) => {
        var f;
        return (f = this.services.transitions) == null ? void 0 : f.setupTransition({
          transition: p,
          name: "scatter-update-enter",
          animate: e
        });
      }
    ).attr("cx", h).attr("cy", d).attr("r", n.points.radius).style("fill", (p) => {
      const f = r.getDomainIdentifier(p);
      if (this.model.getIsFilled(p[o], p[f], p, s))
        return this.model.getFillColor(p[o], p[f], p);
    }).style("stroke", (p) => {
      const f = r.getDomainIdentifier(p);
      return this.model.getStrokeColor(p[o], p[f], p);
    }).attr("fill-opacity", s ? a : 1).attr("opacity", u ? 0 : 1).attr("role", lt.GRAPHICS_SYMBOL).attr("aria-roledescription", "point").attr("aria-label", (p) => {
      const f = r.getRangeIdentifier(p);
      return p[f];
    }), this.addEventListeners();
  }
  // Extended in bubble graphs
  // eslint-disable-next-line @typescript-eslint/ban-ts-comment
  // @ts-ignore
  // eslint-disable-next-line @typescript-eslint/no-unused-vars
  getTooltipAdditionalItems(t) {
    return null;
  }
  addEventListeners() {
    const t = this, { groupMapsTo: e } = t.getOptions().data;
    if (!this.parent) throw new Error("Parent not defined");
    this.parent.selectAll("circle").on("mouseover", function(n, s) {
      var r, o;
      const a = D(this);
      a.classed("hovered", !0).attr(
        "class",
        (c) => t.model.getColorClassName({
          classNameTypes: [nt.FILL],
          dataGroupName: c[e],
          originalClassName: a.attr("class")
        })
      ).style("fill", (c) => {
        var h;
        const l = (h = t.services.cartesianScales) == null ? void 0 : h.getDomainIdentifier(c);
        return t.model.getFillColor(c[e], c[l], c);
      }).classed("unfilled", !1), (r = t.services.events) == null || r.dispatchEvent(T.Tooltip.SHOW, {
        event: n,
        hoveredElement: a,
        data: [s],
        additionalItems: t.getTooltipAdditionalItems(s)
      }), (o = t.services.events) == null || o.dispatchEvent(T.Scatter.SCATTER_MOUSEOVER, {
        event: n,
        element: a,
        datum: s
      });
    }).on("mousemove", function(n, s) {
      var r, o;
      const a = D(this);
      (r = t.services.events) == null || r.dispatchEvent(T.Scatter.SCATTER_MOUSEMOVE, {
        event: n,
        element: a,
        datum: s
      }), (o = t.services.events) == null || o.dispatchEvent(T.Tooltip.MOVE, {
        event: n
      });
    }).on("click", function(n, s) {
      var a;
      (a = t.services.events) == null || a.dispatchEvent(T.Scatter.SCATTER_CLICK, {
        event: n,
        element: D(this),
        datum: s
      });
    }).on("mouseout", function(n, s) {
      var r, o, c;
      const a = D(this);
      if (a.classed("hovered", !1), !t.configs.filled) {
        const { filled: l } = t.getOptions().points, h = (r = t.services.cartesianScales) == null ? void 0 : r.getDomainIdentifier(s), d = t.model.getIsFilled(
          s[e],
          s[h],
          s,
          l
        );
        a.classed("unfilled", !d).style("fill", (u) => d || l ? t.model.getFillColor(u[e], u[h], u) : null);
      }
      (o = t.services.events) == null || o.dispatchEvent(T.Scatter.SCATTER_MOUSEOUT, {
        event: n,
        element: a,
        datum: s
      }), (c = t.services.events) == null || c.dispatchEvent(T.Tooltip.HIDE, {
        hoveredElement: a
      });
    });
  }
  destroy() {
    var e;
    (e = this.parent) == null || e.selectAll("circle").on("mousemove", null).on("mouseout", null);
    const { events: t } = this.services;
    if (!t) throw new Error("Services events undefined");
    t.removeEventListener(
      T.Legend.ITEM_HOVER,
      this.handleLegendOnHover
    ), t.removeEventListener(T.Legend.ITEM_MOUSEOUT, this.handleLegendMouseOut), t.removeEventListener(T.Chart.MOUSEOVER, this.handleChartHolderOnHover), t.removeEventListener(T.Chart.MOUSEOUT, this.handleChartHolderOnMouseOut);
  }
}
class qo extends dt {
  constructor(t, e, n) {
    super(t, e, n), this.type = "axes", this.renderType = at.SVG, this.truncation = {
      [J.LEFT]: !1,
      [J.RIGHT]: !1,
      [J.TOP]: !1,
      [J.BOTTOM]: !1
    }, n && (this.configs = n), this.margins = this.configs.margins;
  }
  render(t = !0) {
    const { position: e } = this.configs, n = this.getOptions(), s = L(n, "axes", e, "visible"), a = this.getComponentContainer({
      ariaLabel: "axes"
    }), { width: r, height: o } = I.getSVGElementSize(a, {
      useAttrs: !0
    }), c = I.appendOrSelect(a, `g.axis.${e}`);
    let l, h;
    if (e === J.BOTTOM || e === J.TOP ? (l = this.configs.axes[J.LEFT] ? this.margins.left : 0, h = this.configs.axes[J.RIGHT] ? r - this.margins.right : r) : (l = o - this.margins.bottom, h = this.margins.top), !this.services.cartesianScales) throw new Error("Services cartesianScales undefined");
    const d = this.services.cartesianScales.getScaleByPosition(e);
    this.scaleType === kt.LABELS || this.scaleType === kt.LABELS_RATIO ? d.rangeRound([l, h]) : d.range([l, h]);
    let u;
    switch (e) {
      case J.LEFT:
        u = uo;
        break;
      case J.BOTTOM:
        u = Ui;
        break;
      case J.RIGHT:
        u = Pc;
        break;
      case J.TOP:
        u = Nc;
        break;
    }
    c.attr("aria-label", `${e} axis`);
    const p = !c.select("g.ticks").empty();
    let f = I.appendOrSelect(c, "g.ticks");
    p || (f.attr("role", `${lt.GRAPHICS_OBJECT} ${lt.GROUP}`), f.attr("aria-label", `${e} ticks`));
    const g = I.appendOrSelect(c, "g.ticks.invisible").style("opacity", "0").style("pointer-events", "none").attr("aria-hidden", !0).attr("aria-label", `invisible ${e} ticks`), m = L(n, "axes", e), y = this.scaleType === kt.TIME || m.scaleType === kt.TIME, S = e === J.LEFT || e === J.RIGHT, v = this.model.get("zoomDomain");
    if (v && y && !S && d.domain(v), !s) {
      f.attr("aria-hidden", !0);
      return;
    }
    const E = L(m, "scaleType"), x = L(n, "data", "loading"), b = L(m, "ticks", "number"), _ = L(m, "ticks", "values"), k = L(m, "truncation", "type"), G = L(m, "truncation", "threshold"), R = L(m, "truncation", "numCharacter"), A = b !== null, H = L(n, "timeScale"), N = I.appendOrSelect(g, "g.tick"), M = I.appendOrSelect(N, "text").text("0"), O = I.getSVGElementSize(M.node(), {
      useBBox: !0
    }).height;
    N.remove();
    const P = this.scaleType || m.scaleType || kt.LINEAR, $ = u(d).tickSizeOuter(0);
    if (d.ticks) {
      let Y;
      if (A ? Y = b : (Y = je.ticks.number, S && (Y = this.getNumberOfFittingTicks(
        o,
        O,
        je.ticks.verticalSpaceRatio
      ))), d.ticks().length === 1 && d.ticks()[0] === 0 && (Y = 0), $.ticks(Y), y)
        if (!d.ticks(Y).length)
          $.tickValues([]);
        else {
          const K = L(n, "timeScale", "addSpaceOnEdges"), ot = L(n, "axes", e, "domain"), ct = d.copy();
          K && !ot && ct.nice(Y);
          const st = ct.ticks(Y);
          K && st.length > 2 && !ot && (st.splice(st.length - 1, 1), st.splice(0, 1)), $.tickValues(st);
        }
    }
    let C;
    const V = L(m, "ticks", "formatter"), { code: q, number: X } = L(n, "locale");
    if (y) {
      const Y = ui(
        $.tickValues(),
        L(n, "timeScale", "timeInterval")
      );
      V === null ? C = (K, ot) => hi(K, ot, $.tickValues(), Y, H, n.locale) : C = (K, ot) => {
        const ct = hi(
          K,
          ot,
          $.tickValues(),
          Y,
          H,
          n.locale
        );
        return V(K, ot, ct);
      };
    } else
      V === null ? P === kt.LINEAR && (C = (Y) => X(Y, q)) : C = V;
    $.tickFormat(C);
    const [F, Z] = this.services.cartesianScales.getScaleByPosition(e).domain();
    let rt;
    if (_) {
      if (y)
        _.forEach((Y, K) => {
          Y.getTime === void 0 && (_[K] = new Date(Y));
        }), rt = _.filter((Y) => {
          const K = Y.getTime();
          return K >= new Date(F).getTime() && K <= new Date(Z).getTime();
        });
      else if (E === kt.LABELS) {
        const Y = this.services.cartesianScales.getScaleByPosition(e).domain();
        rt = _.filter((K) => Y.includes(K));
      } else
        rt = _.filter(
          (Y) => Y >= F && Y <= Z
        );
      $.tickValues(rt);
    }
    switch (e) {
      case J.LEFT:
        f.attr("transform", `translate(${this.margins.left}, 0)`);
        break;
      case J.BOTTOM:
        f.attr("transform", `translate(0, ${o - this.margins.bottom})`);
        break;
      case J.RIGHT:
        f.attr("transform", `translate(${r - this.margins.right}, 0)`);
        break;
      case J.TOP:
        f.attr("transform", `translate(0, ${this.margins.top})`);
        break;
    }
    const j = this.model.isDataEmpty();
    if (m.title) {
      const Y = I.appendOrSelect(c, "text.axis-title").html(
        j || x ? "" : he(m.title)
      ), K = L(m, "titleOrientation");
      let ot;
      switch (e) {
        case J.LEFT:
          K === Ta.RIGHT ? Y.attr("transform", "rotate(90)").attr("y", 0).attr("x", d.range()[0] / 2).attr("dy", "-0.5em").style("text-anchor", "middle") : Y.attr("transform", "rotate(-90)").attr("y", 0).attr("x", -(d.range()[0] / 2)).attr("dy", "0.75em").style("text-anchor", "middle");
          break;
        case J.BOTTOM:
          Y.attr(
            "transform",
            `translate(${this.margins.left / 2 + d.range()[1] / 2}, ${o + 4})`
          ).style("text-anchor", "middle");
          break;
        case J.RIGHT:
          K === Ta.LEFT ? Y.attr("transform", "rotate(-90)").attr("y", r).attr("x", -(d.range()[0] / 2)).style("text-anchor", "middle") : Y.attr("transform", "rotate(90)").attr("y", -r).attr("x", d.range()[0] / 2).attr("dy", "0.75em").style("text-anchor", "middle");
          break;
        case J.TOP:
          ot = I.getSVGElementSize(Y, {
            useBBox: !0
          }).height, Y.attr(
            "transform",
            `translate(${this.margins.left / 2 + d.range()[1] / 2}, ${ot / 2})`
          ).style("text-anchor", "middle");
          break;
      }
    }
    if (y) {
      const Y = ui(
        $.tickValues(),
        L(n, "timeScale", "timeInterval")
      ), K = H.showDayName, ot = f;
      t && (f = f.transition().call(
        (st) => this.services.transitions.setupTransition({
          transition: st,
          name: "axis-update",
          animate: t
        })
      )), f = f.call($), ot.selectAll(".tick").data($.tickValues(), d).order().select("text").attr(
        "class",
        (st, it) => pl(st, it, $.tickValues(), Y, K) ? "tick-label--primary" : "tick-label"
      );
    } else
      !t || !p ? f = f.call($) : f = f.transition().call(
        (Y) => this.services.transitions.setupTransition({
          transition: Y,
          name: "axis-update",
          animate: t
        })
      ).call($);
    if (g.call($), e === J.BOTTOM || e === J.TOP) {
      let Y = !1;
      const K = L(m, "ticks", "rotation");
      if (K === Ps.ALWAYS)
        Y = !0;
      else if (K === Ps.NEVER)
        Y = !1;
      else if (!K || K === Ps.AUTO)
        if (d.step)
          Y = g.selectAll("g.tick text").nodes().some(
            (ct) => I.getSVGElementSize(ct, {
              useBBox: !0
            }).width >= d.step()
          );
        else {
          Y = !1;
          const ot = g.append("text").text("A"), ct = I.getSVGElementSize(ot.node(), {
            useBBox: !0
          }).width;
          let st;
          g.selectAll("g.tick").each(function() {
            const it = D(this), B = parseFloat(L(ge(this), "tx"));
            B !== null && st + it.text().length * ct * 0.8 >= B && (Y = !0), st = B;
          }), ot.remove();
        }
      Y ? (A || ($.ticks(
        this.getNumberOfFittingTicks(r, O, je.ticks.horizontalSpaceRatio)
      ), g.call($), f.call($)), c.selectAll("g.ticks g.tick text").attr("transform", "rotate(-45)").attr("text-anchor", e === J.TOP ? "start" : "end")) : c.selectAll("g.ticks g.tick text").attr("transform", null).attr("text-anchor", null);
    }
    if (x ? c.attr("opacity", 0) : c.attr("opacity", 1), f.selectAll("g.tick").attr("aria-label", (Y) => Y), g.selectAll("g.tick").attr("aria-label", (Y) => Y), k !== Ke.NONE && E === kt.LABELS && !_) {
      const Y = this.services.cartesianScales.getScaleDomain(e);
      if (Y.length > 0) {
        const K = a.select(`g.axis.${e} g.ticks g.tick`).html();
        c.selectAll("g.ticks g.tick").html(K);
        const ot = this;
        c.selectAll("g.tick text").data(Y).text(function(ct) {
          return ct.length > G ? (ot.truncation[e] = !0, wn(ct, k, R)) : ct;
        }), this.getInvisibleAxisRef().selectAll("g.tick text").data(Y).text(function(ct) {
          return ct.length > G ? wn(ct, k, R) : ct;
        }), c.selectAll("g.ticks").html(this.getInvisibleAxisRef().html()), c.selectAll("g.tick text").data(Y);
      }
    }
    this.addEventListeners();
  }
  addEventListeners() {
    const t = this.getComponentContainer(), { position: e } = this.configs, n = I.appendOrSelect(t, `g.axis.${e}`), s = this.getOptions(), a = L(s, "axes", e), r = L(a, "scaleType"), o = L(a, "truncation", "threshold"), c = this;
    n.selectAll("g.tick text").on("mouseover", function(l, h) {
      c.services.events.dispatchEvent(T.Axis.LABEL_MOUSEOVER, {
        event: l,
        element: D(this),
        datum: h
      }), r === kt.LABELS && h.length > o && c.services.events.dispatchEvent(T.Tooltip.SHOW, {
        event: l,
        hoveredElement: D(this),
        content: h
      });
    }).on("mousemove", function(l, h) {
      c.services.events.dispatchEvent(T.Axis.LABEL_MOUSEMOVE, {
        event: l,
        element: D(this),
        datum: h
      }), r === kt.LABELS && h.length > o && c.services.events.dispatchEvent(T.Tooltip.MOVE, {
        event: l
      });
    }).on("click", function(l, h) {
      c.services.events.dispatchEvent(T.Axis.LABEL_CLICK, {
        event: l,
        element: D(this),
        datum: h
      });
    }).on("mouseout", function(l, h) {
      c.services.events.dispatchEvent(T.Axis.LABEL_MOUSEOUT, {
        event: l,
        element: D(this),
        datum: h
      }), r === kt.LABELS && c.services.events.dispatchEvent(T.Tooltip.HIDE);
    });
  }
  getInvisibleAxisRef() {
    const { position: t } = this.configs;
    return this.getComponentContainer().select(`g.axis.${t} g.ticks.invisible`);
  }
  getTitleRef() {
    const { position: t } = this.configs;
    return this.getComponentContainer().select(`g.axis.${t} text.axis-title`);
  }
  getNumberOfFittingTicks(t, e, n) {
    const s = Math.floor(t / (e * n));
    return oo(s, 2, je.ticks.number);
  }
  destroy() {
    const t = this.getComponentContainer(), { position: e } = this.configs;
    I.appendOrSelect(t, `g.axis.${e}`).selectAll("g.tick text").on("mouseover", null).on("mousemove", null).on("mouseout", null);
  }
}
class np extends qo {
  constructor(t, e, n) {
    super(t, e, n);
  }
  render(t = !0) {
    super.render(t), super.destroy();
    const e = this.configs.position, n = this.getComponentContainer({
      ariaLabel: "axes"
    }), s = I.appendOrSelect(n, `g.axis.${e}`), a = this;
    s.selectAll("g.tick").each(function(r, o) {
      const c = D(this);
      c.classed("tick-hover", !0).attr("tabindex", o === 0 ? 0 : -1);
      const l = c.select("text"), { width: h, height: d } = I.getSVGElementSize(l, {
        useBBox: !0
      }), u = I.appendOrSelect(c, "rect.axis-holder");
      let p = 0, f = 0;
      switch (e) {
        case J.LEFT:
          p = -h + Number(l.attr("x")), f = -(d / 2);
          break;
        case J.RIGHT:
          p = Math.abs(Number(l.attr("x"))), f = -(d / 2);
          break;
        case J.TOP:
          p = -(h / 2), f = -d + Number(l.attr("y")) / 2, a.truncation[e] && (p = 0, u.attr("transform", "rotate(-45)"));
          break;
        case J.BOTTOM:
          p = -(h / 2), f = d / 2 - 2, a.truncation[e] && (p = -h, u.attr("transform", "rotate(-45)"));
          break;
      }
      u.attr("x", p - je.hover.rectanglePadding).attr("y", f).attr("width", h + je.hover.rectanglePadding * 2).attr("height", d).lower();
    }), this.addEventListeners();
  }
  addEventListeners() {
    const t = this.getComponentContainer(), { position: e } = this.configs, n = I.appendOrSelect(t, `g.axis.${e}`), s = this.getOptions(), a = L(s, "axes", e), r = L(a, "scaleType"), o = L(a, "truncation", "threshold"), c = this;
    n.selectAll("g.tick.tick-hover").on("mouseover", function(l) {
      const h = D(this).select("text"), d = h.datum();
      c.services.events.dispatchEvent(T.Axis.LABEL_MOUSEOVER, {
        event: l,
        element: h,
        datum: d
      }), r === kt.LABELS && d.length > o && c.services.events.dispatchEvent(T.Tooltip.SHOW, {
        event: l,
        element: h,
        datum: d
      });
    }).on("mousemove", function(l) {
      const h = D(this).select("text"), d = h.datum();
      c.services.events.dispatchEvent(T.Axis.LABEL_MOUSEMOVE, {
        event: l,
        element: h,
        datum: d
      }), c.services.events.dispatchEvent(T.Tooltip.MOVE, {
        event: l
      });
    }).on("click", function(l) {
      c.services.events.dispatchEvent(T.Axis.LABEL_CLICK, {
        event: l,
        element: D(this).select("text"),
        datum: D(this).select("text").datum()
      });
    }).on("mouseout", function(l) {
      c.services.events.dispatchEvent(T.Axis.LABEL_MOUSEOUT, {
        event: l,
        element: D(this).select("text"),
        datum: D(this).select("text").datum()
      }), r === kt.LABELS && c.services.events.dispatchEvent(T.Tooltip.HIDE);
    }).on("focus", function(l) {
      const h = { clientX: 0, clientY: 0 };
      if (l.target) {
        l.target.focus();
        const d = l.target.getBoundingClientRect();
        h.clientX = d.x, h.clientY = d.y;
      }
      c.services.events.dispatchEvent(T.Axis.LABEL_FOCUS, {
        event: { ...l, ...h },
        element: D(this),
        datum: D(this).select("text").datum()
      });
    }).on("blur", function(l) {
      c.services.events.dispatchEvent(T.Axis.LABEL_BLUR, {
        event: l,
        element: D(this),
        datum: D(this).select("text").datum()
      });
    }).on("keydown", function(l) {
      l.key && l.key === "Escape" && (c.services.events.dispatchEvent(T.Tooltip.HIDE), c.services.events.dispatchEvent(T.Axis.LABEL_BLUR, {
        event: l,
        element: D(this),
        datum: D(this).select("text").datum()
      })), e === J.LEFT || e === J.RIGHT ? l.key && l.key === "ArrowUp" ? c.goNext(this, l) : l.key && l.key === "ArrowDown" && c.goPrevious(this, l) : l.key && l.key === "ArrowLeft" ? c.goPrevious(this, l) : l.key && l.key === "ArrowRight" && c.goNext(this, l);
    });
  }
  // Focus on the next HTML element sibling
  goNext(t, e) {
    t.nextElementSibling && t.nextElementSibling.tagName !== "path" && t.nextElementSibling.dispatchEvent(new Event("focus")), e.preventDefault();
  }
  // Focus on the previous HTML element sibling
  goPrevious(t, e) {
    t.previousElementSibling && t.previousElementSibling.tagName !== "path" && t.previousElementSibling.dispatchEvent(new Event("focus")), e.preventDefault();
  }
  destroy() {
    const t = this.getComponentContainer(), { position: e } = this.configs;
    I.appendOrSelect(t, `g.axis.${e}`).selectAll("g.tick.tick-hover").on("mouseover", null).on("mousemove", null).on("mouseout", null).on("focus", null).on("blur", null);
  }
}
class vm extends dt {
  constructor() {
    super(...arguments), this.type = "2D-axes", this.renderType = at.SVG, this.children = {}, this.thresholds = [], this.margins = {
      top: 0,
      right: 0,
      bottom: 0,
      left: 0
    };
  }
  render(t = !1) {
    const e = {}, n = Object.keys(J), s = L(this.getOptions(), "axes");
    n.forEach((o) => {
      s[J[o]] && (e[J[o]] = !0);
    }), this.configs.axes = e, n.forEach((o) => {
      const c = J[o];
      if (this.configs.axes[c] && !this.children[c]) {
        const l = {
          position: c,
          axes: this.configs.axes,
          margins: this.margins
        }, h = this.model.axisFlavor === xl.DEFAULT ? new qo(this.model, this.services, l) : new np(this.model, this.services, l);
        h.setModel(this.model), h.setServices(this.services), h.setParent(this.parent), this.children[c] = h;
      }
    }), Object.keys(this.children).forEach((o) => {
      this.children[o].render(t);
    });
    const a = {};
    Object.keys(this.children).forEach((o) => {
      const c = this.children[o], l = c.configs.position, h = c.getInvisibleAxisRef(), { width: d, height: u } = I.getSVGElementSize(h, { useBBox: !0 });
      let p;
      switch (c.getTitleRef().empty() ? p = 0 : (p = I.getSVGElementSize(c.getTitleRef(), {
        useBBox: !0
      }).height, (l === J.LEFT || l === J.RIGHT) && (p += 5)), l) {
        case J.TOP:
          a.top = u + p;
          break;
        case J.BOTTOM:
          a.bottom = u + p;
          break;
        case J.LEFT:
          a.left = d + p;
          break;
        case J.RIGHT:
          a.right = d + p;
          break;
      }
    }), this.services.events.dispatchEvent(T.Axis.RENDER_COMPLETE), Object.keys(a).some(
      (o) => this.margins[o] !== a[o]
    ) && (this.margins = Object.assign(this.margins, a), this.model.set({ axesMargins: this.margins }, { skipUpdate: !0 }), this.services.events.dispatchEvent(T.ZoomBar.UPDATE), Object.keys(this.children).forEach((o) => {
      const c = this.children[o];
      c.margins = this.margins;
    }), this.render(!0));
  }
}
class sp extends dt {
  constructor() {
    super(...arguments), this.type = "skeleton";
  }
  // eslint-disable-next-line @typescript-eslint/ban-ts-comment
  // @ts-ignore
  // eslint-disable-next-line @typescript-eslint/no-unused-vars
  render(t = !0) {
    const e = L(this.getOptions(), "data", "loading");
    e ? this.renderSkeleton(e) : this.removeSkeleton();
  }
  renderSkeleton(t) {
    if (this.configs.skeleton === Bn.GRID)
      this.renderGridSkeleton(t);
    else if (this.configs.skeleton === Bn.VERT_OR_HORIZ)
      this.renderVertOrHorizSkeleton(t);
    else if (this.configs.skeleton === Bn.PIE)
      this.renderPieSkeleton(t);
    else if (this.configs.skeleton === Bn.DONUT)
      this.renderDonutSkeleton(t);
    else
      throw new Error(`"${this.configs.skeleton}" is not a valid Skeleton type.`);
  }
  renderGridSkeleton(t) {
    this.setScales(), this.drawBackdrop(t), this.drawXGrid(t), this.drawYGrid(t), t && this.setShimmerEffect("shimmer-lines");
  }
  renderVertOrHorizSkeleton(t) {
    const e = this.services.cartesianScales.getOrientation();
    this.setScales(), this.drawBackdrop(t), e === Xt.VERTICAL && this.drawYGrid(t), e === Xt.HORIZONTAL && this.drawXGrid(t), this.setShimmerEffect("shimmer-lines");
  }
  renderPieSkeleton(t) {
    const e = this.computeOuterRadius();
    this.drawRing(e, 0, t), t && this.setShimmerEffect("shimmer-areas");
  }
  renderDonutSkeleton(t) {
    const e = this.computeOuterRadius(), n = this.computeInnerRadius();
    this.drawRing(e, n, t), t && this.setShimmerEffect("shimmer-areas");
  }
  setScales() {
    const t = this.services.cartesianScales.getMainXScale().range(), e = this.services.cartesianScales.getMainYScale().range();
    this.xScale = Re().domain([0, 1]).range(t), this.yScale = Re().domain([0, 1]).range(e);
  }
  drawBackdrop(t) {
    const e = this.parent, { width: n, height: s } = I.getSVGElementSize(e, {
      useAttrs: !0
    });
    this.backdrop = I.appendOrSelect(e, "svg.chart-skeleton.DAII").attr("width", n).attr("height", s);
    const a = I.appendOrSelect(this.backdrop, "rect.chart-skeleton-backdrop");
    a.attr("width", "100%").attr("height", "100%");
    const [r] = this.xScale.range(), [, o] = this.yScale.range();
    this.backdrop.merge(a).attr("x", r).attr("y", o), a.classed("shimmer-effect-lines", t).classed("empty-state-lines", !t).style(
      "stroke",
      t ? `url(#${this.services.domUtils.generateElementIDString("shimmer-lines")})` : null
    );
  }
  drawXGrid(t) {
    const e = +this.backdrop.attr("width"), n = L(this.getOptions(), "grid", "x", "numberOfTicks"), s = this.xScale.ticks(n).map((o) => o * e), a = I.appendOrSelect(this.backdrop, "g.x.skeleton"), r = a.selectAll("line").data(s);
    r.enter().append("line").merge(r).attr("x1", (o) => o).attr("x2", (o) => o).attr("y1", 0).attr("y2", "100%"), a.selectAll("line").classed("shimmer-effect-lines", t).classed("empty-state-lines", !t).style(
      "stroke",
      t ? `url(#${this.services.domUtils.generateElementIDString("shimmer-lines")})` : null
    );
  }
  drawYGrid(t) {
    const e = +this.backdrop.attr("height"), n = this.backdrop.attr("width"), s = L(this.getOptions(), "grid", "y", "numberOfTicks"), a = this.xScale.ticks(s).map((c) => c * e), r = I.appendOrSelect(this.backdrop, "g.y.skeleton"), o = r.selectAll("line").data(a);
    o.enter().append("line").merge(o).attr("x1", 0).attr("x2", n).attr("y1", (c) => c).attr("y2", (c) => c), r.selectAll("line").classed("shimmer-effect-lines", t).classed("empty-state-lines", !t).style(
      "stroke",
      t ? `url(#${this.services.domUtils.generateElementIDString("shimmer-lines")})` : null
    );
  }
  drawRing(t, e, n = !0) {
    const s = this.parent, { width: a, height: r } = I.getSVGElementSize(s, {
      useAttrs: !0
    }), o = I.appendOrSelect(s, "svg.chart-skeleton").attr("width", a).attr("height", r), c = e === 0 ? "pie" : "donut", l = L(this.getOptions(), c, "alignment");
    I.appendOrSelect(o, "rect.chart-skeleton-area-container").attr("width", a).attr("height", r).attr("fill", "none");
    const h = In().innerRadius(e).outerRadius(t).startAngle(0).endAngle(Math.PI * 2), d = t + Math.abs(Et.radiusOffset), u = t + (Math.min(a, r) - t * 2) / 2, p = I.appendOrSelect(o, "path").attr("class", "skeleton-area-shape").attr("transform", `translate(${d}, ${u})`).attr("d", h).classed("shimmer-effect-areas", n).classed("empty-state-areas", !n).style(
      "fill",
      n ? `url(#${this.services.domUtils.generateElementIDString("shimmer-areas")})` : null
    );
    let f = t + Et.xOffset;
    l === te.CENTER ? f = a / 2 : l === te.RIGHT && (f = a - t - Et.xOffset);
    const g = t + Et.yOffset;
    p.attr("transform", `translate(${f}, ${g})`);
  }
  // same logic in pie
  computeOuterRadius() {
    const { width: t, height: e } = I.getSVGElementSize(this.parent, {
      useAttrs: !0
    });
    return Math.min(t, e) / 2 + Et.radiusOffset;
  }
  // same logic in donut
  computeInnerRadius() {
    return this.computeOuterRadius() * (3 / 4);
  }
  setShimmerEffect(t) {
    const a = "stop-bg-shimmer", r = "stop-shimmer", o = this.parent.select(".chart-skeleton"), { width: c } = I.getSVGElementSize(this.parent, {
      useAttrs: !0
    }), l = 0, h = c, d = I.appendOrSelect(o, "defs").lower(), u = I.appendOrSelect(d, "linearGradient").attr("id", this.services.domUtils.generateElementIDString(t)).attr("class", t).attr("x1", l - 3 * 0.2 * c).attr("x2", h).attr("y1", 0).attr("y2", 0).attr("gradientUnits", "userSpaceOnUse").attr("gradientTransform", "translate(0, 0)"), p = `
			<stop class="${a}" offset="${l}"></stop>
			<stop class="${r}" offset="${l + 0.2}"></stop>
			<stop class="${a}" offset="${l + 2 * 0.2}"></stop>
		`;
    u.html(p), f();
    function f() {
      u.attr("gradientTransform", `translate(${l - 3 * 0.2 * c}, 0)`).transition().duration(2e3).delay(1e3).ease(Hc).attr("gradientTransform", `translate(${h + 3 * 0.2 * c}, 0)`).on("end", f);
    }
  }
  removeSkeleton() {
    this.parent.select(".chart-skeleton").remove();
  }
}
class ym extends dt {
  constructor() {
    super(...arguments), this.type = "boxplot", this.renderType = at.SVG;
  }
  render(t) {
    const e = this.getComponentContainer({ ariaLabel: "box plots", withinChartClip: !0 }), n = this.getOptions(), { groupMapsTo: s } = n.data, a = this.model.getDataGroupNames(), r = this.services.cartesianScales.getMainXScale(), o = this.services.cartesianScales.getMainYScale(), [c, l] = r.range(), [h, d] = o.range(), u = l - c, p = h - d;
    if (u === 0)
      return;
    const { cartesianScales: f } = this.services, g = f.getOrientation(), m = g === Xt.VERTICAL, [y, S] = Ee(
      (A) => this.services.cartesianScales.getDomainValue(A),
      (A) => this.services.cartesianScales.getRangeValue(A),
      g
    ), v = Math.floor((m ? u : p) / a.length), E = Math.min(v / 2, 16), x = this.model.getBoxplotData(), b = e.selectAll(".box-group").data(x);
    b.exit().remove();
    const _ = b.enter().append("g").attr("class", "box-group"), k = b.merge(_);
    _.append("path").merge(b.select("path.vertical-line.start")).attr(
      "class",
      () => this.model.getColorClassName({
        classNameTypes: [nt.STROKE],
        originalClassName: "vertical-line start"
      })
    ).attr("stroke-width", qt.strokeWidth.default).attr("fill", "none").transition().call(
      (A) => this.services.transitions.setupTransition({
        transition: A,
        name: "boxplot-update-verticalstartline",
        animate: t
      })
    ).attr("d", (A) => {
      const H = f.getDomainValue(A[s]), N = H, M = f.getRangeValue(A.whiskers.min), O = f.getRangeValue(A.quartiles.q_25);
      return Gt({ x0: H, x1: N, y0: M, y1: O }, g);
    }), _.append("path").merge(b.select("path.vertical-line.end")).attr(
      "class",
      () => this.model.getColorClassName({
        classNameTypes: [nt.STROKE],
        originalClassName: "vertical-line end"
      })
    ).attr("stroke-width", qt.strokeWidth.default).attr("fill", "none").transition().call(
      (A) => this.services.transitions.setupTransition({
        transition: A,
        name: "boxplot-update-verticalendline",
        animate: t
      })
    ).attr("d", (A) => {
      const H = f.getDomainValue(A[s]), N = H, M = f.getRangeValue(A.whiskers.max), O = f.getRangeValue(A.quartiles.q_75);
      return Gt({ x0: H, x1: N, y0: M, y1: O }, g);
    }), _.append("path").merge(b.select("path.box")).attr(
      "class",
      () => this.model.getColorClassName({
        classNameTypes: [nt.FILL, nt.STROKE],
        originalClassName: "box"
      })
    ).attr("fill-opacity", qt.box.opacity.default).attr("stroke-width", qt.strokeWidth.default).attr("role", lt.GRAPHICS_SYMBOL).attr("aria-roledescription", "box").attr("aria-label", (A) => A[s]).transition().call(
      (A) => this.services.transitions.setupTransition({
        transition: A,
        name: "boxplot-update-quartiles",
        animate: t
      })
    ).attr("d", (A) => {
      const H = f.getDomainValue(A[s]) - E / 2, N = H + E, M = f.getRangeValue(
        Math[m ? "max" : "min"](A.quartiles.q_75, A.quartiles.q_25)
      ), O = M + Math.abs(
        f.getRangeValue(A.quartiles.q_75) - f.getRangeValue(A.quartiles.q_25)
      );
      return Gt({ x0: H, x1: N, y0: M, y1: O }, g);
    }), _.append("path").merge(b.select("path.highlight-area")).attr("class", "highlight-area").attr("opacity", 0).attr("d", (A) => {
      const H = f.getDomainValue(A[s]) - E / 2, N = H + E, M = f.getRangeValue(A.whiskers.min), O = f.getRangeValue(A.whiskers.max);
      return Gt({ x0: H, x1: N, y0: M, y1: O }, g);
    }), _.append("path").merge(b.select("path.whisker.start")).attr(
      "class",
      () => this.model.getColorClassName({
        classNameTypes: [nt.STROKE],
        originalClassName: "whisker start"
      })
    ).attr("stroke-width", qt.strokeWidth.thicker).attr("fill", "none").transition().call(
      (A) => this.services.transitions.setupTransition({
        transition: A,
        name: "boxplot-update-startingwhisker",
        animate: t
      })
    ).attr("d", (A) => {
      const H = f.getDomainValue(A[s]) - E / 4, N = H + E / 2, M = f.getRangeValue(A.whiskers.min), O = f.getRangeValue(A.whiskers.min);
      return Gt({ x0: H, x1: N, y0: M, y1: O }, g);
    }), _.append("path").merge(b.select("path.median")).attr("fill", "none").attr(
      "class",
      () => this.model.getColorClassName({
        classNameTypes: [nt.STROKE],
        originalClassName: "median"
      })
    ).attr("stroke-width", 2).transition().call(
      (A) => this.services.transitions.setupTransition({
        transition: A,
        name: "boxplot-update-median",
        animate: t
      })
    ).attr("d", (A) => {
      const H = f.getDomainValue(A[s]) - E / 2, N = H + E, M = f.getRangeValue(A.quartiles.q_50);
      return Gt({ x0: H, x1: N, y0: M, y1: M }, g);
    }), _.append("path").merge(b.select("path.whisker.end")).attr(
      "class",
      () => this.model.getColorClassName({
        classNameTypes: [nt.STROKE],
        originalClassName: "whisker end"
      })
    ).attr("stroke-width", qt.strokeWidth.thicker).attr("fill", "none").transition().call(
      (A) => this.services.transitions.setupTransition({
        transition: A,
        name: "boxplot-update-endingwhisker",
        animate: t
      })
    ).attr("d", (A) => {
      const H = f.getDomainValue(A[s]) - E / 4, N = H + E / 2, M = f.getRangeValue(A.whiskers.max), O = f.getRangeValue(A.whiskers.max);
      return Gt({ x0: H, x1: N, y0: M, y1: O }, g);
    });
    const G = k.selectAll("circle.outlier").data(
      (A) => A.outliers.map((H) => ({
        min: A.whiskers.min,
        max: A.whiskers.max,
        [s]: A[s],
        value: H
      }))
    );
    G.exit().remove();
    const R = G.enter().append("circle");
    G.merge(R).attr("r", qt.circle.radius).attr(
      "class",
      () => this.model.getColorClassName({
        classNameTypes: [nt.FILL, nt.STROKE],
        originalClassName: "outlier"
      })
    ).attr("fill-opacity", qt.circle.opacity.default).attr("cx", y).transition().call(
      (A) => this.services.transitions.setupTransition({
        transition: A,
        name: "boxplot-update-circles",
        animate: t
      })
    ).attr("cy", S), this.addBoxEventListeners(), this.addCircleEventListeners();
  }
  addBoxEventListeners() {
    const t = this, e = this.getOptions(), { groupMapsTo: n } = e.data;
    this.parent.selectAll("path.highlight-area").on("mouseover", function(s, a) {
      const r = D(this);
      D(this.parentNode).select("path.box").classed("hovered", !0).attr("fill-opacity", qt.box.opacity.hovered), t.services.events.dispatchEvent(T.Tooltip.SHOW, {
        event: s,
        hoveredElement: r,
        items: [
          {
            label: L(e, "locale", "translations", "group") || L(e, "tooltip", "groupLabel") || "Group",
            value: a[n],
            class: t.model.getColorClassName({
              classNameTypes: [nt.TOOLTIP]
            })
          },
          {
            label: "Minimum",
            value: a.whiskers.min
          },
          {
            label: "Q1",
            value: a.quartiles.q_25
          },
          {
            label: "Median",
            value: a.quartiles.q_50
          },
          {
            label: "Q3",
            value: a.quartiles.q_75
          },
          {
            label: "Maximum",
            value: a.whiskers.max
          },
          {
            label: "IQR",
            value: a.quartiles.q_75 - a.quartiles.q_25
          }
        ]
      }), t.services.events.dispatchEvent(T.Boxplot.BOX_MOUSEOVER, {
        event: s,
        element: r,
        datum: a
      });
    }).on("mousemove", function(s, a) {
      const r = D(this);
      t.services.events.dispatchEvent(T.Boxplot.BOX_MOUSEMOVE, {
        event: s,
        element: r,
        datum: a
      }), t.services.events.dispatchEvent(T.Tooltip.MOVE, {
        event: s
      });
    }).on("click", function(s, a) {
      t.services.events.dispatchEvent(T.Boxplot.BOX_CLICK, {
        event: s,
        element: D(this),
        datum: a
      });
    }).on("mouseout", function(s, a) {
      const r = D(this);
      D(this.parentNode).select("path.box").classed("hovered", !1).attr("fill-opacity", qt.box.opacity.default), t.services.events.dispatchEvent(T.Boxplot.BOX_MOUSEOUT, {
        event: s,
        element: r,
        datum: a
      }), t.services.events.dispatchEvent(T.Tooltip.HIDE, {
        hoveredElement: r
      });
    });
  }
  addCircleEventListeners() {
    const t = this, e = this.getOptions(), { groupMapsTo: n } = e.data, s = this.services.cartesianScales.getRangeIdentifier();
    this.parent.selectAll("circle").on("mouseover", function(a, r) {
      const o = D(this);
      o.classed("hovered", !0).attr("fill-opacity", qt.circle.opacity.hovered).classed("unfilled", !1), t.services.events.dispatchEvent(T.Tooltip.SHOW, {
        event: a,
        hoveredElement: o,
        items: [
          {
            label: L(e, "locale", "translations", "group") || L(e, "tooltip", "groupLabel") || "Group",
            value: r[n],
            class: t.model.getColorClassName({
              classNameTypes: [nt.TOOLTIP]
            })
          },
          {
            label: "Outlier",
            value: r[s]
          }
        ]
      }), t.services.events.dispatchEvent(T.Boxplot.OUTLIER_MOUSEOVER, {
        event: a,
        element: o,
        datum: r
      });
    }).on("mousemove", function(a, r) {
      const o = D(this);
      t.services.events.dispatchEvent(T.Boxplot.OUTLIER_MOUSEMOVE, {
        event: a,
        element: o,
        datum: r
      }), t.services.events.dispatchEvent(T.Tooltip.MOVE, {
        event: a
      });
    }).on("click", function(a, r) {
      t.services.events.dispatchEvent(T.Boxplot.OUTLIER_CLICK, {
        event: a,
        element: D(this),
        datum: r
      });
    }).on("mouseout", function(a, r) {
      const o = D(this);
      o.classed("hovered", !1).attr("fill-opacity", qt.circle.opacity.default), t.services.events.dispatchEvent(T.Boxplot.OUTLIER_MOUSEOUT, {
        event: a,
        element: o,
        datum: r
      }), t.services.events.dispatchEvent(T.Tooltip.HIDE, {
        hoveredElement: o
      });
    });
  }
}
class Em extends dt {
  constructor() {
    super(...arguments), this.type = "zero-line", this.renderType = at.SVG;
  }
  render(t) {
    const e = this.services.cartesianScales.getRangeAxisPosition({
      groups: this.configs.groups
    }), n = this.services.cartesianScales.getScaleByPosition(e), [s, a] = n.domain(), r = s > 0 && a < 0 || s < 0 && a > 0, o = this.getComponentContainer({
      isPresentational: !0
    });
    if (!r) {
      o.selectAll("line.domain").remove();
      return;
    }
    const [c, l] = this.services.cartesianScales.getDomainScale().range();
    let h = +n(0) + 0.5;
    h || (h = n.range()[0]);
    const d = fl(
      {
        x0: c,
        x1: l,
        y0: h,
        y1: h
      },
      this.services.cartesianScales.getOrientation()
    );
    I.appendOrSelect(o, "line.domain").transition().call(
      (p) => this.services.transitions.setupTransition({
        transition: p,
        name: "zero-line-update",
        animate: t
      })
    ).attr("y1", d.y0).attr("y2", d.y1).attr("x1", d.x0).attr("x2", d.x1);
  }
}
class xm extends Ji {
  constructor() {
    super(...arguments), this.type = "bubble", this.renderType = at.SVG;
  }
  getRadiusScale(t) {
    const e = this.getOptions(), { radiusMapsTo: n } = e.bubble, s = t.data(), a = s.map((l) => l[n]).filter((l) => l), r = I.getHTMLElementSize(this.services.domUtils.getMainContainer()), o = a.length > 0, c = o ? Os(a) : [1, 1];
    return Re().domain(c).range(o ? e.bubble.radiusRange(r, s) : [4, 4]);
  }
  styleCircles(t, e) {
    const n = this.getOptions(), { radiusMapsTo: s } = n.bubble, a = this.getRadiusScale(t), { groupMapsTo: r } = n.data, { cartesianScales: o } = this.services, c = (u) => o.getDomainValue(u), l = (u) => o.getRangeValue(u), [h, d] = Ee(
      c,
      l,
      o.getOrientation()
    );
    t.raise().classed("dot", !0).attr("role", lt.GRAPHICS_SYMBOL).attr("aria-label", (u) => {
      const p = o.getRangeIdentifier(u);
      return u[p];
    }).transition().call(
      (u) => this.services.transitions.setupTransition({
        transition: u,
        name: "bubble-update-enter",
        animate: e
      })
    ).attr("cx", h).attr("cy", d).attr("r", (u) => a(u[s] || 1)).attr(
      "class",
      (u) => this.model.getColorClassName({
        classNameTypes: [nt.FILL, nt.STROKE],
        dataGroupName: u[r],
        originalClassName: "dot"
      })
    ).style("fill", (u) => {
      const p = this.services.cartesianScales.getDomainIdentifier(u);
      return this.model.getFillColor(u[r], u[p], u);
    }).style("stroke", (u) => {
      const p = this.services.cartesianScales.getDomainIdentifier(u);
      return this.model.getStrokeColor(u[r], u[p], u);
    }).attr("fill-opacity", n.bubble.fillOpacity).attr("opacity", 1);
  }
  getTooltipAdditionalItems(t) {
    const e = L(this.getOptions(), "bubble");
    return [
      {
        label: L(e, "radiusLabel"),
        value: t[L(e, "radiusMapsTo")]
      }
    ];
  }
}
class Sm extends dt {
  constructor() {
    super(...arguments), this.type = "bullet", this.renderType = at.SVG, this.handleLegendOnHover = (t) => {
      const { hoveredElement: e } = t.detail, { groupMapsTo: n } = this.getOptions().data;
      this.parent.selectAll("path.bar").transition("legend-hover-simple-bar").call(
        (s) => this.services.transitions.setupTransition({
          transition: s,
          name: "legend-hover-simple-bar"
        })
      ).attr("opacity", (s) => s[n] !== e.datum().name ? 0.3 : 1);
    }, this.handleLegendMouseOut = () => {
      this.parent.selectAll("path.bar").transition("legend-mouseout-simple-bar").call(
        (t) => this.services.transitions.setupTransition({
          transition: t,
          name: "legend-mouseout-simple-bar"
        })
      ).attr("opacity", 1);
    };
  }
  init() {
    const t = this.services.events;
    t.addEventListener(T.Legend.ITEM_HOVER, this.handleLegendOnHover), t.addEventListener(T.Legend.ITEM_MOUSEOUT, this.handleLegendMouseOut);
  }
  render(t) {
    const e = this.getOptions(), { groupMapsTo: n } = e.data, s = this.getComponentContainer({ ariaLabel: "bullet graphs", withinChartClip: !0 }), a = this.model.getDisplayData(this.configs.groups), r = this.services.cartesianScales.getRangeScale(), o = this.services.cartesianScales.getRangeIdentifier(), [c, l] = r.range(), [, h] = r.domain(), d = () => {
      const g = [];
      a.forEach((S) => {
        S.ranges ? S.ranges.forEach((v, E) => {
          v != null && v < h && g.push({
            datum: S,
            value: v,
            order: E + 1
          });
        }) : g.push({
          datum: S,
          order: 1
        });
      });
      const m = I.appendOrSelect(s, "g.range-boxes").selectAll("path.range-box").data(g, (S) => `${S[n]}-${S.order}`);
      m.exit().attr("opacity", 0).remove(), m.enter().append("path").attr("opacity", 0).merge(m).attr("class", (S) => `range-box order-${S.order}`).transition().call(
        (S) => this.services.transitions.setupTransition({
          transition: S,
          name: "bullet-range-box-update-enter",
          animate: t
        })
      ).attr("d", (S) => {
        let E, x, b, _;
        return S.order === 1 ? (E = this.services.cartesianScales.getDomainValue(S.datum) - 16 / 2, x = E + 16, b = l - 2, _ = c + 1) : (E = this.services.cartesianScales.getDomainValue(S.datum) - 16 / 2, x = E + 16, b = this.services.cartesianScales.getRangeValue(S.value), _ = l), Gt(
          { x0: E, x1: x, y0: b, y1: _ },
          this.services.cartesianScales.getOrientation()
        );
      }).attr("opacity", 1);
    }, u = () => {
      const g = I.appendOrSelect(s, "g.bars").selectAll("path.bar").data(a, (y) => y[n]);
      g.exit().attr("opacity", 0).remove(), g.enter().append("path").attr("opacity", 0).merge(g).classed("bar", !0).transition().call(
        (y) => this.services.transitions.setupTransition({
          transition: y,
          name: "bullet-bar-update-enter",
          animate: t
        })
      ).attr(
        "class",
        (y) => this.model.getColorClassName({
          classNameTypes: [nt.FILL],
          dataGroupName: y[n],
          originalClassName: "bar"
        })
      ).style("fill", (y) => {
        const S = this.services.cartesianScales.getDomainIdentifier(y);
        return this.model.getFillColor(y[n], y[S], y);
      }).attr("d", (y) => {
        const v = this.services.cartesianScales.getDomainValue(y) - 4, E = v + 8, x = this.services.cartesianScales.getRangeValue(0) + 1, b = this.services.cartesianScales.getRangeValue(y);
        return Gt(
          { x0: v, x1: E, y0: x, y1: b },
          this.services.cartesianScales.getOrientation()
        );
      }).attr("opacity", 1).attr("role", lt.GRAPHICS_SYMBOL).attr("aria-roledescription", "bar").attr("aria-label", (y) => y.value);
    }, p = () => {
      const g = I.appendOrSelect(s, "g.markers").selectAll("path.marker").data(
        a.filter((y) => L(y, "marker") !== null),
        (y) => y[n]
      );
      g.exit().attr("opacity", 0).remove(), g.enter().append("path").attr("opacity", 0).merge(g).classed("marker", !0).transition().call(
        (y) => this.services.transitions.setupTransition({
          transition: y,
          name: "bullet-marker-update-enter",
          animate: t
        })
      ).attr("d", (y) => {
        const v = this.services.cartesianScales.getDomainValue(y) - 12, E = v + 24, x = this.services.cartesianScales.getRangeValue(y.marker);
        return Gt(
          { x0: v, x1: E, y0: x, y1: x },
          this.services.cartesianScales.getOrientation()
        );
      }).attr("opacity", 1);
    }, f = () => {
      let g = [];
      a.filter((S) => L(S, "marker") !== null).forEach((S) => {
        const v = S.marker, E = S[o];
        g = g.concat([
          { datum: S, value: v * 0.25, barValue: E },
          { datum: S, value: v * 0.5, barValue: E },
          { datum: S, value: v * 0.75, barValue: E }
        ]);
      });
      const m = I.appendOrSelect(s, "g.quartiles").selectAll("path.quartile").data(g, (S) => S[n]);
      m.exit().attr("opacity", 0).remove(), m.enter().append("path").attr("opacity", 0).merge(m).attr("class", (S) => `quartile ${S.value <= S.barValue ? "over-bar" : ""}`).transition().call(
        (S) => this.services.transitions.setupTransition({
          transition: S,
          name: "bullet-quartile-update-enter",
          animate: t
        })
      ).attr("d", ({ datum: S, value: v }) => {
        let E = 4;
        S.ranges && S.ranges.indexOf(v) !== -1 && (E = 8);
        const x = this.services.cartesianScales.getDomainValue(S) - E / 2, b = x + E, _ = this.services.cartesianScales.getRangeValue(v);
        return Gt(
          { x0: x, x1: b, y0: _, y1: _ },
          this.services.cartesianScales.getOrientation()
        );
      }).attr("opacity", 1);
    };
    d(), u(), p(), f(), this.addEventListeners();
  }
  addEventListeners() {
    const t = this, e = this.getOptions(), { groupMapsTo: n } = e.data, s = this.services.cartesianScales.getRangeIdentifier(), { code: a, number: r } = L(e, "locale");
    this.parent.selectAll("path.bar").on("mouseover", function(o, c) {
      const l = D(this);
      l.classed("hovered", !0), t.services.events.dispatchEvent(T.Bar.BAR_MOUSEOVER, {
        event: o,
        element: l,
        datum: c
      });
      const h = L(e, "bullet", "performanceAreaTitles"), d = t.model.getMatchingRangeIndexForDatapoint(c);
      t.services.events.dispatchEvent(T.Tooltip.SHOW, {
        event: o,
        hoveredElement: l,
        items: [
          {
            label: L(e, "locale", "translations", "group") || L(e, "tooltip", "groupLabel") || "Group",
            value: c[n],
            class: t.model.getColorClassName({
              classNameTypes: [nt.TOOLTIP],
              dataGroupName: c[n]
            })
          },
          {
            label: "Value",
            value: c[s]
          },
          {
            label: "Target",
            value: c.marker
          },
          {
            label: "Percentage",
            value: `${r(Math.floor(c[s] / c.marker * 100), a)}%`
          },
          {
            label: "Performance",
            value: h[d]
          }
        ]
      });
    }).on("mousemove", function(o, c) {
      t.services.events.dispatchEvent(T.Bar.BAR_MOUSEMOVE, {
        event: o,
        element: D(this),
        datum: c
      }), t.services.events.dispatchEvent(T.Tooltip.MOVE, {
        event: o
      });
    }).on("click", function(o, c) {
      t.services.events.dispatchEvent(T.Bar.BAR_CLICK, {
        event: o,
        element: D(this),
        datum: c
      });
    }).on("mouseout", function(o, c) {
      const l = D(this);
      l.classed("hovered", !1), t.services.events.dispatchEvent(T.Bar.BAR_MOUSEOUT, {
        event: o,
        element: l,
        datum: c
      }), t.services.events.dispatchEvent(T.Tooltip.HIDE, {
        hoveredElement: l
      });
    });
  }
  destroy() {
    this.parent.selectAll("path.bar").on("mouseover", null).on("mousemove", null).on("mouseout", null);
    const t = this.services.events;
    t.removeEventListener(T.Legend.ITEM_HOVER, this.handleLegendOnHover), t.removeEventListener(T.Legend.ITEM_MOUSEOUT, this.handleLegendMouseOut);
  }
}
function ip(i) {
  return i;
}
function ap(i) {
  if (i == null) return ip;
  var t, e, n = i.scale[0], s = i.scale[1], a = i.translate[0], r = i.translate[1];
  return function(o, c) {
    c || (t = e = 0);
    var l = 2, h = o.length, d = new Array(h);
    for (d[0] = (t += o[0]) * n + a, d[1] = (e += o[1]) * s + r; l < h; ) d[l] = o[l], ++l;
    return d;
  };
}
function rp(i, t) {
  for (var e, n = i.length, s = n - t; s < --n; ) e = i[s], i[s++] = i[n], i[n] = e;
}
function op(i, t) {
  return typeof t == "string" && (t = i.objects[t]), t.type === "GeometryCollection" ? { type: "FeatureCollection", features: t.geometries.map(function(e) {
    return Rr(i, e);
  }) } : Rr(i, t);
}
function Rr(i, t) {
  var e = t.id, n = t.bbox, s = t.properties == null ? {} : t.properties, a = Qi(i, t);
  return e == null && n == null ? { type: "Feature", properties: s, geometry: a } : n == null ? { type: "Feature", id: e, properties: s, geometry: a } : { type: "Feature", id: e, bbox: n, properties: s, geometry: a };
}
function Qi(i, t) {
  var e = ap(i.transform), n = i.arcs;
  function s(h, d) {
    d.length && d.pop();
    for (var u = n[h < 0 ? ~h : h], p = 0, f = u.length; p < f; ++p)
      d.push(e(u[p], p));
    h < 0 && rp(d, f);
  }
  function a(h) {
    return e(h);
  }
  function r(h) {
    for (var d = [], u = 0, p = h.length; u < p; ++u) s(h[u], d);
    return d.length < 2 && d.push(d[0]), d;
  }
  function o(h) {
    for (var d = r(h); d.length < 4; ) d.push(d[0]);
    return d;
  }
  function c(h) {
    return h.map(o);
  }
  function l(h) {
    var d = h.type, u;
    switch (d) {
      case "GeometryCollection":
        return { type: d, geometries: h.geometries.map(l) };
      case "Point":
        u = a(h.coordinates);
        break;
      case "MultiPoint":
        u = h.coordinates.map(a);
        break;
      case "LineString":
        u = r(h.arcs);
        break;
      case "MultiLineString":
        u = h.arcs.map(r);
        break;
      case "Polygon":
        u = c(h.arcs);
        break;
      case "MultiPolygon":
        u = h.arcs.map(c);
        break;
      default:
        return null;
    }
    return { type: d, coordinates: u };
  }
  return l(t);
}
function lp(i, t) {
  var e = {}, n = {}, s = {}, a = [], r = -1;
  t.forEach(function(l, h) {
    var d = i.arcs[l < 0 ? ~l : l], u;
    d.length < 3 && !d[1][0] && !d[1][1] && (u = t[++r], t[r] = l, t[h] = u);
  }), t.forEach(function(l) {
    var h = o(l), d = h[0], u = h[1], p, f;
    if (p = s[d])
      if (delete s[p.end], p.push(l), p.end = u, f = n[u]) {
        delete n[f.start];
        var g = f === p ? p : p.concat(f);
        n[g.start = p.start] = s[g.end = f.end] = g;
      } else
        n[p.start] = s[p.end] = p;
    else if (p = n[u])
      if (delete n[p.start], p.unshift(l), p.start = d, f = s[d]) {
        delete s[f.end];
        var m = f === p ? p : f.concat(p);
        n[m.start = f.start] = s[m.end = p.end] = m;
      } else
        n[p.start] = s[p.end] = p;
    else
      p = [l], n[p.start = d] = s[p.end = u] = p;
  });
  function o(l) {
    var h = i.arcs[l < 0 ? ~l : l], d = h[0], u;
    return i.transform ? (u = [0, 0], h.forEach(function(p) {
      u[0] += p[0], u[1] += p[1];
    })) : u = h[h.length - 1], l < 0 ? [u, d] : [d, u];
  }
  function c(l, h) {
    for (var d in l) {
      var u = l[d];
      delete h[u.start], delete u.start, delete u.end, u.forEach(function(p) {
        e[p < 0 ? ~p : p] = 1;
      }), a.push(u);
    }
  }
  return c(s, n), c(n, s), t.forEach(function(l) {
    e[l < 0 ? ~l : l] || a.push([l]);
  }), a;
}
function cp(i) {
  for (var t = -1, e = i.length, n, s = i[e - 1], a = 0; ++t < e; ) n = s, s = i[t], a += n[0] * s[1] - n[1] * s[0];
  return Math.abs(a);
}
function up(i) {
  return Qi(i, hp.apply(this, arguments));
}
function hp(i, t) {
  var e = {}, n = [], s = [];
  t.forEach(a);
  function a(c) {
    switch (c.type) {
      case "GeometryCollection":
        c.geometries.forEach(a);
        break;
      case "Polygon":
        r(c.arcs);
        break;
      case "MultiPolygon":
        c.arcs.forEach(r);
        break;
    }
  }
  function r(c) {
    c.forEach(function(l) {
      l.forEach(function(h) {
        (e[h = h < 0 ? ~h : h] || (e[h] = [])).push(c);
      });
    }), n.push(c);
  }
  function o(c) {
    return cp(Qi(i, { type: "Polygon", arcs: [c] }).coordinates[0]);
  }
  return n.forEach(function(c) {
    if (!c._) {
      var l = [], h = [c];
      for (c._ = 1, s.push(l); c = h.pop(); )
        l.push(c), c.forEach(function(d) {
          d.forEach(function(u) {
            e[u < 0 ? ~u : u].forEach(function(p) {
              p._ || (p._ = 1, h.push(p));
            });
          });
        });
    }
  }), n.forEach(function(c) {
    delete c._;
  }), {
    type: "MultiPolygon",
    arcs: s.map(function(c) {
      var l = [], h;
      if (c.forEach(function(g) {
        g.forEach(function(m) {
          m.forEach(function(y) {
            e[y < 0 ? ~y : y].length < 2 && l.push(y);
          });
        });
      }), l = lp(i, l), (h = l.length) > 1)
        for (var d = 1, u = o(l[0]), p, f; d < h; ++d)
          (p = o(l[d])) > u && (f = l[0], l[0] = l[d], l[d] = f, u = p);
      return l;
    }).filter(function(c) {
      return c.length > 0;
    })
  };
}
class Tm extends Zo {
  constructor() {
    super(...arguments), this.type = "ruler-binned", this.renderType = at.SVG;
  }
  showRuler(t, [e, n]) {
    const s = this.parent, a = this.model.getOptions(), { cartesianScales: r } = this.services, o = r.getOrientation(), c = r.getRangeScale(), [l, h] = c.range(), d = r.getDomainScale(), u = d.invert(
      o === Xt.VERTICAL ? e : n
    ), p = I.appendOrSelect(s, "g.ruler").attr("aria-label", "ruler"), f = I.appendOrSelect(p, "line.ruler-line"), m = s.selectAll("[role=graphics-symbol]").filter((y) => {
      if (parseFloat(xt(y, "data.x0")) <= u && parseFloat(xt(y, "data.x1")) >= u)
        return !0;
    });
    if (m.size() > 0) {
      this.elementsToHighlight && this.elementsToHighlight.size() > 0 && !lo(this.elementsToHighlight, m) && this.hideRuler(), m.dispatch("mouseover"), this.elementsToHighlight = m;
      const y = D(m.nodes()[0]).datum(), S = parseFloat(xt(y, "data.x0")), v = parseFloat(xt(y, "data.x1")), E = this.model.getActiveDataGroupNames(), x = E.reverse().map((_) => ({
        label: _,
        value: xt(y, `data.${_}`),
        class: this.model.getColorClassName({
          classNameTypes: [nt.TOOLTIP],
          dataGroupName: _
        })
      })).filter((_) => _.value !== 0);
      if (x.length > 0) {
        this.services.events.dispatchEvent(T.Tooltip.SHOW, {
          event: t,
          mousePosition: [e, n],
          hoveredElement: f,
          items: [
            {
              label: xt(a, "bins.rangeLabel") || "Range",
              value: `${S} – ${v}`
            },
            ...x,
            ...L(a, "tooltip", "showTotal") === !0 ? [
              {
                label: xt(a, "locale.translations.total") || xt(a, "tooltip.totalLabel") || "Total",
                value: E.reduce(
                  (k, G) => k + parseFloat(xt(y, `data.${G}`)),
                  0
                )
              }
            ] : []
          ]
        }), p.attr("opacity", 1);
        const _ = d((S + v) / 2);
        o === "horizontal" ? f.attr("x1", h).attr("x2", l).attr("y1", _).attr("y2", _) : f.attr("y1", h).attr("y2", l).attr("x1", _).attr("x2", _);
      } else
        this.hideRuler();
    } else
      this.hideRuler();
  }
}
class bm extends Zo {
  formatTooltipData(t) {
    return t.reverse();
  }
}
const Om = (i, t) => {
  const e = i.x, n = i.y, s = t.x, a = t.y, r = As();
  return r.moveTo(e, n), r.lineTo(s, a), r.toString();
}, Lm = (i, t, e = 0.5) => {
  const n = i.x, s = i.y, a = t.x, r = t.y, o = As();
  return o.moveTo(n, s), o.lineTo(n + (a - n) * e, s), o.lineTo(n + (a - n) * e, r), o.lineTo(a, r), o.toString();
}, Am = (i, t, e, n, s, a) => {
  const r = i.x, o = i.y, c = t.x, l = t.y, h = As();
  return h.moveTo(r, o), h.bezierCurveTo(e, n, s, a, c, l), h.toString();
}, Mm = {
  d: "M7 0v8L0 4z",
  height: 8,
  width: 7.5,
  id: "arrowLeft"
}, wm = {
  d: "M0 0v8l7-4z",
  height: 8,
  width: 7.5,
  id: "arrowRight"
}, Cm = {
  d: "M5.32 9.513a4.75 4.75 0 100-9.5 4.75 4.75 0 000 9.5z",
  height: 10,
  width: 10,
  id: "circle"
}, km = {
  d: "M5.03517654-1e-7l4.99999996 5-4.99999996 5-5-5L2.4517844 2.58339204z",
  height: 10,
  width: 10,
  id: "diamond"
}, _m = {
  d: "M0 .44974747h8v8H0v-3.6830331z",
  height: 9,
  width: 8,
  id: "square"
}, Im = {
  d: "M0 0h1.5v8H0z",
  height: 8,
  width: 2,
  id: "tee"
};
class Rm extends Rd {
  constructor(t, e, n) {
    super(t, e, n), this.type = "color-legend", this.renderType = at.SVG, this.gradient_id = `gradient-id-${Math.floor(Math.random() * 99999999999)}`, this.handleAxisCompleteEvent = () => {
      const s = this.getComponentContainer(), { width: a } = I.getSVGElementSize(s, {
        useAttrs: !0
      }), r = L(this.getOptions(), "data", "loading");
      if (a > At.color.barWidth && !r) {
        const o = L(this.getOptions(), "heatmap", "colorLegend", "title"), { cartesianScales: c } = this.services, h = c.getMainXScale().range();
        if (h[0] > 1 && (s.select("g.legend").attr("transform", `translate(${h[0]}, 0)`), o)) {
          const { width: d } = I.getSVGElementSize(
            s.select("g.legend-title").select("text"),
            { useBBox: !0 }
          ), u = h[0] - d - 9;
          u > 1 ? s.select("g.legend-title").attr("transform", `translate(${u}, 0)`) : (s.select("g.legend").attr("transform", `translate(${h[0]}, 16)`), s.select("g.legend-title").attr("transform", `translate(${h[0]}, 0)`));
        }
      } else
        s.select("g.legend-title").attr("transform", "translate(0, 0)");
    }, this.chartType = n.chartType;
  }
  init() {
    this.chartType === "heatmap" && this.services.events.addEventListener(T.Axis.RENDER_COMPLETE, this.handleAxisCompleteEvent);
  }
  // eslint-disable-next-line @typescript-eslint/ban-ts-comment
  // @ts-ignore
  // eslint-disable-next-line @typescript-eslint/no-unused-vars
  render(t = !1) {
    const e = this.getOptions(), n = this.getComponentContainer({
      ariaLabel: "legend"
    }), { width: s } = I.getSVGElementSize(n, {
      useAttrs: !0
    }), a = L(e, "color", "gradient", "colors"), r = L(e, this.chartType, "colorLegend", "type");
    let o = L(e, "color", "pairing", "option");
    const c = L(e, "heatmap", "colorLegend", "title");
    if (L(this.getOptions(), "data", "loading")) {
      n.html("");
      return;
    }
    const h = !Fr(a), d = gl(this.model.getDisplayData()), u = !(s <= At.color.barWidth), p = u ? At.color.barWidth : s, f = I.appendOrSelect(n, "g.legend"), g = I.appendOrSelect(f, "g.legend-axis");
    if (c) {
      const R = I.appendOrSelect(n, "g.legend-title");
      I.appendOrSelect(R, "text").text(c).attr("dy", "0.7em"), f.attr("transform", "translate(0, 16)");
    }
    const m = d[0] < 0 && d[1] > 0 ? "diverge" : "mono";
    (o < 1 && o > 4 && m === "mono" || o < 1 && o > 2 && m === "diverge") && (o = 1);
    let y = [];
    const S = m === "diverge" ? 17 : 11;
    if (h)
      y = a;
    else
      for (let R = 1; R < S + 1; R++)
        y.push(
          r === $s.LINEAR ? `stop-color-${m}-${o}-${R}` : `fill-${m}-${o}-${R}`
        );
    const v = Wr(d[0], d[1]), E = Gc(v, 3), x = Re().domain(d).range([0, p]), b = Ui(x).tickSize(0).tickValues(E), { code: _, number: k } = L(e, "locale");
    b.tickFormat((R) => k(R, _));
    let G;
    switch (r) {
      case $s.LINEAR:
        this.drawLinear(y, f, p);
        break;
      case $s.QUANTIZE:
        G = this.drawQuantize(
          y,
          m,
          h,
          f,
          p
        ), x.range([G, p]);
        break;
      default:
        throw Error("Entered color legend type is not supported.");
    }
    g.attr("transform", `translate(0,${At.color.axisYTranslation})`).call(b), g.select(".domain").remove(), g.select("g.tick:last-of-type text").style("text-anchor", u ? "middle" : "end"), g.select("g.tick:first-of-type text").style(
      "text-anchor",
      u && this.chartType !== "choropleth" ? "middle" : "start"
    );
  }
  // Renders gradient legend
  drawLinear(t, e, n) {
    const s = 100 / (t.length - 1);
    I.appendOrSelect(e, "linearGradient").attr("id", `${this.gradient_id}-legend`).selectAll("stop").data(t).enter().append("stop").attr("offset", (o, c) => `${c * s}%`).attr("class", (o, c) => t[c]).attr("stop-color", (o) => o), I.appendOrSelect(e, "rect").attr("width", n).attr("height", At.color.barHeight).style("fill", `url(#${this.gradient_id}-legend)`);
  }
  /**
   * Renders quantized legend
   * @returns number (range start)
   */
  drawQuantize(t, e, n, s, a) {
    !n && e === "diverge" && t.splice(t.length / 2, 1);
    const r = Bi().domain(t).range([0, a]);
    return I.appendOrSelect(s, "g.quantized-rect").selectAll("rect").data(r.domain()).join("rect").attr("x", (c) => r(c)).attr("y", 0).attr("width", Math.max(0, r.bandwidth() - 1)).attr("height", At.color.barHeight).attr("class", (c) => c).attr("fill", (c) => c), (!n && e) === "mono" ? r.bandwidth() - 1 : 0;
  }
  destroy() {
    this.chartType === "heatmap" && this.services.events.removeEventListener(T.Axis.RENDER_COMPLETE, this.handleAxisCompleteEvent);
  }
}
class Dm extends Id {
  constructor() {
    super(...arguments), this.type = "meter-title", this.renderType = at.SVG;
  }
  // eslint-disable-next-line @typescript-eslint/ban-ts-comment
  // @ts-ignore
  // eslint-disable-next-line @typescript-eslint/no-unused-vars
  render(t = !1) {
    const e = L(this.model.getDisplayData(), 0), n = this.getOptions(), s = this.getComponentContainer({
      ariaLabel: "meter title"
    }), { groupMapsTo: a } = n.data, r = n.locale.translations.meter.title;
    if (L(n, "meter", "proportional"))
      this.displayTotal(), this.displayBreakdownTitle();
    else {
      const h = s.selectAll("text.meter-title").data(r ? [r] : [e[a]]);
      h.enter().append("text").classed("meter-title", !0).merge(h).attr("x", 0).attr("y", "1em").text((d) => d), h.exit().remove(), this.appendPercentage();
    }
    this.displayStatus();
    const c = this.getMaxTitleWidth(), l = I.appendOrSelect(s, "text.meter-title");
    c > 0 && l.node().getComputedTextLength() > c && this.truncateTitle(l, c);
  }
  displayBreakdownTitle() {
    const t = this.getComponentContainer(), e = this.getOptions(), n = this.model.getMaximumDomain(
      this.model.getDisplayData()
    ), s = L(e, "meter", "proportional", "total"), a = L(e, "meter", "proportional", "unit") ? L(e, "meter", "proportional", "unit") : "";
    let r;
    if (n === s)
      r = null;
    else {
      const h = s !== null ? s - n : n, d = L(e, "meter", "proportional", "breakdownFormatter"), { code: u, number: p } = L(e, "locale");
      r = d !== null ? d({
        datasetsTotal: n,
        total: s
      }) : `${p(n, u)} ${a} used (${p(h, u)} ${a} available)`;
    }
    const o = t.selectAll("text.proportional-meter-title").data([r]);
    o.enter().append("text").classed("proportional-meter-title", !0).merge(o).attr("x", 0).attr("y", "1em").text((h) => h), o.exit().remove();
    const c = this.getMaxTitleWidth(), l = I.appendOrSelect(t, "text.proportional-meter-title");
    c > 0 && l.node().getComputedTextLength() > c && this.truncateTitle(l, c);
  }
  // show the total for prop meter
  displayTotal() {
    const t = this.getComponentContainer(), e = this.getOptions(), n = L(e, "meter", "proportional", "total"), s = n ? L(e, "meter", "proportional", "total") : this.model.getMaximumDomain(this.model.getDisplayData()), a = L(e, "meter", "proportional", "unit") ? L(e, "meter", "proportional", "unit") : "", r = L(e, "meter", "proportional", "totalFormatter"), { code: o, number: c } = L(e, "locale"), l = r !== null ? r(s) : `${c(n, o)} ${a} total`, h = I.getHTMLElementSize(this.parent.node()).width, d = t.selectAll("text.proportional-meter-total").data([l]);
    d.enter().append("text").classed("proportional-meter-total", !0).merge(d).attr(
      "x",
      this.model.getStatus() && typeof h != "string" ? h - _t.total.paddingRight : h
    ).attr("y", "1em").attr("text-anchor", "end").text((u) => u), d.exit().remove();
  }
  /**
   * Appends the corresponding status based on the value and the peak.
   */
  displayStatus() {
    const t = this, e = this.getComponentContainer(), n = I.getHTMLElementSize(this.parent.node()).width || 0, s = this.model.getStatus(), a = _t.status.indicatorSize / 2, r = I.appendOrSelect(e, "g.status-indicator").attr("class", s !== null ? `status-indicator status--${s}` : "").attr("transform", `translate(${n - a}, 0)`), o = s ? [s] : [], c = r.selectAll("circle.status").data(o);
    c.enter().append("circle").merge(c).attr("class", "status").attr("r", a).attr("cx", 0).attr("cy", 8);
    const l = r.selectAll("path.innerFill").data(o);
    l.enter().append("path").merge(l).attr("d", t.getStatusIconPathString(s)).attr("transform", `translate(-${a}, 0)`).attr("class", "innerFill"), l.exit().remove(), c.exit().remove();
  }
  /**
   * Appends the associated percentage to the end of the title
   */
  appendPercentage() {
    const t = L(this.model.getDisplayData(), 0, "value"), { code: e, number: n } = L(this.getOptions(), "locale"), s = this.getComponentContainer(), a = I.appendOrSelect(s, "text.meter-title"), r = L(this.getOptions(), "meter", "statusBar", "percentageIndicator", "enabled") === !0 ? [t] : [], o = s.selectAll("text.percent-value").data(r), c = _t.statusBar.paddingRight;
    o.enter().append("text").classed("percent-value", !0).merge(o).text((l) => `${l != null ? n(l, e) : 0}%`).attr("x", +a.attr("x") + a.node().getComputedTextLength() + c).attr("y", a.attr("y")), o.exit().remove();
  }
  /**
   * Uses the parent class truncate logic
   * @param title d3 selection of title element that will be truncated
   * @param maxWidth the max width the title can take
   */
  truncateTitle(t, e) {
    super.truncateTitle(t, e);
    const n = I.appendOrSelect(this.parent, "tspan"), s = _t.statusBar.paddingRight, a = Math.ceil(n.node().getComputedTextLength());
    I.appendOrSelect(this.parent, "text.percent-value").attr(
      "x",
      +t.attr("x") + t.node().getComputedTextLength() + a + s
    );
  }
  // computes the maximum space a title can take
  getMaxTitleWidth() {
    const t = L(this.getOptions(), "meter", "proportional"), e = I.getHTMLElementSize(this.parent.node()).width;
    if (t !== null) {
      const n = I.appendOrSelect(this.parent, "text.proportional-meter-total").node(), s = I.getSVGElementSize(n, {
        useBBox: !0
      }).width;
      return e - s - _t.total.paddingLeft;
    } else {
      const n = I.appendOrSelect(this.parent, "text.percent-value"), s = _t.statusBar.paddingRight, a = n.node().getComputedTextLength(), r = I.appendOrSelect(this.parent, "g.status-indicator").node(), o = I.getSVGElementSize(r, { useBBox: !0 }).width + _t.status.paddingLeft;
      return e - a - s - o;
    }
  }
  /**
   * Get the associated status icon for the data
   * @param status the active status for the meter chart
   */
  getStatusIconPathString(t) {
    switch (t) {
      case Vs.SUCCESS:
        return "M6.875 11.3125 3.75 8.1875 4.74375 7.25 6.875 9.34375 11.50625 4.75 12.5 5.7375 Z";
      case Vs.DANGER:
        return "M10.7 11.5 4.5 5.3 5.3 4.5 11.5 10.7 Z";
      case Vs.WARNING:
        return "M7.9375,11.125 C7.41973305,11.125 7,11.544733 7,12.0625 C7,12.580267 7.41973305,13 7.9375,13 C8.45526695,13 8.875,12.580267 8.875,12.0625 C8.875,11.544733 8.45526695,11.125 7.9375,11.125 M7.3125, 3 8.5625, 3 8.5625, 9.875 7.3125, 9.875, 7.3125, 3 Z";
    }
  }
}
class ta extends dt {
  // Gets the correct width for bars based on options & configurations
  getBarWidth() {
    const t = this.getOptions();
    if (t.bars.width)
      return t.bars.width;
    const e = this.model.getDisplayData().length, n = this.services.cartesianScales.getMainXScale(), s = I.getSVGElementSize(this.parent, {
      useAttrs: !0
    }).width;
    if (!n.step) {
      const a = L(t, "bars", "spacingFactor");
      return Math.min(t.bars.maxWidth, s * a / e);
    }
    return Math.min(t.bars.maxWidth, n.step() / 2);
  }
  isOutsideZoomedDomain(t, e) {
    if (this.model.getDisplayData().length <= 1)
      return !1;
    const s = this.model.get("zoomDomain");
    if (s !== void 0) {
      const a = this.services.cartesianScales.getDomainScale();
      return t < a(s[0]) || e > a(s[1]);
    }
    return !1;
  }
}
class Nm extends dt {
  constructor() {
    super(...arguments), this.type = "circle-pack", this.renderType = at.SVG, this.handleLegendOnHover = (t) => {
      const { hoveredElement: e } = t.detail;
      this.parent.selectAll("circle.node").transition("legend-hover-circlepack").call(
        (n) => this.services.transitions.setupTransition({
          transition: n,
          name: "legend-hover-circlepack"
        })
      ).attr("opacity", (n) => n.data.dataGroupName === e.datum().name ? 1 : un.circles.fillOpacity);
    }, this.handleLegendMouseOut = () => {
      this.parent.selectAll("circle.node").transition("legend-mouseout-circlepack").call(
        (t) => this.services.transitions.setupTransition({
          transition: t,
          name: "legend-mouseout-circlepack"
        })
      ).attr("opacity", 1);
    };
  }
  // eslint-disable-next-line @typescript-eslint/ban-ts-comment
  // @ts-ignore
  // eslint-disable-next-line @typescript-eslint/no-unused-vars
  render(t = !0) {
    const e = this.getComponentContainer({
      ariaLabel: "circle packs",
      withinChartClip: !0
    }), { width: n, height: s } = I.getSVGElementSize(this.parent, {
      useAttrs: !0
    });
    if (n < 1 || s < 1)
      return;
    let a = this.model.getDisplayData();
    const r = this.model.hasParentNode(), o = this.model.getHierarchyLevel(), c = this.getOptions(), l = L(c, "canvasZoom", "enabled");
    r && L(a, 0, "children") && (a = L(a, 0, "children"));
    const h = Rn({ children: a }).sum((g) => g.value).sort((g, m) => m.value - g.value), u = Ih().size([n, s]).padding((g) => g.depth >= 1 ? un.padding.children + 3 : un.padding.mainGroup + 3)(h).descendants().splice(1).filter((g) => g.depth <= o), p = e.selectAll("circle.node").data(u);
    p.exit().attr("width", 0).attr("height", 0).remove();
    const f = p.enter().append("circle").classed("node", !0);
    f.merge(p).attr("class", (g) => {
      const m = l && o === 3 ? this.getZoomClass(g) : "";
      return this.model.getColorClassName({
        classNameTypes: [nt.FILL, nt.STROKE],
        dataGroupName: g.data.dataGroupName,
        originalClassName: g.children ? `node ${m}` : `node node-leaf ${m}`
      });
    }).style("fill", (g) => this.model.getFillColor(g.data.dataGroupName, null, g.data)).style("stroke", (g) => this.model.getFillColor(g.data.dataGroupName, null, g.data)).attr("cx", (g) => g.x).attr("cy", (g) => g.y).transition("circlepack-leaf-update-enter").call(
      (g) => this.services.transitions.setupTransition({
        transition: g,
        name: "circlepack-leaf-update-enter"
      })
    ).attr("r", (g) => g.r).attr("opacity", 1).attr("fill-opacity", un.circles.fillOpacity), l === !0 && this.focal && (this.services.canvasZoom.zoomIn(this.focal, f, Hn), this.setBackgroundListeners()), r || this.addLegendListeners(), this.addEventListeners();
  }
  // turn off the highlight class on children circles
  unhighlightChildren(t) {
    const e = t.map((n) => n.data);
    this.parent.selectAll("circle.node").filter((n) => e.some((s) => s === n.data) && n.depth > 1).style("stroke", (n) => this.model.getFillColor(n.data.dataGroupName, null, n.data));
  }
  // highlight the children circles with a stroke
  highlightChildren(t) {
    const e = t.map((n) => n.data);
    this.parent.selectAll("circle.node").filter((n) => e.some((s) => s === n.data) && n.depth > 1).style("stroke", un.circles.hover.stroke);
  }
  getZoomClass(t) {
    return this.model.getHierarchyLevel() === 3 && this.focal && (t.data === this.focal.data || this.focal.children.some((e) => e.data === t.data)) ? "focal" : "non-focal";
  }
  addLegendListeners() {
    const { events: t } = this.services;
    t.addEventListener(T.Legend.ITEM_HOVER, this.handleLegendOnHover), t.addEventListener(T.Legend.ITEM_MOUSEOUT, this.handleLegendMouseOut);
  }
  removeBackgroundListeners() {
    D(this.services.domUtils.getMainContainer()).on("click", () => null);
  }
  setBackgroundListeners() {
    const t = D(this.services.domUtils.getMainContainer()), e = this, n = this.parent.selectAll("circle.node");
    t.on("click", () => {
      e.focal = null, e.model.updateHierarchyLevel(2), t.classed("zoomed-in", !1), e.services.canvasZoom.zoomOut(n, Hn);
    });
  }
  // Zoom icon to be appended to the label in the tooltip
  getZoomIcon() {
    return `
		<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 10 10">
			<polygon points="5.93 3.71 4.45 3.71 4.45 2.23 3.71 2.23 3.71 3.71 2.23 3.71 2.23 4.45 3.71 4.45 3.71 5.93 4.45 5.93 4.45 4.45 5.93 4.45 5.93 3.71"/>
			<path d="M7.2,6.67a4,4,0,0,0,1-2.59A4.08,4.08,0,1,0,4.07,8.15h0a4,4,0,0,0,2.59-1L9.48,10,10,9.48Zm-3.12.77A3.34,3.34,0,1,1,7.41,4.08,3.34,3.34,0,0,1,4.08,7.44Z"/>
		</svg>`;
  }
  // add event listeners for tooltip on the circles
  addEventListeners() {
    const t = this;
    this.parent.selectAll("circle.node").on("mouseover", function(e, n) {
      const s = D(this);
      s.classed("hovered", !0);
      const a = t.model.getHierarchyLevel(), r = a > 2 && !s.classed("focal"), o = L(t.model.getOptions(), "canvasZoom", "enabled");
      let c = !1;
      if (!r) {
        let l = [], h = [], d = null;
        if (n.children) {
          n.depth > 1 && o && (c = !0, s.classed("clickable", !0)), l = n.children.map((f) => {
            if (f !== null)
              return typeof f.data.value == "number" ? {
                label: f.data.name,
                value: f.data.value
              } : {
                label: f.data.name,
                labelIcon: o && a <= 2 ? t.getZoomIcon() : null,
                value: f.value
              };
          });
          const p = t.model.getOptions();
          h = [
            {
              label: xt(p, "locale.translations.total") || xt(p, "tooltip.totalLabel") || "Total",
              value: n.value,
              bold: !0
            }
          ], t.highlightChildren(n.children);
        } else
          d = n.value;
        const u = getComputedStyle(this, null).getPropertyValue("fill");
        t.services.events.dispatchEvent(T.Tooltip.SHOW, {
          event: e,
          hoveredElement: s,
          items: [
            {
              color: u,
              label: n.data.name,
              labelIcon: c && o && a <= 2 ? t.getZoomIcon() : null,
              value: d
            },
            ...l,
            ...h
          ]
        });
      }
      t.services.events.dispatchEvent(T.CirclePack.CIRCLE_MOUSEOVER, {
        event: e,
        element: s,
        datum: n
      });
    }).on("mousemove", function(e, n) {
      const s = D(this);
      t.services.events.dispatchEvent(T.CirclePack.CIRCLE_MOUSEMOVE, {
        event: e,
        element: s,
        datum: n
      }), t.services.events.dispatchEvent(T.Tooltip.MOVE, {
        event: e
      });
    }).on("mouseout", function(e, n) {
      const s = D(this);
      s.classed("hovered", !1), n.children && t.unhighlightChildren(n.children), t.services.events.dispatchEvent(T.CirclePack.CIRCLE_MOUSEOUT, {
        event: e,
        element: s,
        datum: n
      }), t.services.events.dispatchEvent(T.Tooltip.HIDE, {
        hoveredElement: s
      });
    }).on("click", function(e, n) {
      const s = D(this), a = s.classed("non-focal"), r = L(t.model.getOptions(), "canvasZoom", "enabled");
      if (r && t.model.getHierarchyLevel() > 2) {
        const o = t.parent.selectAll("circle.node");
        D(t.services.domUtils.getMainContainer()).classed("zoomed-in", !1), t.focal = null, t.model.updateHierarchyLevel(2), t.services.canvasZoom.zoomOut(o, Hn);
      } else if (n.depth === 2 && n.children && !a && r) {
        const o = t.parent.selectAll("circle.node");
        D(t.services.domUtils.getMainContainer()).classed("zoomed-in", !0), t.focal = n, t.model.updateHierarchyLevel(3), t.services.canvasZoom.zoomIn(n, o, Hn), e.stopPropagation();
      }
      t.services.events.dispatchEvent(T.CirclePack.CIRCLE_CLICK, {
        event: e,
        element: s,
        datum: n
      });
    });
  }
  destroy() {
    this.parent.selectAll("circle.node").on("mouseover", null).on("mousemove", null).on("mouseout", null).on("click", null);
    const t = this.services.events;
    t.removeEventListener(T.Legend.ITEM_HOVER, this.handleLegendOnHover), t.removeEventListener(T.Legend.ITEM_MOUSEOUT, this.handleLegendMouseOut), this.removeBackgroundListeners();
  }
}
function dp(i, t) {
  const e = Ur(this._current, i);
  return (n) => (this._current = e(n), t(this._current));
}
class pp extends dt {
  constructor() {
    super(...arguments), this.type = "pie", this.renderType = at.SVG, this.isRendering = !1, this.handleLegendOnHover = (t) => {
      const { hoveredElement: e } = t.detail, { groupMapsTo: n } = this.getOptions().data;
      this.parent.selectAll("path.slice").transition("legend-hover-bar").call(
        (s) => this.services.transitions.setupTransition({
          transition: s,
          name: "legend-hover-bar"
        })
      ).attr(
        "opacity",
        (s) => s.data[n] !== e.datum().name ? 0.3 : 1
      );
    }, this.handleLegendMouseOut = () => {
      this.parent.selectAll("path.slice").transition("legend-mouseout-bar").call(
        (t) => this.services.transitions.setupTransition({
          transition: t,
          name: "legend-mouseout-bar"
        })
      ).attr("opacity", 1);
    };
  }
  init() {
    const t = this.services.events;
    t.addEventListener(T.Legend.ITEM_HOVER, this.handleLegendOnHover), t.addEventListener(T.Legend.ITEM_MOUSEOUT, this.handleLegendMouseOut);
  }
  getInnerRadius() {
    return Et.innerRadius;
  }
  render(t = !0) {
    const e = this, n = this.getComponentContainer({
      ariaLabel: "pie graph"
    }), s = this.getOptions(), { groupMapsTo: a } = s.data, { valueMapsTo: r } = s.pie;
    this.isRendering = !0;
    const o = this.model.getDisplayData().filter((M) => M[r] > 0), c = this.computeRadius();
    this.arc = In().innerRadius(this.getInnerRadius()).outerRadius(c), this.hoverArc = In().innerRadius(this.getInnerRadius()).outerRadius(c + Et.hoverArc.outerRadiusOffset);
    const h = td().value((M) => M[r]).sort(L(s, "pie", "sortFunction")).padAngle(Et.padAngle)(o), u = I.appendOrSelect(n, "g.slices").attr("role", lt.GROUP).attr("data-name", "slices").selectAll("path.slice").data(h, (M) => M.data[a]);
    u.exit().attr("opacity", 0).remove(), u.enter().append("path").classed("slice", !0).attr("opacity", 0).merge(u).attr(
      "class",
      (M) => this.model.getColorClassName({
        classNameTypes: [nt.FILL],
        dataGroupName: M.data[a],
        originalClassName: "slice"
      })
    ).style("fill", (M) => e.model.getFillColor(M.data[a], null, M.data)).attr("d", this.arc).transition().call(
      (M) => this.services.transitions.setupTransition({
        transition: M,
        name: "pie_slice_enter_update",
        animate: t
      })
    ).attr("opacity", 1).attr("role", lt.GRAPHICS_SYMBOL).attr("aria-roledescription", "slice").attr(
      "aria-label",
      (M) => `${M[r]}, ${Ns(M.data[r], o, r) + "%"}`
    ).attrTween("d", function(M) {
      return dp.bind(this)(M, e.arc);
    }).on("end", () => {
      e.isRendering = !1;
    });
    const { code: g, number: m } = L(s, "locale"), y = s.pie.labels.enabled, S = y ? h.filter((M) => M.data[r] > 0) : [], E = I.appendOrSelect(n, "g.labels").attr("role", lt.GROUP).attr("data-name", "labels").selectAll("text.pie-label").data(S, (M) => M.data[a]);
    E.exit().attr("opacity", 0).remove();
    const x = E.enter().append("text").classed("pie-label", !0), b = [];
    x.merge(E).style("text-anchor", "middle").text((M) => s.pie.labels.formatter ? s.pie.labels.formatter({
      ...M,
      percentageValue: Ns(
        M.data[r],
        o,
        r,
        !0
      )
    }) : m(
      Ns(M.data[r], o, r),
      g
    ) + "%").datum(function(M) {
      const O = c + 7, P = (M.endAngle - M.startAngle) / 2 + M.startAngle, $ = P / Math.PI * 180, C = this.getComputedTextLength();
      return M.textOffsetX = C / 2, M.textOffsetY = $ > 90 && $ < 270 ? 10 : 0, M.xPosition = (M.textOffsetX + O) * Math.sin(P), M.yPosition = (M.textOffsetY + O) * -Math.cos(P), M;
    }).attr("transform", function(M, O) {
      const P = S.length, $ = (M.endAngle - M.startAngle) * (180 / Math.PI);
      if (O >= P - 2 && $ < Et.callout.minSliceDegree) {
        let C, V;
        return M.index === P - 1 ? (C = M.xPosition + Et.callout.offsetX + Et.callout.textMargin + M.textOffsetX, V = M.yPosition - Et.callout.offsetY, M.direction = Gs.RIGHT, b.push(M)) : (C = M.xPosition - Et.callout.offsetX - M.textOffsetX - Et.callout.textMargin, V = M.yPosition - Et.callout.offsetY, M.direction = Gs.LEFT, b.push(M)), `translate(${C}, ${V})`;
      }
      return `translate(${M.xPosition}, ${M.yPosition})`;
    }), this.renderCallouts(b);
    const _ = L(s, "donut") ? "donut" : "pie", k = L(s, _, "alignment"), { width: G } = I.getSVGElementSize(this.getParent(), {
      useAttrs: !0
    }), R = y ? Et.xOffset : 0, A = y ? Et.yOffset : 0;
    let H = c + R;
    k === te.CENTER ? H = G / 2 : k === te.RIGHT && (H = G - c - Et.xOffset);
    let N = c + A;
    b.length > 0 && (N += Et.yOffsetCallout), n.attr("x", H + 7).attr("y", N), this.addEventListeners();
  }
  renderCallouts(t) {
    const e = I.appendOrSelect(this.getComponentContainer(), "g.callouts").attr("role", lt.GROUP).attr("data-name", "callouts"), n = e.selectAll("g.callout").data(t);
    n.exit().remove();
    const s = n.enter().append("g").classed("callout", !0).attr("role", lt.GROUP).attr("aria-roledescription", "label callout");
    s.merge(n).datum(function(o) {
      const { xPosition: c, yPosition: l, direction: h } = o;
      return h === Gs.RIGHT ? (o.startPos = {
        x: c,
        y: l + o.textOffsetY
      }, o.endPos = {
        x: c + Et.callout.offsetX,
        y: l - Et.callout.offsetY + o.textOffsetY
      }, o.intersectPointX = o.endPos.x - Et.callout.horizontalLineLength) : (o.startPos = {
        x: c,
        y: l + o.textOffsetY
      }, o.endPos = {
        x: c - Et.callout.offsetX,
        y: l - Et.callout.offsetY + o.textOffsetY
      }, o.intersectPointX = o.endPos.x + Et.callout.horizontalLineLength), o;
    }), s.append("line").classed("vertical-line", !0).merge(e.selectAll("line.vertical-line")).datum(function() {
      return D(this.parentNode).datum();
    }).style("stroke-width", "1px").attr("x1", (o) => o.startPos.x).attr("y1", (o) => o.startPos.y).attr("x2", (o) => o.intersectPointX).attr("y2", (o) => o.endPos.y), s.append("line").classed("horizontal-line", !0).merge(e.selectAll("line.horizontal-line")).datum(function() {
      return D(this.parentNode).datum();
    }).style("stroke-width", "1px").attr("x1", (o) => o.intersectPointX).attr("y1", (o) => o.endPos.y).attr("x2", (o) => o.endPos.x).attr("y2", (o) => o.endPos.y);
  }
  addEventListeners() {
    const t = this;
    this.parent.selectAll("path.slice").on("mouseover", function(e, n) {
      const s = D(this);
      t.isRendering || s.classed("hovered", !0).transition("pie_slice_mouseover").call(
        (o) => t.services.transitions.setupTransition({
          transition: o,
          name: "pie_slice_mouseover"
        })
      ).attr("d", t.hoverArc), t.services.events.dispatchEvent(T.Pie.SLICE_MOUSEOVER, {
        event: e,
        element: D(this),
        datum: n
      });
      const { groupMapsTo: a } = t.getOptions().data, { valueMapsTo: r } = t.getOptions().pie;
      t.services.events.dispatchEvent(T.Tooltip.SHOW, {
        event: e,
        hoveredElement: s,
        items: [
          {
            label: n.data[a],
            value: n.data[r]
          }
        ]
      });
    }).on("mousemove", function(e, n) {
      const s = D(this);
      t.services.events.dispatchEvent(T.Pie.SLICE_MOUSEMOVE, {
        event: e,
        element: s,
        datum: n
      }), t.services.events.dispatchEvent(T.Tooltip.MOVE, {
        event: e
      });
    }).on("click", function(e, n) {
      t.services.events.dispatchEvent(T.Pie.SLICE_CLICK, {
        event: e,
        element: D(this),
        datum: n
      });
    }).on("mouseout", function(e, n) {
      const s = D(this);
      Sc(() => {
        t.isRendering || s.classed("hovered", !1).transition("pie_slice_mouseout").call(
          (a) => t.services.transitions.setupTransition({
            transition: a,
            name: "pie_slice_mouseout"
          })
        ).attr("d", t.arc);
      }, 100), t.services.events.dispatchEvent(T.Pie.SLICE_MOUSEOUT, {
        event: e,
        element: s,
        datum: n
      }), t.services.events.dispatchEvent(T.Tooltip.HIDE, {
        hoveredElement: s
      });
    });
  }
  // Helper functions
  computeRadius() {
    const { width: t, height: e } = I.getSVGElementSize(this.parent, {
      useAttrs: !0
    }), n = this.getOptions(), s = Math.min(t, e) / 2;
    return n.pie.labels.enabled ? s + Et.radiusOffset : s;
  }
}
class Pm extends pp {
  constructor() {
    super(...arguments), this.type = "donut", this.renderType = at.SVG;
  }
  render(t = !0) {
    super.render(t);
    const e = this;
    if (this.model.isDataEmpty()) {
      this.getComponentContainer({
        ariaLabel: "donut graph"
      }).select("g.center").remove();
      return;
    }
    const n = I.appendOrSelect(
      this.getComponentContainer({
        ariaLabel: "donut graph"
      }),
      "g.center"
    ), s = this.getOptions(), a = this.computeRadius(), r = L(s, "donut", "center", "label");
    I.appendOrSelect(n, "text.donut-figure").attr("text-anchor", "middle").style("dominant-baseline", () => r === null || r === "" ? "central" : "initial").style("font-size", () => s.donut.center.numberFontSize(a)).transition().call(
      (o) => this.services.transitions.setupTransition({
        transition: o,
        name: "donut-figure-enter-update",
        animate: t
      })
    ).tween("text", function() {
      return e.centerNumberTween(D(this));
    }), r !== null && r !== "" && I.appendOrSelect(n, "text.donut-title").attr("text-anchor", "middle").style("font-size", () => s.donut.center.titleFontSize(a)).attr("y", s.donut.center.titleYPosition(a)).text(r);
  }
  getInnerRadius() {
    return this.computeRadius() * (3 / 4);
  }
  centerNumberTween(t) {
    const e = this.getOptions();
    let n = L(e, "donut", "center", "number");
    n === null && (n = this.model.getDisplayData().reduce((o, c) => o + c[e.pie.valueMapsTo], 0));
    const s = parseInt(t.text().replace(/[, ]+/g, ""), 10) || 0;
    let a;
    s % 1 === 0 && n % 1 === 0 ? a = ml : a = Wr;
    const r = a(s, n);
    return (o) => {
      const { numberFormatter: c } = e.donut.center;
      if (c)
        t.text(c(r(o)));
      else {
        const { code: l, number: h } = L(e, "locale");
        t.text(h(Math.floor(r(o)), l));
      }
    };
  }
}
const Dr = "4,10 8,6 12,10", Nr = "12,6 8,10 4,6";
class $m extends dt {
  constructor() {
    super(...arguments), this.type = "gauge", this.renderType = at.SVG;
  }
  getValue() {
    var n;
    return ((n = this.model.getData().find((s) => s.group === "value")) == null ? void 0 : n.value) ?? null;
  }
  getValueRatio() {
    return oo(this.getValue(), 0, 100) / 100;
  }
  getDelta() {
    var n;
    return ((n = this.model.getData().find((s) => s.group === "delta")) == null ? void 0 : n.value) ?? null;
  }
  getArcRatio() {
    const t = this.getOptions();
    return L(t, "gauge", "type") === zn.FULL ? 1 : 0.5;
  }
  getArcSize() {
    return this.getArcRatio() * Math.PI * 2;
  }
  getStartAngle() {
    const t = this.getArcSize();
    return t === 2 * Math.PI ? 0 : -t / 2;
  }
  // use provided arrow direction or default to using the delta
  getArrow(t) {
    const e = this.getOptions();
    switch (L(e, "gauge", "deltaArrow", "direction")) {
      case ba.UP:
        return Dr;
      case ba.DOWN:
        return Nr;
      default:
        return t > 0 ? Dr : Nr;
    }
  }
  // eslint-disable-next-line @typescript-eslint/ban-ts-comment
  // @ts-ignore
  // eslint-disable-next-line @typescript-eslint/no-unused-vars
  render(t = !0) {
    const e = this.getComponentContainer({
      ariaLabel: "gauge graph"
    }).attr("width", "100%").attr("height", "100%"), n = this.getOptions(), s = this.getValue(), a = this.getValueRatio(), r = this.getArcSize(), o = this.getStartAngle(), c = a * r, l = o + c, h = o + r, d = this.computeRadius(), u = this.getInnerRadius();
    this.backgroundArc = In().innerRadius(u).outerRadius(d).startAngle(l).endAngle(h), this.arc = In().innerRadius(u).outerRadius(d).startAngle(o).endAngle(l), I.appendOrSelect(e, "path.arc-background").attr("d", this.backgroundArc);
    const p = e.selectAll("path.arc-foreground").data([s]);
    p.enter().append("path").merge(p).attr(
      "class",
      this.model.getColorClassName({
        classNameTypes: [nt.FILL],
        dataGroupName: "value",
        originalClassName: "arc-foreground"
      })
    ).style("fill", () => L(this.getOptions(), "color", "scale", "value")).attr("d", this.arc).attr("role", lt.GRAPHICS_SYMBOL).attr("aria-roledescription", "value").attr("aria-label", (S) => S), this.drawValueNumber(), this.drawDelta(), p.exit().remove();
    const g = L(n, "gauge", "alignment"), { width: m } = I.getSVGElementSize(this.getParent(), {
      useAttrs: !0
    });
    let y = d;
    g === te.CENTER ? y = m / 2 : g === te.RIGHT && (y = m - d), e.attr("x", y).attr("y", d), this.addEventListeners();
  }
  /**
   * draws the value number associated with the Gauge component in the center
   */
  drawValueNumber() {
    const t = this.getComponentContainer(), e = this.getOptions(), n = L(e, "gauge", "type"), s = this.getValue(), a = this.getDelta(), r = this.computeRadius(), o = L(e, "gauge", "valueFontSize"), c = L(e, "gauge", "deltaFontSize"), l = L(e, "gauge", "numberSpacing"), h = L(e, "gauge", "showPercentageSymbol");
    let d = 0;
    n === zn.FULL && !a ? d = c(r) : n === zn.SEMI && a && (d = -(c(r) + l));
    const u = I.appendOrSelect(t, "g.gauge-numbers").attr(
      "transform",
      `translate(0, ${d})`
    ), p = o(r), f = I.appendOrSelect(u, "g.gauge-value-number"), { code: g, number: m } = L(e, "locale"), y = L(e, "gauge", "numberFormatter"), S = f.selectAll("text.gauge-value-number").data([s]);
    S.enter().append("text").attr("class", "gauge-value-number").merge(S).style("font-size", `${p}px`).attr("text-anchor", "middle").text((G) => {
      let R;
      return G != null ? R = Number(G.toFixed(2)) % 1 !== 0 ? G.toFixed(2) : G.toFixed() : R = 0, y ? y(R) : m(Number(R), g);
    });
    const { width: v } = I.getSVGElementSize(
      I.appendOrSelect(t, "text.gauge-value-number"),
      { useBBox: !0 }
    ), E = p / 2, x = h ? "%" : "", b = I.appendOrSelect(f, "text.gauge-value-symbol").style("font-size", `${E}px`).attr("x", v / 2).text(x), { width: _, height: k } = I.getSVGElementSize(b, {
      useBBox: !0
    });
    b.attr("y", `-${k / 2}px`), f.attr("transform", `translate(-${_ / 2}, 0)`);
  }
  /**
   * adds the delta number for the gauge
   */
  drawDelta() {
    const t = this, e = this.getComponentContainer(), n = this.getOptions(), s = this.getDelta(), { code: a, number: r } = L(n, "locale");
    if (s) {
      const o = this.computeRadius(), c = s ? L(n, "gauge", "deltaFontSize") : () => 0, l = s ? L(n, "gauge", "numberFormatter") : () => null, h = L(n, "gauge", "deltaArrow", "size"), d = L(n, "gauge", "numberSpacing"), u = L(n, "gauge", "showPercentageSymbol"), p = I.appendOrSelect(e, "g.gauge-numbers"), f = I.appendOrSelect(p, "g.gauge-delta").attr(
        "transform",
        `translate(0, ${c(o) + d})`
      ), g = I.appendOrSelect(f, "text.gauge-delta-number"), m = u ? "%" : "";
      g.data(s === null ? [] : [s]), g.enter().append("text").classed("gauge-delta-number", !0).merge(g).attr("text-anchor", "middle").style("font-size", `${c(o)}px`).text((E) => {
        let x;
        return E != null ? x = Number(E.toFixed(2)) % 1 !== 0 ? E.toFixed(2) : E.toFixed() : x = 0, l ? `${l(x)}${m}` : `${r(Number(x), a)}${m}`;
      });
      const { width: y } = I.getSVGElementSize(
        I.appendOrSelect(e, ".gauge-delta-number"),
        { useBBox: !0 }
      ), S = L(n, "gauge", "deltaArrow", "enabled"), v = f.selectAll("svg.gauge-delta-arrow").data(s !== null && S ? [s] : []);
      v.enter().append("svg").merge(v).attr("class", "gauge-delta-arrow").attr("x", -h(o) - y / 2).attr("y", -h(o) / 2 - c(o) * 0.35).attr("width", h(o)).attr("height", h(o)).attr("viewBox", "0 0 16 16").each(function() {
        const E = D(this);
        I.appendOrSelect(E, "rect.gauge-delta-arrow-backdrop").attr("width", "16").attr("height", "16").attr("fill", "none");
        const x = L(n, "gauge", "status");
        I.appendOrSelect(E, "polygon.gauge-delta-arrow").attr("class", x !== null ? `gauge-delta-arrow status--${x}` : "").attr("points", t.getArrow(s));
      }), v.exit().remove(), g.exit().remove();
    } else {
      const o = e.select("g.gauge-delta");
      o.empty() || o.remove();
    }
  }
  getInnerRadius() {
    const t = this.computeRadius(), e = L(this.getOptions(), "gauge", "arcWidth");
    return t - e;
  }
  addEventListeners() {
    const t = this;
    this.parent.selectAll("path.arc-foreground").on("mouseover", function(e, n) {
      t.services.events.dispatchEvent(T.Gauge.ARC_MOUSEOVER, {
        event: e,
        element: D(this),
        datum: n
      });
    }).on("mousemove", function(e, n) {
      const s = D(this);
      t.services.events.dispatchEvent(T.Gauge.ARC_MOUSEMOVE, {
        event: e,
        element: s,
        datum: n
      });
    }).on("click", function(e, n) {
      t.services.events.dispatchEvent(T.Gauge.ARC_CLICK, {
        event: e,
        element: D(this),
        datum: n
      });
    }).on("mouseout", function(e, n) {
      const s = D(this);
      t.services.events.dispatchEvent(T.Gauge.ARC_MOUSEOUT, {
        event: e,
        element: s,
        datum: n
      });
    });
  }
  // Helper functions
  computeRadius() {
    const t = this.getOptions(), e = L(t, "gauge", "type"), { width: n, height: s } = I.getSVGElementSize(this.parent, {
      useAttrs: !0
    });
    return e === zn.SEMI ? Math.min(n / 2, s) : Math.min(n / 2, s / 2);
  }
}
class Vm extends ta {
  constructor() {
    super(...arguments), this.type = "grouped-bar", this.renderType = at.SVG, this.padding = 5, this.defaultStepFactor = 70, this.handleLegendOnHover = (t) => {
      const { hoveredElement: e } = t.detail, { groupMapsTo: n } = this.getOptions().data;
      this.parent.selectAll("path.bar").transition("legend-hover-bar").call(
        (s) => this.services.transitions.setupTransition({
          transition: s,
          name: "legend-hover-bar"
        })
      ).attr("opacity", (s) => s[n] !== e.datum().name ? 0.3 : 1);
    }, this.handleLegendMouseOut = () => {
      this.parent.selectAll("path.bar").transition("legend-mouseout-bar").call(
        (t) => this.services.transitions.setupTransition({
          transition: t,
          name: "legend-mouseout-bar"
        })
      ).attr("opacity", 1);
    };
  }
  init() {
    const t = this.services.events;
    t.addEventListener(T.Legend.ITEM_HOVER, this.handleLegendOnHover), t.addEventListener(T.Legend.ITEM_MOUSEOUT, this.handleLegendMouseOut);
  }
  render(t) {
    const e = this.model.getDisplayData(this.configs.groups), n = this.getOptions(), { groupMapsTo: s } = n.data;
    this.setGroupScale();
    const a = this.getComponentContainer({ ariaLabel: "grouped bar graphs", withinChartClip: !0 }), r = vl(
      e.map((u) => {
        const p = this.services.cartesianScales.getDomainIdentifier(u);
        return u[p] && typeof u[p].toString == "function" ? u[p].toString() : u[p];
      })
    ), o = a.selectAll("g.bars").data(r, (u) => u);
    o.exit().attr("opacity", 0).remove();
    const l = o.enter().append("g").classed("bars", !0).attr("role", lt.GROUP).attr("data-name", "bars").merge(o);
    l.transition().call(
      (u) => this.services.transitions.setupTransition({
        transition: u,
        name: "bar-group-update-enter",
        animate: t
      })
    ).attr("transform", (u) => {
      const f = this.services.cartesianScales.getDomainValue(u) - this.getGroupWidth() / 2;
      return this.services.cartesianScales.getOrientation() === Xt.VERTICAL ? `translate(${f}, 0)` : `translate(0, ${f})`;
    });
    const h = l.selectAll("path.bar").data(
      (u) => this.getDataCorrespondingToLabel(u),
      (u) => u[s]
    );
    h.exit().attr("opacity", 0).remove(), h.enter().append("path").attr("opacity", 0).merge(h).classed("bar", !0).transition().call(
      (u) => this.services.transitions.setupTransition({
        transition: u,
        name: "bar-update-enter",
        animate: t
      })
    ).attr(
      "class",
      (u) => this.model.getColorClassName({
        classNameTypes: [nt.FILL],
        dataGroupName: u[s],
        originalClassName: "bar"
      })
    ).style("fill", (u) => {
      const p = this.services.cartesianScales.getDomainIdentifier(u);
      return this.model.getFillColor(u[s], u[p], u);
    }).attr("d", (u) => {
      const p = this.groupScale(u[s]), f = this.getBarWidth(), g = p, m = p + f, y = this.services.cartesianScales.getRangeAxisPosition({ datum: u }), S = this.services.cartesianScales.getDomainLowerBound(y), v = this.services.cartesianScales.getValueThroughAxisPosition(y, S), E = this.services.cartesianScales.getRangeValue(u), x = this.services.cartesianScales.getDomainValue(u) - f / 2, b = x + f;
      if (!this.isOutsideZoomedDomain(x, b))
        return Gt(
          { x0: g, x1: m, y0: v, y1: E },
          this.services.cartesianScales.getOrientation()
        );
    }).attr("opacity", 1).attr("role", lt.GRAPHICS_SYMBOL).attr("aria-roledescription", "bar").attr("aria-label", (u) => u.value), this.addEventListeners();
  }
  addEventListeners() {
    const t = this;
    this.parent.selectAll("path.bar").on("mouseover", function(e, n) {
      const s = D(this);
      s.classed("hovered", !0), t.services.events.dispatchEvent(T.Bar.BAR_MOUSEOVER, {
        event: e,
        element: s,
        datum: n
      }), t.services.events.dispatchEvent(T.Tooltip.SHOW, {
        event: e,
        hoveredElement: s,
        data: [n]
      });
    }).on("mousemove", function(e, n) {
      const s = D(this);
      t.services.events.dispatchEvent(T.Bar.BAR_MOUSEMOVE, {
        event: e,
        element: s,
        datum: n
      }), t.services.events.dispatchEvent(T.Tooltip.MOVE, {
        event: e
      });
    }).on("click", function(e, n) {
      t.services.events.dispatchEvent(T.Bar.BAR_CLICK, {
        event: e,
        element: D(this),
        datum: n
      });
    }).on("mouseout", function(e, n) {
      const s = D(this);
      s.classed("hovered", !1), t.services.events.dispatchEvent(T.Bar.BAR_MOUSEOUT, {
        event: e,
        element: s,
        datum: n
      }), t.services.events.dispatchEvent(T.Tooltip.HIDE, {
        hoveredElement: s
      });
    });
  }
  destroy() {
    this.parent.selectAll("path.bar").on("mouseover", null).on("mousemove", null).on("mouseout", null);
    const t = this.services.events;
    t.removeEventListener(T.Legend.ITEM_HOVER, this.handleLegendOnHover), t.removeEventListener(T.Legend.ITEM_MOUSEOUT, this.handleLegendMouseOut);
  }
  getDataCorrespondingToLabel(t) {
    return this.model.getDisplayData(this.configs.groups).filter((n) => {
      const s = this.services.cartesianScales.getDomainIdentifier(n);
      return n[s].toString() === t;
    });
  }
  getGroupWidth() {
    const t = this.model.getGroupedData(this.configs.groups), e = this.getTotalGroupPadding();
    return this.getBarWidth() * t.length + e;
  }
  getDomainScaleStep() {
    const t = this.services.cartesianScales.getDomainScale(), e = this.model.getGroupedData(this.configs.groups);
    let n = this.defaultStepFactor;
    if (typeof t.step == "function")
      n = t.step();
    else if (e.length > 0) {
      const s = e.find((a) => {
        var r;
        return ((r = a.data) == null ? void 0 : r.length) > 1;
      });
      if (s) {
        const a = this.services.cartesianScales.getDomainIdentifier(s.data[0]);
        n = Math.abs(
          t(s.data[1][a]) - t(s.data[0][a])
        );
      }
    }
    return n;
  }
  getTotalGroupPadding() {
    const t = this.model.getGroupedData(this.configs.groups);
    return t.length === 1 ? 0 : Math.min(5, 5 * (this.getDomainScaleStep() / this.defaultStepFactor)) * (t.length - 1);
  }
  // Gets the correct width for bars based on options & configurations
  getBarWidth() {
    const t = this.getOptions(), e = L(t, "bars", "width"), n = L(t, "bars", "maxWidth");
    if (e !== null && (n === null || e <= n))
      return e;
    const a = this.model.getGroupedData(this.configs.groups).length, r = this.getTotalGroupPadding();
    return Math.min(
      n,
      (this.getDomainScaleStep() - r) / a
    );
  }
  setGroupScale() {
    const t = this.model.getActiveDataGroupNames(this.configs.groups);
    this.groupScale = Bi().domain(t).rangeRound([0, this.getGroupWidth()]);
  }
}
class Gm extends dt {
  constructor() {
    super(...arguments), this.type = "heatmap", this.renderType = at.SVG, this.matrix = {}, this.xBandwidth = 0, this.yBandwidth = 0, this.translationUnits = {
      x: 0,
      y: 0
    }, this.handleAxisOnHover = (t) => {
      const { detail: e } = t, { datum: n } = e, s = this.model.getUniqueRanges(), a = this.model.getUniqueDomain(), r = this.services.cartesianScales.getDomainLabel(), o = this.services.cartesianScales.getRangeLabel(), c = this.services.cartesianScales.getMainXScale(), l = this.services.cartesianScales.getMainYScale();
      let h = "", d = null, u = null, p = null;
      this.matrix[n] !== void 0 ? (h = r, s.forEach((f) => {
        if (typeof this.matrix[n][f].value == "number") {
          const g = this.matrix[n][f].value;
          if (d === null) {
            d = g, u = g, p = g;
            return;
          }
          d += g, u = g < u ? g : u, p = g > p ? g : p;
        }
      })) : (h = o, a.forEach((f) => {
        if (typeof this.matrix[f][n].value == "number") {
          const g = this.matrix[f][n].value;
          if (d === null) {
            d = g, u = g, p = g;
            return;
          }
          d += g, u = g < u ? g : u, p = g > p ? g : p;
        }
      })), c(n) !== void 0 ? this.parent.select("g.multi-cell.column-highlight").classed("highlighter-hidden", !1).attr("transform", `translate(${c(n)}, ${di(l.range())})`) : l(n) !== void 0 && this.parent.select("g.multi-cell.row-highlight").classed("highlighter-hidden", !1).attr("transform", `translate(${di(c.range())},${l(n)})`), this.services.events.dispatchEvent(T.Tooltip.SHOW, {
        event: e.event,
        hoveredElement: D(t.detail.element),
        items: [
          {
            label: h,
            value: n,
            bold: !0
          },
          {
            label: "Min",
            value: u !== null ? u : "-"
          },
          {
            label: "Max",
            value: p !== null ? p : "-"
          },
          {
            label: "Average",
            value: d !== null ? d / a.length : "-"
          }
        ]
      });
    }, this.handleAxisMouseOut = (t) => {
      this.parent.selectAll("g.multi-cell").classed("highlighter-hidden", !0), this.services.events.dispatchEvent(T.Tooltip.HIDE, {
        event: t
      });
    };
  }
  init() {
    const t = this.services.events;
    t.addEventListener(T.Axis.LABEL_MOUSEOVER, this.handleAxisOnHover), t.addEventListener(T.Axis.LABEL_MOUSEOUT, this.handleAxisMouseOut), t.addEventListener(T.Axis.LABEL_FOCUS, this.handleAxisOnHover), t.addEventListener(T.Axis.LABEL_BLUR, this.handleAxisMouseOut);
  }
  // eslint-disable-next-line @typescript-eslint/ban-ts-comment
  // @ts-ignore
  // eslint-disable-next-line @typescript-eslint/no-unused-vars
  render(t = !0) {
    const e = this.getComponentContainer({ ariaLabel: "heatmap", withinChartClip: !0 });
    e.lower();
    const { cartesianScales: n } = this.services;
    if (this.matrix = this.model.getMatrix(), e.html(""), L(this.getOptions(), "data", "loading"))
      return;
    const s = n.getMainXScale(), a = n.getMainYScale(), r = n.getDomainIdentifier(), o = n.getRangeIdentifier(), c = this.model.getUniqueDomain(), l = this.model.getUniqueRanges(), h = this.model.getMatrixAsArray(), d = s.range(), u = a.range();
    this.xBandwidth = Math.abs((d[1] - d[0]) / c.length), this.yBandwidth = Math.abs((u[1] - u[0]) / l.length);
    const p = this.services.domUtils.generateElementIDString("heatmap-pattern-stripes");
    e.append("defs").append("pattern").attr("id", p).attr("width", 3).attr("height", 3).attr("patternUnits", "userSpaceOnUse").attr("patternTransform", "rotate(45)").append("rect").classed("pattern-fill", !0).attr("width", 0.5).attr("height", 8);
    const f = e.selectAll().data(h).enter().append("g").attr("class", (g) => `heat-${g.index}`).classed("cell", !0).attr(
      "transform",
      (g) => `translate(${s(g[r])}, ${a(g[o])})`
    ).append("rect").attr(
      "class",
      (g) => this.model.getColorClassName({
        value: g.value,
        originalClassName: `heat-${g.index}`
      })
    ).classed("heat", !0).classed("null-state", (g) => g.index === -1 || g.value === null).attr("width", this.xBandwidth).attr("height", this.yBandwidth).style("fill", (g) => {
      const m = this.services.cartesianScales.getDomainIdentifier(g);
      return g.index === -1 || g.value === null ? `url(#${p})` : this.model.getFillColor(Number(g.value), g[m], g);
    }).attr("aria-label", (g) => g.value);
    this.createOuterBox("g.cell-highlight", this.xBandwidth, this.yBandwidth), this.createOuterBox(
      "g.multi-cell.column-highlight",
      this.xBandwidth,
      Math.abs(u[1] - u[0])
    ), this.createOuterBox(
      "g.multi-cell.row-highlight",
      Math.abs(d[1] - d[0]),
      this.yBandwidth
    ), this.determineDividerStatus() && (f.style("stroke-width", "1px"), this.parent.select("g.cell-highlight").classed("cell-2", !0)), this.addEventListener();
  }
  /**
   * Generates a box using lines to create a hover effect
   * The lines have drop shadow in their respective direction
   * @param parentTag - tag name
   * @param xBandwidth - X length
   * @param yBandwidth - y length
   */
  createOuterBox(t, e, n) {
    const s = I.appendOrSelect(this.parent, t).classed("shadows", !0).classed("highlighter-hidden", !0);
    I.appendOrSelect(s, "line.top").attr("x1", -1).attr("x2", e + 1), I.appendOrSelect(s, "line.left").attr("x1", 0).attr("y1", -1).attr("x2", 0).attr("y2", n + 1), I.appendOrSelect(s, "line.down").attr("x1", -1).attr("x2", e + 1).attr("y1", n).attr("y2", n), I.appendOrSelect(s, "line.right").attr("x1", e).attr("x2", e).attr("y1", -1).attr("y2", n + 1);
  }
  determineDividerStatus() {
    const t = L(this.getOptions(), "heatmap", "divider", "state");
    return t !== Hs.OFF && (t === Hs.AUTO && xa.minCellDividerDimension <= this.xBandwidth && xa.minCellDividerDimension <= this.yBandwidth || t === Hs.ON);
  }
  addEventListener() {
    const t = this, { cartesianScales: e } = this.services, n = this.getOptions(), s = xt(n, "locale.translations.total") || xt(n, "tooltip.totalLabel") || "Total", a = e.getDomainIdentifier(), r = e.getRangeIdentifier(), o = e.getDomainLabel(), c = e.getRangeLabel();
    this.parent.selectAll("g.cell").on("mouseover", function(l, h) {
      const d = D(this), u = d.select("rect.heat");
      if (!u.classed("null-state")) {
        const f = vn(d.attr("transform"));
        t.parent.select("g.cell-highlight").attr(
          "transform",
          `translate(${f.x + t.translationUnits.x}, ${f.y + t.translationUnits.y})`
        ).classed("highlighter-hidden", !1), t.services.events.dispatchEvent(T.Heatmap.HEATMAP_MOUSEOVER, {
          event: l,
          element: u,
          datum: h
        }), t.services.events.dispatchEvent(T.Tooltip.SHOW, {
          event: l,
          items: [
            {
              label: o,
              value: h[a]
            },
            {
              label: c,
              value: h[r]
            },
            {
              label: s,
              value: h.value,
              color: u.style("fill")
            }
          ]
        });
      }
    }).on("mousemove", function(l, h) {
      t.services.events.dispatchEvent(T.Heatmap.HEATMAP_MOUSEMOVE, {
        event: l,
        element: D(this),
        datum: h
      }), t.services.events.dispatchEvent(T.Tooltip.MOVE, {
        event: l
      });
    }).on("click", function(l, h) {
      t.services.events.dispatchEvent(T.Heatmap.HEATMAP_CLICK, {
        event: l,
        element: D(this),
        datum: h
      });
    }).on("mouseout", function(l, h) {
      const u = D(this).select("rect.heat"), p = u.classed("null-state");
      t.parent.select("g.cell-highlight").classed("highlighter-hidden", !0), p || (t.services.events.dispatchEvent(T.Heatmap.HEATMAP_MOUSEOUT, {
        event: l,
        element: u,
        datum: h
      }), t.services.events.dispatchEvent(T.Tooltip.HIDE, {
        event: l,
        hoveredElement: u
      }));
    });
  }
  // Remove event listeners
  destroy() {
    this.parent.selectAll("rect.heat").on("mouseover", null).on("mousemove", null).on("click", null).on("mouseout", null);
    const t = this.services.events;
    t.removeEventListener(T.Legend.ITEM_HOVER, this.handleAxisOnHover), t.removeEventListener(T.Legend.ITEM_MOUSEOUT, this.handleAxisMouseOut);
  }
}
class Hm extends dt {
  constructor() {
    super(...arguments), this.type = "histogram", this.renderType = at.SVG, this.handleLegendOnHover = (t) => {
      const { hoveredElement: e } = t.detail, n = this.getOptions(), { groupMapsTo: s } = n.data;
      this.parent.selectAll("path.bar").transition("legend-hover-bar").call(
        (a) => this.services.transitions.setupTransition({
          transition: a,
          name: "legend-hover-bar"
        })
      ).attr("opacity", (a) => a[s] !== e.datum().name ? 0.3 : 1);
    }, this.handleLegendMouseOut = () => {
      this.parent.selectAll("path.bar").transition("legend-mouseout-bar").call(
        (t) => this.services.transitions.setupTransition({
          transition: t,
          name: "legend-mouseout-bar"
        })
      ).attr("opacity", 1);
    };
  }
  init() {
    const t = this.services.events;
    t.addEventListener(T.Legend.ITEM_HOVER, this.handleLegendOnHover), t.addEventListener(T.Legend.ITEM_MOUSEOUT, this.handleLegendMouseOut);
  }
  render(t) {
    const e = this.getComponentContainer({
      ariaLabel: "histogram bars"
    }), n = this.model.getOptions(), { groupIdentifier: s } = n, { groupMapsTo: a } = n.data, r = this.model.getBinnedStackedData(), o = this.services.cartesianScales.getMainXScale(), c = e.selectAll("g.bars").data(r, (h) => xt(h, `0.${a}`));
    c.exit().attr("opacity", 0).remove(), c.enter().append("g").classed("bars", !0).attr("role", lt.GROUP);
    const l = e.selectAll("g.bars").selectAll("path.bar").data((h) => h);
    l.exit().remove(), l.enter().append("path").merge(l).classed("bar", !0).attr(s, (h, d) => d).transition().call(
      (h) => this.services.transitions.setupTransition({
        transition: h,
        name: "histogram-bar-update-enter",
        animate: t
      })
    ).attr(
      "class",
      (h) => this.model.getColorClassName({
        classNameTypes: [nt.FILL],
        dataGroupName: h[a],
        originalClassName: "bar"
      })
    ).style("fill", (h) => this.model.getFillColor(h[a], null, h)).attr("d", (h) => {
      const d = xt(h, "data");
      if (!d)
        return;
      const u = o(d.x1) - o(d.x0) - 1, p = this.services.cartesianScales.getDomainValue(d.x0), f = p + u, g = this.services.cartesianScales.getRangeValue(h[0]);
      let m = this.services.cartesianScales.getRangeValue(h[1]);
      return Math.abs(m - g) > 0 && Math.abs(m - g) > n.bars.dividerSize && (this.services.cartesianScales.getOrientation() === Xt.VERTICAL ? m += 1 : m -= 1), Gt(
        { x0: p, x1: f, y0: g, y1: m },
        this.services.cartesianScales.getOrientation()
      );
    }).attr("opacity", 1).attr("role", lt.GRAPHICS_SYMBOL).attr("aria-roledescription", "bar").attr("aria-label", (h) => L(h, "data", h[a])), this.addEventListeners();
  }
  addEventListeners() {
    const t = this.model.getOptions(), { groupMapsTo: e } = t.data, { code: n, number: s } = L(t, "locale"), a = this;
    this.parent.selectAll("path.bar").on("mouseover", function(r, o) {
      const c = D(this);
      c.classed("hovered", !0);
      const l = s(parseFloat(xt(o, "data.x0")), n), h = s(parseFloat(xt(o, "data.x1")), n), d = a.services.cartesianScales.getRangeAxisPosition(), u = a.services.cartesianScales.getScaleLabel(d);
      a.services.events.dispatchEvent(T.Tooltip.SHOW, {
        event: r,
        hoveredElement: c,
        items: [
          {
            label: xt(t, "bins.rangeLabel") || "Range",
            value: `${l} – ${h}`
          },
          {
            label: t.tooltip.groupLabel || "Group",
            value: o[e],
            class: a.model.getColorClassName({
              classNameTypes: [nt.TOOLTIP],
              dataGroupName: o[e]
            })
          },
          {
            label: u,
            value: xt(o, `data.${o[e]}`)
          }
        ]
      });
    }).on("mousemove", function(r) {
      a.services.events.dispatchEvent(T.Tooltip.MOVE, {
        event: r
      });
    }).on("mouseout", function() {
      D(this).classed("hovered", !1), a.services.events.dispatchEvent(T.Tooltip.HIDE);
    });
  }
  destroy() {
    this.parent.selectAll("path.bar").on("mouseover", null).on("mousemove", null).on("mouseout", null);
    const t = this.services.events;
    t.removeEventListener(T.Legend.ITEM_HOVER, this.handleLegendOnHover), t.removeEventListener(T.Legend.ITEM_MOUSEOUT, this.handleLegendMouseOut);
  }
}
class Bm extends Ji {
  constructor() {
    super(...arguments), this.type = "lollipop", this.renderType = at.SVG, this.handleScatterOnHover = (t) => {
      const e = t.detail, n = this.getOptions(), { groupMapsTo: s } = n.data;
      this.parent.selectAll("line.line").attr("stroke-width", (a) => a[s] !== e.datum[s] ? me.weight.unselected : me.weight.selected);
    }, this.handleScatterOnMouseOut = () => {
      this.parent.selectAll("line.line").attr("stroke-width", me.weight.unselected);
    }, this.handleLegendOnHover = (t) => {
      const { hoveredElement: e } = t.detail, n = this.getOptions(), { groupMapsTo: s } = n.data;
      this.parent.selectAll("line.line").transition("legend-hover-line").call(
        (a) => this.services.transitions.setupTransition({
          transition: a,
          name: "legend-hover-line"
        })
      ).attr("opacity", (a) => a[s] !== e.datum().name ? me.opacity.unselected : me.opacity.selected);
    }, this.handleLegendMouseOut = () => {
      this.parent.selectAll("line.line").transition("legend-mouseout-line").call(
        (t) => this.services.transitions.setupTransition({
          transition: t,
          name: "legend-mouseout-line"
        })
      ).attr("opacity", me.opacity.selected);
    };
  }
  init() {
    const { events: t } = this.services;
    t.addEventListener(T.Legend.ITEM_HOVER, this.handleLegendOnHover), t.addEventListener(T.Legend.ITEM_MOUSEOUT, this.handleLegendMouseOut);
  }
  render(t) {
    const e = this.getComponentContainer({ ariaLabel: "lines", withinChartClip: !0 }), n = this.model.getOptions(), { groupMapsTo: s } = n.data, { cartesianScales: a } = this.services, r = a.getMainXScale(), o = a.getMainYScale(), c = a.getDomainIdentifier(), l = (y) => a.getDomainValue(y), h = (y) => a.getRangeValue(y), d = a.getOrientation(), [u, p] = Ee(
      l,
      h,
      d
    ), f = e.selectAll("line.line").data(
      this.getScatterData(),
      (y) => `${y[s]}-${y[c]}`
    );
    f.exit().attr("opacity", 0).remove();
    const m = f.enter().append("line").attr("opacity", 0).merge(f).classed("line", !0).attr(
      "class",
      (y) => this.model.getColorClassName({
        classNameTypes: [nt.STROKE],
        dataGroupName: y[s],
        originalClassName: "line"
      })
    ).transition().call(
      (y) => this.services.transitions.setupTransition({
        transition: y,
        name: "lollipop-line-update-enter",
        animate: t
      })
    ).style("stroke", (y) => this.model.getFillColor(y[s], y[c], y)).attr("opacity", 1);
    d === Xt.HORIZONTAL ? m.attr("y1", p).attr("y2", p).attr("x1", r.range()[0]).attr("x2", (y) => u(y) - n.points.radius) : m.attr("x1", u).attr("x2", u).attr("y1", o.range()[0]).attr("y2", (y) => p(y) + n.points.radius), this.addScatterPointEventListeners();
  }
  // listen for when individual datapoints are hovered
  addScatterPointEventListeners() {
    this.services.events.addEventListener(
      T.Scatter.SCATTER_MOUSEOVER,
      this.handleScatterOnHover
    ), this.services.events.addEventListener(
      T.Scatter.SCATTER_MOUSEOUT,
      this.handleScatterOnMouseOut
    );
  }
  destroy() {
    const t = this.services.events;
    t.removeEventListener(T.Legend.ITEM_HOVER, this.handleLegendOnHover), t.removeEventListener(T.Legend.ITEM_MOUSEOUT, this.handleLegendMouseOut), t.removeEventListener(T.Scatter.SCATTER_MOUSEOVER, this.handleScatterOnHover), t.removeEventListener(
      T.Scatter.SCATTER_MOUSEOUT,
      this.handleScatterOnMouseOut
    );
  }
}
class zm extends dt {
  constructor() {
    super(...arguments), this.type = "meter", this.renderType = at.SVG;
  }
  getStackedBounds(t, e) {
    let n = 0;
    return t.map((a, r) => r !== 0 ? (n += e(a.value), {
      ...a,
      width: Math.abs(e(a.value) - _t.dividerWidth),
      x: n - e(a.value)
    }) : (n = e(a.value), {
      ...a,
      width: Math.abs(e(a.value) - _t.dividerWidth),
      x: 0
    }));
  }
  render(t = !0) {
    const e = this, n = this.getComponentContainer({
      ariaLabel: "meter lines"
    }), s = this.getOptions(), a = L(s, "meter", "proportional"), r = this.model.getDisplayData(), o = this.model.getStatus(), { width: c } = I.getSVGElementSize(n, {
      useAttrs: !0
    }), { groupMapsTo: l } = s.data;
    let h;
    if (L(s, "meter", "proportional") === null)
      h = 100;
    else {
      const v = L(s, "meter", "proportional", "total");
      h = v || this.model.getMaximumDomain(this.model.getDisplayData());
    }
    const d = Re().domain([0, h]).range([0, c]), u = this.getStackedBounds(r, d), p = L(s, "meter", "height");
    I.appendOrSelect(n, "rect.container").attr("x", 0).attr("y", 0).attr("width", c).attr(
      "height",
      p || (a ? _t.height.proportional : _t.height.default)
    ), I.appendOrSelect(n, "line.rangeIndicator").attr("x1", c).attr("x2", c).attr("y1", 0).attr(
      "y2",
      p || (a ? _t.height.proportional : _t.height.default)
    );
    const f = n.selectAll("rect.value").data(u), g = o != null && !e.model.isUserProvidedColorScaleValid() && !a ? `value status--${o}` : "value";
    f.enter().append("rect").classed("value", !0).merge(f).attr("x", (v) => v.x).attr("y", 0).attr("height", () => p || (a ? _t.height.proportional : _t.height.default)).attr(
      "class",
      (v) => this.model.getColorClassName({
        classNameTypes: [nt.FILL],
        dataGroupName: v[l],
        originalClassName: g
      })
    ).transition().call(
      (v) => this.services.transitions.setupTransition({
        transition: v,
        name: "meter-bar-update",
        animate: t
      })
    ).attr("width", (v) => v.value > h ? d(h) : Math.max(v.width, 2)).style("fill", (v) => e.model.getFillColor(v[l], null, v)).attr("role", lt.GRAPHICS_SYMBOL).attr("aria-roledescription", "value").attr("aria-label", (v) => v.value), f.exit().remove();
    const m = L(s, "meter", "peak");
    let y = m;
    m !== null && (m > h ? y = h : m < 0 && (y = 0));
    const S = n.selectAll("line.peak").data(y == null ? [] : [y]);
    S.enter().append("line").classed("peak", !0).merge(S).attr("y1", 0).attr("y2", () => p || (a ? _t.height.proportional : _t.height.default)).transition().call(
      (v) => this.services.transitions.setupTransition({
        transition: v,
        name: "peak-line-update",
        animate: t
      })
    ).attr("x1", (v) => d(v)).attr("x2", (v) => d(v)).attr("role", lt.GRAPHICS_SYMBOL).attr("aria-roledescription", "peak").attr("aria-label", (v) => v), S.exit().remove(), this.services.domUtils.setSVGMaxHeight(), this.addEventListeners();
  }
  // add event listeners for tooltips on proportional meter bars
  addEventListeners() {
    const t = this.getOptions(), { groupMapsTo: e } = t.data, n = this, s = L(t, "meter", "proportional");
    this.parent.selectAll("rect.value").on("mouseover", function(a, r) {
      const o = D(this);
      n.services.events.dispatchEvent(T.Meter.METER_MOUSEOVER, {
        event: a,
        element: o,
        datum: r
      }), s && (o.classed("hovered", !0), n.services.events.dispatchEvent(T.Tooltip.SHOW, {
        event: a,
        hoveredElement: o,
        items: [
          {
            label: r[e],
            value: r.value
          }
        ]
      }));
    }).on("mousemove", function(a, r) {
      const o = D(this);
      n.services.events.dispatchEvent(T.Meter.METER_MOUSEMOVE, {
        event: a,
        element: o,
        datum: r
      }), s && n.services.events.dispatchEvent(T.Tooltip.MOVE, {
        event: a
      });
    }).on("click", function(a, r) {
      n.services.events.dispatchEvent(T.Meter.METER_CLICK, {
        event: a,
        element: D(this),
        datum: r
      });
    }).on("mouseout", function(a, r) {
      const o = D(this);
      n.services.events.dispatchEvent(T.Meter.METER_MOUSEOUT, {
        event: a,
        element: o,
        datum: r
      }), s && (o.classed("hovered", !1), n.services.events.dispatchEvent(T.Tooltip.HIDE, {
        hoveredElement: o
      }));
    });
  }
  destroy() {
    this.parent.selectAll("rect.value").on("mouseover", null).on("mousemove", null).on("mouseout", null).on("click", null);
  }
}
class Um extends dt {
  constructor() {
    super(...arguments), this.type = "radar", this.renderType = at.SVG, this.getLabelDimensions = (t) => {
      const e = I.appendOrSelect(this.getComponentContainer(), "g.tmp-tick"), n = I.appendOrSelect(e, "text").text(t), { width: s, height: a } = I.getSVGElementSize(n.node(), { useBBox: !0 });
      return e.remove(), { width: s, height: a };
    }, this.normalizeFlatData = (t) => {
      const e = this.getOptions(), { angle: n, value: s } = L(e, "radar", "axes"), a = L(e, "data", "groupMapsTo"), r = Lc(
        this.uniqueKeys.map((o) => this.uniqueGroups.map((c) => ({
          [n]: o,
          [a]: c,
          [s]: null
        })))
      );
      return en(r, t);
    }, this.normalizeGroupedData = (t) => {
      const e = this.getOptions(), { angle: n, value: s } = L(e, "radar", "axes"), a = L(e, "data", "groupMapsTo");
      return t.map(({ name: r, data: o }) => {
        const c = this.uniqueKeys.map((l) => ({
          [a]: r,
          [n]: l,
          [s]: null
        }));
        return { name: r, data: en(c, o) };
      });
    }, this.handleLegendOnHover = (t) => {
      const { hoveredElement: e } = t.detail;
      this.parent.selectAll("g.blobs path").transition("legend-hover-blob").call(
        (n) => this.services.transitions.setupTransition({
          transition: n,
          name: "legend-hover-blob"
        })
      ).style("fill-opacity", (n) => n.name !== e.datum().name ? Le.opacity.unselected : Le.opacity.selected).style("stroke-opacity", (n) => n.name !== e.datum().name ? Le.opacity.unselected : 1);
    }, this.handleLegendMouseOut = () => {
      this.parent.selectAll("g.blobs path").transition("legend-mouseout-blob").call(
        (t) => this.services.transitions.setupTransition({
          transition: t,
          name: "legend-mouseout-blob"
        })
      ).style("fill-opacity", Le.opacity.selected).style("stroke-opacity", 1);
    };
  }
  init() {
    const { events: t } = this.services;
    t.addEventListener(T.Legend.ITEM_HOVER, this.handleLegendOnHover), t.addEventListener(T.Legend.ITEM_MOUSEOUT, this.handleLegendMouseOut);
  }
  render(t = !0) {
    const e = this.getComponentContainer({
      ariaLabel: "radar graph"
    }), { width: n, height: s } = I.getSVGElementSize(e, {
      useAttrs: !0
    }), a = this.model.getData(), r = this.model.getGroupedData(), o = this.getOptions(), c = L(o, "data", "groupMapsTo"), l = L(o, "radar", "axes", "value"), { angle: h, value: d } = L(o, "radar", "axes"), { xLabelPadding: u, yLabelPadding: p, yTicksNumber: f, minRange: g, xAxisRectHeight: m } = Le;
    this.uniqueKeys = Array.from(new Set(a.map((B) => B[h]))), this.uniqueGroups = Array.from(new Set(a.map((B) => B[c]))), this.fullDataNormalized = this.normalizeFlatData(a), this.groupedDataNormalized = this.normalizeGroupedData(r);
    const S = 2 * (this.getLabelDimensions(this.uniqueKeys[0]).height + p), x = (Math.min(n, s) - S) / 2;
    if (x <= 0)
      return;
    const b = Bi().domain(this.fullDataNormalized.map((B) => B[h])).range([0, 2 * Math.PI].map((B) => B - Math.PI / 2)), _ = di(this.fullDataNormalized.map((B) => B[d])), k = Re().domain([
      _ >= 0 ? 0 : _,
      Sa(this.fullDataNormalized.map((B) => B[d]))
    ]).range([g, x]).nice(f), G = k.ticks(f), R = (B, z, U) => this.model.getFillColor(B, z, U), A = sd().angle((B) => b(B[h]) + Math.PI / 2).radius((B) => k(B[d])).curve(Ll), H = this.uniqueKeys.map((B) => {
      const z = this.getLabelDimensions(B).width, U = Al(
        b(B),
        x
      );
      return z + U;
    }), M = {
      x: Sa(H) + u,
      y: s / 2
    }, P = I.appendOrSelect(e, "g.y-axes").attr("role", lt.GROUP).selectAll("path").data(G, (B) => B), $ = (B) => this.uniqueKeys.map((z) => ({ [h]: z, [d]: B }));
    P.join(
      (B) => B.append("path").attr("opacity", 0).attr("transform", `translate(${M.x}, ${M.y})`).attr("fill", "none").call(
        (z) => z.transition().call(
          (U) => this.services.transitions.setupTransition({
            transition: U,
            name: "radar_y_axes_enter",
            animate: t
          })
        ).attr("opacity", 1).attr("d", (U) => A($(U)))
      ),
      (B) => B.call(
        (z) => z.transition().call(
          (U) => this.services.transitions.setupTransition({
            transition: U,
            name: "radar_y_axes_update",
            animate: t
          })
        ).attr("opacity", 1).attr("transform", `translate(${M.x}, ${M.y})`).attr("d", (U) => A($(U)))
      ),
      (B) => B.call(
        (z) => z.transition().call(
          (U) => this.services.transitions.setupTransition({
            transition: U,
            name: "radar_y_axes_exit",
            animate: t
          })
        ).attr("d", (U) => A($(U))).attr("opacity", 0).remove()
      )
    ), I.appendOrSelect(e, "g.x-axes").attr("role", lt.GROUP).selectAll("line").data(this.uniqueKeys, (B) => B).join(
      (B) => B.append("line").attr("opacity", 0).attr("class", (z) => `x-axis-${Ue(z)}`).attr("stroke-dasharray", "0").attr("x1", (z) => bt(b(z), 0, M).x).attr("y1", (z) => bt(b(z), 0, M).y).attr("x2", (z) => bt(b(z), 0, M).x).attr("y2", (z) => bt(b(z), 0, M).y).call(
        (z) => z.transition().call(
          (U) => this.services.transitions.setupTransition({
            transition: U,
            name: "radar_x_axes_enter",
            animate: t
          })
        ).attr("opacity", 1).attr("x1", (U) => bt(b(U), k.range()[0], M).x).attr("y1", (U) => bt(b(U), k.range()[0], M).y).attr("x2", (U) => bt(b(U), k.range()[1], M).x).attr("y2", (U) => bt(b(U), k.range()[1], M).y)
      ),
      (B) => B.call(
        (z) => z.transition().call(
          (U) => this.services.transitions.setupTransition({
            transition: U,
            name: "radar_x_axes_update",
            animate: t
          })
        ).attr("opacity", 1).attr("x1", (U) => bt(b(U), k.range()[0], M).x).attr("y1", (U) => bt(b(U), k.range()[0], M).y).attr("x2", (U) => bt(b(U), k.range()[1], M).x).attr("y2", (U) => bt(b(U), k.range()[1], M).y)
      ),
      (B) => B.call(
        (z) => z.transition().call(
          (U) => this.services.transitions.setupTransition({
            transition: U,
            name: "radar_x_axes_exit",
            animate: t
          })
        ).attr("opacity", 0).remove()
      )
    ), I.appendOrSelect(e, "g.x-labels").attr("role", lt.GROUP).selectAll("text").data(this.uniqueKeys).join(
      (B) => B.append("text").text((z) => z).attr("opacity", 0).attr(
        "x",
        (z) => bt(b(z), k.range()[1] + u, M).x
      ).attr(
        "y",
        (z) => bt(b(z), k.range()[1] + u, M).y
      ).style("text-anchor", (z) => Ca(b(z)).textAnchor).style(
        "dominant-baseline",
        (z) => Ca(b(z)).dominantBaseline
      ).call(
        (z) => z.transition().call(
          (U) => this.services.transitions.setupTransition({
            transition: U,
            name: "radar_x_labels_enter",
            animate: t
          })
        ).attr("opacity", 1)
      ),
      (B) => B.call(
        (z) => z.transition().call(
          (U) => this.services.transitions.setupTransition({
            transition: U,
            name: "radar_x_labels_update",
            animate: t
          })
        ).attr("opacity", 1).attr(
          "x",
          (U) => bt(b(U), k.range()[1] + u, M).x
        ).attr(
          "y",
          (U) => bt(b(U), k.range()[1] + u, M).y
        ).end().finally(() => {
          const U = L(o, "radar", "alignment"), Mt = this.getAlignmentXOffset(U, e, this.getParent());
          e.attr("x", Mt);
        })
      ),
      (B) => B.call(
        (z) => z.transition().call(
          (U) => this.services.transitions.setupTransition({
            transition: U,
            name: "radar_x_labels_exit",
            animate: t
          })
        ).attr("opacity", 0).remove()
      )
    ), I.appendOrSelect(e, "g.blobs").attr("role", lt.GROUP).selectAll("path").data(this.groupedDataNormalized, (B) => B.name).join(
      (B) => B.append("path").attr(
        "class",
        (z) => this.model.getColorClassName({
          classNameTypes: [nt.FILL, nt.STROKE],
          dataGroupName: z.name,
          originalClassName: "blob"
        })
      ).attr("role", lt.GRAPHICS_SYMBOL).attr("aria-label", (z) => z.name).attr("opacity", 0).attr(
        "transform",
        t ? () => `translate(${M.x}, ${M.y}) scale(${1 + Math.random() * 0.35})` : `translate(${M.x}, ${M.y})`
      ).style("fill", (z) => R(z.name, null, z.data)).style("fill-opacity", Le.opacity.selected).style("stroke", (z) => R(z.name, null, z.data)).call((z) => {
        const U = z.transition().call(
          (Mt) => this.services.transitions.setupTransition({
            transition: Mt,
            name: "radar_blobs_enter",
            animate: t
          })
        );
        t && U.delay(() => Math.random() * 30).attr("transform", `translate(${M.x}, ${M.y})`), U.attr("opacity", 1).attr("d", (Mt) => A(Mt.data));
      }),
      (B) => (B.attr(
        "class",
        (z) => this.model.getColorClassName({
          classNameTypes: [nt.FILL, nt.STROKE],
          dataGroupName: z.name,
          originalClassName: "blob"
        })
      ).style("fill", (z) => R(z.name, null, z.data)).style("stroke", (z) => R(z.name, null, z.data)), B.call(
        (z) => z.transition().call(
          (U) => this.services.transitions.setupTransition({
            transition: U,
            name: "radar_blobs_update",
            animate: t
          })
        ).attr("opacity", 1).attr("transform", `translate(${M.x}, ${M.y})`).attr("d", (U) => A(U.data))
      ), B),
      (B) => B.call((z) => {
        const U = z.transition().call(
          (Mt) => this.services.transitions.setupTransition({
            transition: Mt,
            name: "radar_blobs_exit",
            animate: t
          })
        );
        t && U.delay(() => Math.random() * 30).attr(
          "transform",
          () => `translate(${M.x}, ${M.y}) scale(${1 + Math.random() * 0.35})`
        ), U.attr("opacity", 0).remove();
      })
    ), I.appendOrSelect(e, "g.dots").attr("role", lt.GROUP).selectAll("circle").data(this.fullDataNormalized.filter((B) => L(B, d) !== null)).join(
      (B) => B.append("circle").attr("role", lt.GRAPHICS_SYMBOL).attr("aria-label", (z) => z[l]),
      (B) => B,
      (B) => B.remove()
    ).attr(
      "class",
      (B) => this.model.getColorClassName({
        classNameTypes: [nt.FILL],
        dataGroupName: B[c],
        originalClassName: Ue(B[h])
      })
    ).attr("cx", (B) => bt(b(B[h]), k(B[d]), M).x).attr("cy", (B) => bt(b(B[h]), k(B[d]), M).y).attr("r", 0).attr("opacity", 0).style("fill", (B) => R(B[c])), I.appendOrSelect(e, "g.x-axes-rect").attr("role", lt.GROUP).selectAll("rect").data(this.uniqueKeys).join(
      (B) => B.append("rect"),
      (B) => B,
      (B) => B.remove()
    ).attr("x", M.x).attr("y", M.y - m / 2).attr("width", k.range()[1]).attr("height", m).style("fill", "red").style("fill-opacity", 0).attr("transform", (B) => `rotate(${Ml(b(B))}, ${M.x}, ${M.y})`);
    const { code: ot, number: ct } = L(o, "locale");
    I.appendOrSelect(e, "g.y-labels").attr("role", lt.GROUP).selectAll("text").data(Os(G)).join(
      (B) => B.append("text").attr("opacity", 0).text((z) => ct(z, ot)).attr(
        "x",
        (z) => bt(-Math.PI / 2, k(z), M).x + p
      ).attr("y", (z) => bt(-Math.PI / 2, k(z), M).y).style("text-anchor", "start").style("dominant-baseline", "middle").call(
        (z) => z.transition().call(
          (U) => this.services.transitions.setupTransition({
            transition: U,
            name: "radar_y_labels_enter",
            animate: t
          })
        ).attr("opacity", 1)
      ),
      (B) => B.call(
        (z) => z.transition().call(
          (U) => this.services.transitions.setupTransition({
            transition: U,
            name: "radar_y_labels_update",
            animate: t
          })
        ).text((U) => U).attr("opacity", 1).attr(
          "x",
          (U) => bt(-Math.PI / 2, k(U), M).x + p
        ).attr("y", (U) => bt(-Math.PI / 2, k(U), M).y)
      ),
      (B) => B.call(
        (z) => z.transition().call(
          (U) => this.services.transitions.setupTransition({
            transition: U,
            name: "radar_y_labels_exit",
            animate: t
          })
        ).attr("opacity", 0).remove()
      )
    ), this.addEventListeners();
  }
  getAlignmentXOffset(t, e, n) {
    const s = I.getSVGElementSize(e, {
      useBBox: !0
    }), { width: a } = I.getSVGElementSize(n, {
      useAttrs: !0
    });
    let r = 0;
    return t === te.CENTER ? r = Math.floor((a - s.width) / 2) : t === te.RIGHT && (r = a - s.width), r;
  }
  destroy() {
    this.parent.selectAll(".x-axes-rect > rect").on("mouseover", null).on("mousemove", null).on("mouseout", null);
    const t = this.services.events;
    t.removeEventListener(T.Legend.ITEM_HOVER, this.handleLegendOnHover), t.removeEventListener(T.Legend.ITEM_MOUSEOUT, this.handleLegendMouseOut);
  }
  addEventListeners() {
    const t = this, {
      axes: { angle: e }
    } = L(this.getOptions(), "radar");
    this.parent.selectAll(".x-axes-rect > rect").on("mouseover", function(n, s) {
      const a = D(this);
      t.services.events.dispatchEvent(T.Radar.X_AXIS_MOUSEOVER, {
        event: n,
        element: a,
        datum: s
      });
      const r = t.parent.select(`.x-axes .x-axis-${Ue(s)}`), o = t.parent.selectAll(`.dots circle.${Ue(s)}`), c = t.model.getActiveDataGroupNames(), l = t.getOptions(), { groupMapsTo: h } = l.data, d = L(l, "radar", "axes", "value");
      r.classed("hovered", !0).attr("stroke-dasharray", "4 4"), o.classed("hovered", !0).attr(
        "opacity",
        (p) => c.indexOf(p[h]) !== -1 ? 1 : 0
      ).attr("r", Le.dotsRadius);
      const u = t.fullDataNormalized.filter(
        (p) => p[e] === s && c.indexOf(p[h]) !== -1
      );
      t.services.events.dispatchEvent(T.Tooltip.SHOW, {
        event: n,
        hoveredElement: a,
        items: u.filter((p) => typeof p[d] == "number").map((p) => ({
          label: p[h],
          value: p[d],
          color: t.model.getFillColor(p[h], null, p),
          class: t.model.getColorClassName({
            classNameTypes: [nt.TOOLTIP],
            dataGroupName: p[h]
          })
        }))
      });
    }).on("mousemove", function(n, s) {
      const a = D(this);
      t.services.events.dispatchEvent(T.Radar.X_AXIS_MOUSEMOVE, {
        event: n,
        element: a,
        datum: s
      }), t.services.events.dispatchEvent(T.Tooltip.MOVE, {
        event: n
      });
    }).on("click", function(n, s) {
      t.services.events.dispatchEvent(T.Radar.X_AXIS_CLICK, {
        event: n,
        element: D(this),
        datum: s
      });
    }).on("mouseout", function(n, s) {
      const a = D(this), r = t.parent.select(`.x-axes .x-axis-${Ue(s)}`), o = t.parent.selectAll(`.dots circle.${Ue(s)}`);
      r.classed("hovered", !1).attr("stroke-dasharray", "0"), o.classed("hovered", !1).attr("opacity", 0).attr("r", 0), t.services.events.dispatchEvent(T.Radar.X_AXIS_MOUSEOUT, {
        event: n,
        element: a,
        datum: s
      }), t.services.events.dispatchEvent(T.Tooltip.HIDE);
    });
  }
}
class Fm extends ta {
  constructor() {
    super(...arguments), this.type = "simple-bar", this.renderType = at.SVG, this.handleLegendOnHover = (t) => {
      const { hoveredElement: e } = t.detail, { groupMapsTo: n } = this.getOptions().data;
      this.parent.selectAll("path.bar").transition("legend-hover-simple-bar").call(
        (s) => this.services.transitions.setupTransition({
          transition: s,
          name: "legend-hover-simple-bar"
        })
      ).attr("opacity", (s) => s[n] !== e.datum().name ? 0.3 : 1);
    }, this.handleLegendMouseOut = () => {
      this.parent.selectAll("path.bar").transition("legend-mouseout-simple-bar").call(
        (t) => this.services.transitions.setupTransition({
          transition: t,
          name: "legend-mouseout-simple-bar"
        })
      ).attr("opacity", 1);
    };
  }
  init() {
    const t = this.services.events;
    t.addEventListener(T.Legend.ITEM_HOVER, this.handleLegendOnHover), t.addEventListener(T.Legend.ITEM_MOUSEOUT, this.handleLegendMouseOut);
  }
  render(t) {
    const e = this.getOptions(), { groupMapsTo: n } = e.data, s = this.getComponentContainer({
      ariaLabel: "bar graphs",
      withinChartClip: !0
    }), a = this.model.getDisplayData(this.configs.groups), r = this.services.cartesianScales.getOrientation(), o = s.selectAll("path.bar").data(a, (l) => l[n]);
    o.exit().attr("opacity", 0).remove(), o.enter().append("path").attr("opacity", 0).merge(o).classed("bar", !0).attr("width", this.getBarWidth.bind(this)).transition().call(
      (l) => this.services.transitions.setupTransition({
        transition: l,
        name: "bar-update-enter",
        animate: t
      })
    ).attr(
      "class",
      (l) => this.model.getColorClassName({
        classNameTypes: [nt.FILL],
        dataGroupName: l[n],
        originalClassName: "bar"
      })
    ).style("fill", (l) => {
      const h = this.services.cartesianScales.getDomainIdentifier(l);
      return this.model.getFillColor(l[n], l[h], l);
    }).attr("d", (l) => {
      const h = this.services.cartesianScales.getRangeIdentifier(), d = this.getBarWidth(), u = l[h], p = this.services.cartesianScales.getDomainValue(l) - d / 2, f = p + d;
      let g, m;
      if (Array.isArray(u) && u.length === 2)
        g = this.services.cartesianScales.getRangeValue(u[0]), m = this.services.cartesianScales.getRangeValue(u[1]);
      else {
        const v = this.services.cartesianScales.getRangeScale().domain()[0];
        g = this.services.cartesianScales.getRangeValue(Math.max(0, v)), m = this.services.cartesianScales.getRangeValue(l);
      }
      const y = Math.abs(m - g);
      if (y !== 0 && y < 2 && (u > 0 && r === Xt.VERTICAL || u < 0 && r === Xt.HORIZONTAL ? m = g - 2 : m = g + 2), !this.isOutsideZoomedDomain(p, f))
        return Gt({ x0: p, x1: f, y0: g, y1: m }, r);
    }).attr("opacity", 1).attr("role", lt.GRAPHICS_SYMBOL).attr("aria-roledescription", "bar").attr("aria-label", (l) => l.value), this.addEventListeners();
  }
  addEventListeners() {
    const t = this;
    this.parent.selectAll("path.bar").on("mouseover", function(e, n) {
      const s = D(this);
      s.classed("hovered", !0), t.services.events.dispatchEvent(T.Bar.BAR_MOUSEOVER, {
        event: e,
        element: s,
        datum: n
      }), t.services.events.dispatchEvent(T.Tooltip.SHOW, {
        event: e,
        hoveredElement: s,
        data: [n]
      });
    }).on("mousemove", function(e, n) {
      t.services.events.dispatchEvent(T.Bar.BAR_MOUSEMOVE, {
        event: e,
        element: D(this),
        datum: n
      }), t.services.events.dispatchEvent(T.Tooltip.MOVE, {
        event: e
      });
    }).on("click", function(e, n) {
      t.services.events.dispatchEvent(T.Bar.BAR_CLICK, {
        event: e,
        element: D(this),
        datum: n
      });
    }).on("mouseout", function(e, n) {
      const s = D(this);
      s.classed("hovered", !1), t.services.events.dispatchEvent(T.Bar.BAR_MOUSEOUT, {
        event: e,
        element: s,
        datum: n
      }), t.services.events.dispatchEvent(T.Tooltip.HIDE, {
        hoveredElement: s
      });
    });
  }
  destroy() {
    this.parent.selectAll("path.bar").on("mouseover", null).on("mousemove", null).on("mouseout", null);
    const t = this.services.events;
    t.removeEventListener(T.Legend.ITEM_HOVER, this.handleLegendOnHover), t.removeEventListener(T.Legend.ITEM_MOUSEOUT, this.handleLegendMouseOut);
  }
}
class Wm extends sp {
  constructor() {
    super(...arguments), this.type = "skeleton-lines";
  }
  // eslint-disable-next-line @typescript-eslint/ban-ts-comment
  // @ts-ignore
  // eslint-disable-next-line @typescript-eslint/no-unused-vars
  render(t = !0) {
    const e = L(this.getOptions(), "data", "loading"), n = !L(this.getOptions(), "grid", "x", "enabled") && !L(this.getOptions(), "grid", "y", "enabled") && !L(this.getOptions(), "axes", "bottom", "visible") && !L(this.getOptions(), "axes", "left", "visible");
    e && !n ? super.renderGridSkeleton(e) : e && n ? this.renderSparklineSkeleton(e) : this.removeSkeleton();
  }
  renderSparklineSkeleton(t) {
    this.setScales(), this.drawBackdrop(t), this.drawSparkline(t), this.updateBackdropStyle(), t && this.setShimmerEffect("shimmer-lines");
  }
  drawSparkline(t) {
    const e = this.backdrop.attr("width"), n = [100], s = I.appendOrSelect(this.backdrop, "g.y.skeleton"), a = s.selectAll("line").data(n);
    a.enter().append("line").merge(a).attr("x1", 0).attr("x2", e).attr("y1", (r) => r).attr("y2", (r) => r), s.selectAll("line").classed("shimmer-effect-lines", t).classed("empty-state-lines", !t).style(
      "stroke",
      t ? `url(#${this.services.domUtils.generateElementIDString("shimmer-lines")})` : null
    );
  }
  updateBackdropStyle() {
    const t = this.parent;
    this.backdrop = I.appendOrSelect(t, "svg.chart-skeleton.DAII"), I.appendOrSelect(this.backdrop, "rect.chart-skeleton-backdrop").classed("shimmer-effect-lines", !1).classed("shimmer-effect-sparkline", !0).style("stroke", null);
  }
}
class Xm extends dt {
  constructor() {
    super(...arguments), this.type = "area-stacked", this.renderType = at.SVG, this.handleLegendOnHover = (t) => {
      const { hoveredElement: e } = t.detail, n = this.getOptions(), { groupMapsTo: s } = n.data;
      this.parent.selectAll("path.area").transition("legend-hover-area").call(
        (a) => this.services.transitions.setupTransition({
          transition: a,
          name: "legend-hover-area"
        })
      ).attr("opacity", (a) => L(a, 0, s) !== e.datum().name ? ve.opacity.unselected : ve.opacity.selected);
    }, this.handleLegendMouseOut = () => {
      this.parent.selectAll("path.area").transition("legend-mouseout-area").call(
        (t) => this.services.transitions.setupTransition({
          transition: t,
          name: "legend-mouseout-area"
        })
      ).attr("opacity", ve.opacity.selected);
    };
  }
  init() {
    const t = this.services.events;
    t.addEventListener(T.Legend.ITEM_HOVER, this.handleLegendOnHover), t.addEventListener(T.Legend.ITEM_MOUSEOUT, this.handleLegendMouseOut);
  }
  render(t = !0) {
    const e = this.getComponentContainer({
      ariaLabel: "stacked area graphs",
      withinChartClip: !0
    }), n = this, s = this.getOptions(), { groupMapsTo: a } = s.data, r = Object.keys(s.axes).some((f) => s.axes[f].percentage), o = this.model.getStackedData({
      percentage: r,
      groups: this.configs.groups
    }), c = L(o, 0, 0), l = this.services.cartesianScales.getDomainAxisPosition({ datum: c }), h = this.services.cartesianScales.getRangeAxisPosition({ datum: c }), d = this.services.cartesianScales.getScaleByPosition(h), u = e.selectAll("path.area").data(o, (f) => L(f, 0, a));
    this.areaGenerator = ji().x(
      (f) => this.services.cartesianScales.getValueThroughAxisPosition(
        l,
        f.data.sharedStackKey
      )
    ).y0((f) => d(f[0])).y1((f) => d(f[1])).curve(this.services.curves.getD3Curve()), u.exit().attr("opacity", 0).remove(), u.enter().append("path").attr("opacity", 0).merge(u).data(o, (f) => L(f, 0, a)).attr("class", "area").attr(
      "class",
      (f) => this.model.getColorClassName({
        classNameTypes: [nt.FILL],
        dataGroupName: L(f, 0, a),
        originalClassName: "area"
      })
    ).style("fill", (f) => n.model.getFillColor(L(f, 0, a), null, f)).attr("role", lt.GRAPHICS_SYMBOL).attr("aria-roledescription", "area").attr("aria-label", (f) => L(f, 0, a)).transition().call(
      (f) => this.services.transitions.setupTransition({
        transition: f,
        name: "area-update-enter",
        animate: t
      })
    ).attr("opacity", ve.opacity.selected).attr("d", this.areaGenerator);
  }
}
class Ym extends ta {
  constructor() {
    super(...arguments), this.type = "stacked-bar", this.renderType = at.SVG, this.handleLegendOnHover = (t) => {
      const { hoveredElement: e } = t.detail, { groupMapsTo: n } = this.model.getOptions().data;
      this.parent.selectAll("path.bar").transition("legend-hover-bar").call(
        (s) => this.services.transitions.setupTransition({
          transition: s,
          name: "legend-hover-bar"
        })
      ).attr("opacity", (s) => s[n] !== e.datum().name ? 0.3 : 1);
    }, this.handleLegendMouseOut = () => {
      this.parent.selectAll("path.bar").transition("legend-mouseout-bar").call(
        (t) => this.services.transitions.setupTransition({
          transition: t,
          name: "legend-mouseout-bar"
        })
      ).attr("opacity", 1);
    };
  }
  init() {
    const t = this.services.events;
    t.addEventListener(T.Legend.ITEM_HOVER, this.handleLegendOnHover), t.addEventListener(T.Legend.ITEM_MOUSEOUT, this.handleLegendMouseOut);
  }
  render(t) {
    const e = this.getComponentContainer({ ariaLabel: "stacked bar graphs", withinChartClip: !0 }), n = this.getOptions(), { groupMapsTo: s } = n.data, a = this.model.getStackedData({
      groups: this.configs.groups,
      divergent: !0
    }), r = this.model.getActiveDataGroupNames(), o = e.selectAll("g.bars").data(a, (l) => L(l, 0, s));
    o.exit().attr("opacity", 0).remove(), o.enter().append("g").classed("bars", !0).attr("role", lt.GROUP).attr("data-name", "bars");
    const c = e.selectAll("g.bars").selectAll("path.bar").data(
      (l) => l,
      (l) => l.data.sharedStackKey
    );
    c.exit().remove(), c.enter().append("path").merge(c).classed("bar", !0).transition().call(
      (l) => this.services.transitions.setupTransition({
        transition: l,
        name: "bar-update-enter",
        animate: t
      })
    ).attr(
      "class",
      (l) => this.model.getColorClassName({
        classNameTypes: [nt.FILL],
        dataGroupName: l[s],
        originalClassName: "bar"
      })
    ).style(
      "fill",
      (l) => this.model.getFillColor(l[s], l.data.sharedStackKey, l.data)
    ).attr("d", (l) => {
      const h = l.data.sharedStackKey, d = this.getBarWidth(), u = this.services.cartesianScales.getDomainValue(h) - d / 2, p = u + d, f = this.services.cartesianScales.getRangeValue(l[0]);
      let g = this.services.cartesianScales.getRangeValue(l[1]);
      if (!this.isOutsideZoomedDomain(u, p)) {
        if (Math.abs(g - f) > 0 && Math.abs(g - f) > n.bars.dividerSize) {
          const m = l[0] < 0 && l[1] <= 0;
          m && r.length > 1 ? this.services.cartesianScales.getOrientation() === Xt.VERTICAL ? g += l[1] === 0 ? 2 : 1 : g -= 1 : m || (this.services.cartesianScales.getOrientation() === Xt.VERTICAL ? g += 1 : g -= 1);
        }
        return Gt(
          { x0: u, x1: p, y0: f, y1: g },
          this.services.cartesianScales.getOrientation()
        );
      }
    }).attr("opacity", 1).attr("role", lt.GRAPHICS_SYMBOL).attr("aria-roledescription", "bar").attr("aria-label", (l) => l[1] - l[0]), this.addEventListeners();
  }
  addEventListeners() {
    const t = this.getOptions(), { groupMapsTo: e } = t.data, n = this;
    this.parent.selectAll("path.bar").on("mouseover", function(s, a) {
      const r = D(this);
      r.classed("hovered", !0), n.services.events.dispatchEvent(T.Bar.BAR_MOUSEOVER, {
        event: s,
        element: r,
        datum: a
      });
      let c = n.model.getDisplayData(n.configs.groups).find((l) => {
        const h = n.services.cartesianScales.getDomainIdentifier(l), d = n.services.cartesianScales.getRangeIdentifier(l);
        return l[d] === a.data[a[e]] && l[h].toString() === a.data.sharedStackKey && l[e] === a[e];
      });
      if (c === void 0) {
        const l = n.services.cartesianScales.getDomainIdentifier(), h = n.services.cartesianScales.getRangeIdentifier();
        c = {
          [l]: a.data.sharedStackKey,
          [h]: a.data[a[e]],
          [e]: a[e]
        };
      }
      n.services.events.dispatchEvent(T.Tooltip.SHOW, {
        event: s,
        hoveredElement: r,
        data: [c]
      });
    }).on("mousemove", function(s, a) {
      const r = D(this);
      n.services.events.dispatchEvent(T.Bar.BAR_MOUSEMOVE, {
        event: s,
        element: r,
        datum: a
      }), n.services.events.dispatchEvent(T.Tooltip.MOVE, {
        event: s
      });
    }).on("click", function(s, a) {
      n.services.events.dispatchEvent(T.Bar.BAR_CLICK, {
        event: s,
        element: D(this),
        datum: a
      });
    }).on("mouseout", function(s, a) {
      const r = D(this);
      r.classed("hovered", !1), n.services.events.dispatchEvent(T.Bar.BAR_MOUSEOUT, {
        event: s,
        element: r,
        datum: a
      }), n.services.events.dispatchEvent(T.Tooltip.HIDE, {
        hoveredElement: r
      });
    });
  }
  getBarWidth() {
    const t = this.getOptions();
    if (L(t, "bars", "width"))
      return t.bars.width;
    const e = this.services.cartesianScales.getMainXScale(), n = I.getSVGElementSize(this.parent, {
      useAttrs: !0
    }).width, s = this.model.getStackKeys().length, a = L(t, "bars", "spacingFactor");
    return e.step ? Math.min(t.bars.maxWidth, e.step() / 2) : Math.min(t.bars.maxWidth, n * a / s);
  }
  destroy() {
    this.parent.selectAll("path.bar").on("mouseover", null).on("mousemove", null).on("mouseout", null);
    const t = this.services.events;
    t.removeEventListener(T.Legend.ITEM_HOVER, this.handleLegendOnHover), t.removeEventListener(T.Legend.ITEM_MOUSEOUT, this.handleLegendMouseOut);
  }
}
class Zm extends Ji {
  constructor() {
    super(...arguments), this.type = "scatter-stacked", this.renderType = at.SVG;
  }
  render(t) {
    if (!L(this.getOptions(), "points", "enabled"))
      return;
    const n = this.getComponentContainer({ ariaLabel: "scatter points", withinChartClip: !0 }), s = this.getOptions(), { groupMapsTo: a } = s.data, r = Object.keys(s.axes).some((p) => s.axes[p].percentage), o = this.model.getStackedData({
      groups: this.configs.groups,
      percentage: r
    }), c = n.selectAll("g.dots").data(o, (p) => L(p, 0, a));
    c.exit().attr("opacity", 0).remove();
    const h = c.enter().append("g").classed("dots", !0).attr("role", lt.GROUP).merge(c).selectAll("circle.dot").data((p) => p);
    h.exit().attr("opacity", 0).remove();
    const u = h.enter().append("circle").classed("dot", !0).attr("opacity", 0).merge(h).datum((p) => {
      const f = p[a], g = this.services.cartesianScales.getDomainIdentifier(p), m = this.services.cartesianScales.getRangeIdentifier(p);
      return {
        [a]: f,
        [g]: p.data.sharedStackKey,
        [m]: p[1]
      };
    });
    this.styleCircles(u, t), this.addEventListeners();
  }
  getTooltipData(t, e) {
    const n = this.getOptions(), { groupMapsTo: s } = n.data, a = Object.keys(n.axes).some((c) => n.axes[c].percentage), r = this.model.getStackedData({
      groups: this.configs.groups,
      percentage: a
    }), o = [];
    return r.forEach((c, l) => {
      c.forEach((h, d) => {
        const u = h[s], p = h.data.sharedStackKey;
        let f = h.data[u];
        const g = h[1], m = this.services.cartesianScales.getDomainIdentifier(h), y = this.services.cartesianScales.getRangeIdentifier(h);
        f != null && t === this.services.cartesianScales.getDomainValue(p) && e === this.services.cartesianScales.getRangeValue(g) && (a && (f = this.model.getStackedData({
          groups: this.configs.groups
        })[l][d].data[u]), f !== null && o.push({
          [s]: u,
          [m]: p,
          [y]: f
        }));
      });
    }), this.model.getDisplayData(this.configs.groups).filter((c) => {
      const l = this.services.cartesianScales.getDomainIdentifier(c), h = this.services.cartesianScales.getRangeIdentifier(c);
      return o.find((d) => d[s] == c[s] && d[l] == c[l] && d[h] == c[h]) !== void 0;
    });
  }
}
const mn = 6;
class qm extends dt {
  constructor() {
    super(...arguments), this.type = "tree", this.renderType = at.SVG;
  }
  getLongestLabel(t) {
    let e = "";
    return t.forEach((n) => {
      const s = n.children ? this.getLongestLabel(n.children) : "";
      (s.length > e.length || n.name.length > e.length) && (e = s.length > n.name.length ? s : n.name);
    }), e;
  }
  getMockLabelWidth(t, e) {
    const n = t.append("text").attr("dy", "0.31em").attr("x", 0).attr("text-anchor", "end").text(e), { width: s } = I.getSVGElementSize(n.node(), {
      useBBox: !0
    });
    return n.remove(), s;
  }
  // eslint-disable-next-line @typescript-eslint/ban-ts-comment
  // @ts-ignore
  // eslint-disable-next-line @typescript-eslint/no-unused-vars
  render(t = !0) {
    const e = this.getComponentContainer({
      ariaLabel: "tree diagram"
    });
    e.html("");
    const { width: n, height: s } = I.getSVGElementSize(this.parent, {
      useAttrs: !0
    });
    if (n < 1 || s < 1)
      return;
    const a = this.model.getOptions(), r = this.model.getDisplayData(), o = L(a, "tree", "rootTitle") || "Tree", c = this.getMockLabelWidth(e, o), l = this.getLongestLabel(r), h = this.getMockLabelWidth(e, l), d = {
      left: c > 0 ? c + mn : 30 - mn
    }, u = Rn({
      name: o,
      children: r
    }), p = 10, f = n / 6, g = (b) => {
      const _ = u.descendants().reverse(), k = u.links();
      let G = u, R = u;
      u.eachBefore((C) => {
        C.x < G.x && (G = C), C.x > R.x && (R = C);
      });
      const A = R.x - G.x, H = e.transition().call(
        (C) => this.services.transitions.setupTransition({
          transition: C,
          name: "tree-update-viewbox",
          animate: !0
        })
      ).attr("viewBox", [-d.left, G.x, n, A].join(" ")), N = x.selectAll("g").data(_, (C) => C.id), M = this, O = N.enter().append("g").attr("transform", () => `translate(${b.y0},${b.x0})`).attr(
        "class",
        (C) => C.depth !== 0 && C.children && C.children.length > 0 ? "clickable" : null
      ).on("mouseover", function(C, V) {
        M.services.events.dispatchEvent(T.Tree.NODE_MOUSEOVER, {
          event: C,
          element: D(this),
          datum: V
        });
      }).on("click", function(C, V) {
        V.depth !== 0 && (V.children = V.children ? null : V._children, g(V)), M.services.events.dispatchEvent(T.Tree.NODE_CLICK, {
          event: C,
          element: D(this),
          datum: V
        });
      }).on("mouseout", function(C, V) {
        M.services.events.dispatchEvent(T.Tree.NODE_MOUSEOUT, {
          event: C,
          element: D(this),
          datum: V
        });
      });
      O.append("circle").attr("r", 2.5).attr("class", (C) => C._children ? "parent" : "child").attr("stroke-width", 10), O.append("text").attr("dy", "0.31em").attr("x", (C) => C._children ? -6 : mn).attr("text-anchor", (C) => C._children ? "end" : "start").text((C) => C.data.name).clone(!0).attr("class", "text-stroke").lower(), N.merge(O).transition(H).attr("transform", (C) => `translate(${C.y},${C.x})`).attr("fill-opacity", 1).attr("stroke-opacity", 1), N.exit().transition(H).remove().attr("transform", () => `translate(${b.y},${b.x})`).attr("fill-opacity", 0).attr("stroke-opacity", 0);
      const P = E.selectAll("path").data(k, (C) => C.target.id), $ = P.enter().append("path").attr("d", () => {
        const C = { x: b.x0, y: b.y0 };
        return v({ source: C, target: C });
      });
      P.merge($).transition(H).attr("d", v), P.exit().transition(H).remove().attr("d", () => {
        const C = { x: b.x, y: b.y };
        return v({ source: C, target: C });
      }), u.eachBefore((C) => {
        C.x0 = C.x, C.y0 = C.y;
      });
    }, m = u.descendants(), y = m[m.length - 1].depth, S = L(a, "tree", "type") === Sl.DENDROGRAM ? Qu().size([
      s,
      n - h - y * mn - c
    ]) : Hh().nodeSize([p, f]).size([
      s,
      n - h - y * mn - c
    ]), v = cd().x((b) => b.y).y((b) => b.x);
    u.x0 = f / 2, u.y0 = 0, u.descendants().forEach((b, _) => {
      b.id = _, b._children = b.children;
    }), S(u), e.attr("viewBox", [-d.left, -0, n, p]).style("user-select", "none");
    const E = e.append("g").attr("class", "links"), x = e.append("g").attr("class", "nodes");
    g(u);
  }
}
var fp = "#000000", gp = "#ffffff", mp = "#fcf4d6", vp = "#fddc69", yp = "#f1c21b", Ep = "#d2a106", xp = "#b28600", Sp = "#8e6a00", Tp = "#684e00", bp = "#483700", Op = "#302400", Lp = "#1c1500", Ap = {
  10: mp,
  20: vp,
  30: yp,
  40: Ep,
  50: xp,
  60: Sp,
  70: Tp,
  80: bp,
  90: Op,
  100: Lp
}, Mp = "#fff2e8", wp = "#ffd9be", Cp = "#ffb784", kp = "#ff832b", _p = "#eb6200", Ip = "#ba4e00", Rp = "#8a3800", Dp = "#5e2900", Np = "#3e1a00", Pp = "#231000", $p = {
  10: Mp,
  20: wp,
  30: Cp,
  40: kp,
  50: _p,
  60: Ip,
  70: Rp,
  80: Dp,
  90: Np,
  100: Pp
}, Vp = "#fff1f1", Gp = "#ffd7d9", Hp = "#ffb3b8", Bp = "#ff8389", zp = "#fa4d56", Up = "#da1e28", Fp = "#a2191f", Wp = "#750e13", Xp = "#520408", Yp = "#2d0709", Zp = {
  10: Vp,
  20: Gp,
  30: Hp,
  40: Bp,
  50: zp,
  60: Up,
  70: Fp,
  80: Wp,
  90: Xp,
  100: Yp
}, qp = "#fff0f7", jp = "#ffd6e8", Kp = "#ffafd2", Jp = "#ff7eb6", Qp = "#ee5396", tf = "#d02670", ef = "#9f1853", nf = "#740937", sf = "#510224", af = "#2a0a18", rf = {
  10: qp,
  20: jp,
  30: Kp,
  40: Jp,
  50: Qp,
  60: tf,
  70: ef,
  80: nf,
  90: sf,
  100: af
}, of = "#f6f2ff", lf = "#e8daff", cf = "#d4bbff", uf = "#be95ff", hf = "#a56eff", df = "#8a3ffc", pf = "#6929c4", ff = "#491d8b", gf = "#31135e", mf = "#1c0f30", vf = {
  10: of,
  20: lf,
  30: cf,
  40: uf,
  50: hf,
  60: df,
  70: pf,
  80: ff,
  90: gf,
  100: mf
}, yf = "#edf5ff", Ef = "#d0e2ff", xf = "#a6c8ff", Sf = "#78a9ff", Tf = "#4589ff", bf = "#0f62fe", Of = "#0043ce", Lf = "#002d9c", Af = "#001d6c", Mf = "#001141", wf = {
  10: yf,
  20: Ef,
  30: xf,
  40: Sf,
  50: Tf,
  60: bf,
  70: Of,
  80: Lf,
  90: Af,
  100: Mf
}, Cf = "#e5f6ff", kf = "#bae6ff", _f = "#82cfff", If = "#33b1ff", Rf = "#1192e8", Df = "#0072c3", Nf = "#00539a", Pf = "#003a6d", $f = "#012749", Vf = "#061727", Gf = {
  10: Cf,
  20: kf,
  30: _f,
  40: If,
  50: Rf,
  60: Df,
  70: Nf,
  80: Pf,
  90: $f,
  100: Vf
}, Hf = "#d9fbfb", Bf = "#9ef0f0", zf = "#3ddbd9", Uf = "#08bdba", Ff = "#009d9a", Wf = "#007d79", Xf = "#005d5d", Yf = "#004144", Zf = "#022b30", qf = "#081a1c", jf = {
  10: Hf,
  20: Bf,
  30: zf,
  40: Uf,
  50: Ff,
  60: Wf,
  70: Xf,
  80: Yf,
  90: Zf,
  100: qf
}, Kf = "#defbe6", Jf = "#a7f0ba", Qf = "#6fdc8c", tg = "#42be65", eg = "#24a148", ng = "#198038", sg = "#0e6027", ig = "#044317", ag = "#022d0d", rg = "#071908", og = {
  10: Kf,
  20: Jf,
  30: Qf,
  40: tg,
  50: eg,
  60: ng,
  70: sg,
  80: ig,
  90: ag,
  100: rg
}, lg = "#f2f4f8", cg = "#dde1e6", ug = "#c1c7cd", hg = "#a2a9b0", dg = "#878d96", pg = "#697077", fg = "#4d5358", gg = "#343a3f", mg = "#21272a", vg = "#121619", yg = {
  10: lg,
  20: cg,
  30: ug,
  40: hg,
  50: dg,
  60: pg,
  70: fg,
  80: gg,
  90: mg,
  100: vg
}, Eg = "#f4f4f4", xg = "#e0e0e0", Sg = "#c6c6c6", Tg = "#a8a8a8", bg = "#8d8d8d", Og = "#6f6f6f", Lg = "#525252", Ag = "#393939", Mg = "#262626", wg = "#161616", Cg = {
  10: Eg,
  20: xg,
  30: Sg,
  40: Tg,
  50: bg,
  60: Og,
  70: Lg,
  80: Ag,
  90: Mg,
  100: wg
}, kg = "#f7f3f2", _g = "#e5e0df", Ig = "#cac5c4", Rg = "#ada8a8", Dg = "#8f8b8b", Ng = "#726e6e", Pg = "#565151", $g = "#3c3838", Vg = "#272525", Gg = "#171414", Hg = {
  10: kg,
  20: _g,
  30: Ig,
  40: Rg,
  50: Dg,
  60: Ng,
  70: Pg,
  80: $g,
  90: Vg,
  100: Gg
}, Pr = {
  black: {
    100: fp
  },
  blue: wf,
  coolGray: yg,
  cyan: Gf,
  gray: Cg,
  green: og,
  magenta: rf,
  orange: $p,
  purple: vf,
  red: Zp,
  teal: jf,
  warmGray: Hg,
  white: {
    0: gp
  },
  yellow: Ap
};
const Bg = (i) => {
  if (!i)
    return null;
  for (const t of Object.keys(Pr)) {
    const e = Pr[t];
    for (const n of Object.keys(e))
      if (e[+n] === i)
        return n;
  }
  return null;
}, $r = function(i) {
  const t = D(this.parentNode).select("rect.leaf"), e = i.backgroundColor ?? getComputedStyle(t.node(), null).getPropertyValue("fill"), n = Xr(e);
  let s;
  if (n && (s = Bg(n ? n.hex() : null)), s == null) {
    const a = yl(n).l;
    s = Math.abs(a * 100 - 100);
  }
  return s > 50 ? "white" : "black";
};
let zg = 0;
class jm extends dt {
  constructor() {
    super(...arguments), this.type = "treemap", this.renderType = at.SVG, this.handleLegendOnHover = (t) => {
      const { hoveredElement: e } = t.detail;
      this.parent.selectAll("g[data-name='leaf']").transition("legend-hover-treemap").call(
        (n) => this.services.transitions.setupTransition({
          transition: n,
          name: "legend-hover-treemap"
        })
      ).attr(
        "opacity",
        (n) => n.parent.data.name === e.datum().name ? 1 : 0.3
      );
    }, this.handleLegendMouseOut = () => {
      this.parent.selectAll("g[data-name='leaf']").transition("legend-mouseout-treemap").call(
        (t) => this.services.transitions.setupTransition({
          transition: t,
          name: "legend-mouseout-treemap"
        })
      ).attr("opacity", 1);
    };
  }
  init() {
    const { events: t } = this.services;
    t.addEventListener(T.Legend.ITEM_HOVER, this.handleLegendOnHover), t.addEventListener(T.Legend.ITEM_MOUSEOUT, this.handleLegendMouseOut);
  }
  render(t = !0) {
    const e = this.getComponentContainer({
      ariaLabel: "treemap"
    });
    this.model.getData();
    const n = this.model.getDisplayData(), s = this.model.getOptions(), a = L(window, "location"), { width: r, height: o } = I.getSVGElementSize(e, {
      useAttrs: !0
    }), c = Rn({
      name: s.title || "Treemap",
      children: n
    }).sum((g) => g.value).sort((g, m) => m.value - g.value), l = Wh().size([r, o]).paddingInner(1).paddingOuter(0).round(!0)(
      c
    ), h = e.selectAll("g[data-name='leaf']").data(l.leaves(), (g) => g.data.name);
    h.exit().attr("opacity", 0).remove();
    const u = h.enter().append("g").attr("data-name", "leaf").attr("data-uid", () => zg++).merge(h);
    u.attr("data-name", "leaf").transition().call(
      (g) => this.services.transitions.setupTransition({
        transition: g,
        name: "treemap-group-update",
        animate: t
      })
    ).attr("transform", (g) => `translate(${g.x0},${g.y0})`);
    const p = u.selectAll("rect.leaf").data((g) => [g]);
    p.exit().attr("width", 0).attr("height", 0).remove(), p.enter().append("rect").classed("leaf", !0).merge(p).attr("width", 0).attr("height", 0).attr("id", function() {
      const g = D(this.parentNode).attr("data-uid");
      return `${s.style.prefix}-leaf-${g}`;
    }).attr("class", (g) => {
      for (; g.depth > 1; ) g = g.parent;
      return this.model.getColorClassName({
        classNameTypes: [nt.FILL],
        dataGroupName: g.data.name,
        originalClassName: "leaf"
      });
    }).transition().call(
      (g) => this.services.transitions.setupTransition({
        transition: g,
        name: "treemap-leaf-update-enter",
        animate: t
      })
    ).attr("width", (g) => g.x1 - g.x0).attr("height", (g) => g.y1 - g.y0).style("fill", (g) => {
      for (; g.depth > 1; ) g = g.parent;
      return this.model.getFillColor(g.data.name, null, g.data);
    }), u.selectAll("clipPath").data(
      (g) => g.data.showLabel !== !0 ? [] : [1],
      (g) => g
    ).join(
      (g) => g.append("clipPath").attr("id", function() {
        const m = D(this.parentNode).attr("data-uid");
        return `${s.style.prefix}-clip-${m}`;
      }).append("use").attr("xlink:href", function() {
        const m = D(this.parentNode.parentNode).attr("data-uid"), y = `${s.style.prefix}-leaf-${m}`;
        return new URL(`#${y}`, a) + "";
      }),
      // eslint-disable-next-line @typescript-eslint/ban-ts-comment
      // @ts-ignore
      // eslint-disable-next-line @typescript-eslint/no-unused-vars
      (g) => null,
      (g) => g.remove()
    ), u.selectAll("text").data(
      (g) => {
        if (g.data.showLabel !== !0)
          return [];
        let m = g;
        for (; m.depth > 1; ) m = m.parent;
        return [
          {
            text: g.data.name,
            backgroundColor: this.model.getFillColor(m.data.name)
          }
        ];
      },
      (g) => g
    ).join(
      (g) => {
        const m = g.append("text").text((y) => y.text).style("fill", $r).attr("x", 7).attr("y", 18);
        return a && m.attr("clip-path", function() {
          const y = D(this.parentNode).attr("data-uid"), S = `${s.style.prefix}-clip-${y}`;
          return `url(${new URL(`#${S}`, a) + ""})`;
        }), m;
      },
      (g) => g.text((m) => m.text).style("fill", $r),
      (g) => g.remove()
    ), this.addEventListeners();
  }
  addEventListeners() {
    const t = this;
    this.parent.selectAll("rect.leaf").on("mouseover", function(e, n) {
      const s = D(this);
      let a = getComputedStyle(this, null).getPropertyValue("fill"), r = n;
      for (; r.depth > 1; ) r = r.parent;
      s.transition("graph_element_mouseover_fill_update").call(
        (o) => t.services.transitions.setupTransition({
          transition: o,
          name: "graph_element_mouseover_fill_update"
        })
      ).style("fill", (o) => {
        const c = t.model.getFillColor(o.parent.data.name, null, o.data);
        return c && (a = c), Xr(a).darker(0.7).toString();
      }), t.services.events.dispatchEvent(T.Tooltip.SHOW, {
        event: e,
        hoveredElement: s,
        items: [
          {
            color: a,
            label: r.data.name,
            bold: !0
          },
          {
            label: n.data.name,
            value: n.data.value
          }
        ]
      }), t.services.events.dispatchEvent(T.Treemap.LEAF_MOUSEOVER, {
        event: e,
        element: s,
        datum: n
      });
    }).on("mousemove", function(e, n) {
      const s = D(this);
      t.services.events.dispatchEvent(T.Treemap.LEAF_MOUSEMOVE, {
        event: e,
        element: s,
        datum: n
      }), t.services.events.dispatchEvent(T.Tooltip.MOVE, {
        event: e
      });
    }).on("click", function(e, n) {
      t.services.events.dispatchEvent(T.Treemap.LEAF_CLICK, {
        event: e,
        element: D(this),
        datum: n
      });
    }).on("mouseout", function(e, n) {
      const s = D(this);
      s.classed("hovered", !1);
      let a = n;
      for (; a.depth > 1; ) a = a.parent;
      s.transition().call(
        (r) => t.services.transitions.setupTransition({
          transition: r,
          name: "graph_element_mouseout_fill_update"
        })
      ).style("fill", (r) => t.model.getFillColor(r.parent.data.name, null, r.data)), t.services.events.dispatchEvent(T.Treemap.LEAF_MOUSEOUT, {
        event: e,
        element: s,
        datum: n
      }), t.services.events.dispatchEvent(T.Tooltip.HIDE, {
        hoveredElement: s
      });
    });
  }
}
function Ug(i) {
  return i && i.__esModule && Object.prototype.hasOwnProperty.call(i, "default") ? i.default : i;
}
function Fg(i) {
  if (i.__esModule) return i;
  var t = i.default;
  if (typeof t == "function") {
    var e = function n() {
      return this instanceof n ? Reflect.construct(t, arguments, this.constructor) : t.apply(this, arguments);
    };
    e.prototype = t.prototype;
  } else e = {};
  return Object.defineProperty(e, "__esModule", { value: !0 }), Object.keys(i).forEach(function(n) {
    var s = Object.getOwnPropertyDescriptor(i, n);
    Object.defineProperty(e, n, s.get ? s : {
      enumerable: !0,
      get: function() {
        return i[n];
      }
    });
  }), e;
}
var Wg = { value: function() {
} };
function jo() {
  for (var i = 0, t = arguments.length, e = {}, n; i < t; ++i) {
    if (!(n = arguments[i] + "") || n in e || /[\s.]/.test(n)) throw new Error("illegal type: " + n);
    e[n] = [];
  }
  return new us(e);
}
function us(i) {
  this._ = i;
}
function Xg(i, t) {
  return i.trim().split(/^|\s+/).map(function(e) {
    var n = "", s = e.indexOf(".");
    if (s >= 0 && (n = e.slice(s + 1), e = e.slice(0, s)), e && !t.hasOwnProperty(e)) throw new Error("unknown type: " + e);
    return { type: e, name: n };
  });
}
us.prototype = jo.prototype = {
  constructor: us,
  on: function(i, t) {
    var e = this._, n = Xg(i + "", e), s, a = -1, r = n.length;
    if (arguments.length < 2) {
      for (; ++a < r; ) if ((s = (i = n[a]).type) && (s = Yg(e[s], i.name))) return s;
      return;
    }
    if (t != null && typeof t != "function") throw new Error("invalid callback: " + t);
    for (; ++a < r; )
      if (s = (i = n[a]).type) e[s] = Vr(e[s], i.name, t);
      else if (t == null) for (s in e) e[s] = Vr(e[s], i.name, null);
    return this;
  },
  copy: function() {
    var i = {}, t = this._;
    for (var e in t) i[e] = t[e].slice();
    return new us(i);
  },
  call: function(i, t) {
    if ((s = arguments.length - 2) > 0) for (var e = new Array(s), n = 0, s, a; n < s; ++n) e[n] = arguments[n + 2];
    if (!this._.hasOwnProperty(i)) throw new Error("unknown type: " + i);
    for (a = this._[i], n = 0, s = a.length; n < s; ++n) a[n].value.apply(t, e);
  },
  apply: function(i, t, e) {
    if (!this._.hasOwnProperty(i)) throw new Error("unknown type: " + i);
    for (var n = this._[i], s = 0, a = n.length; s < a; ++s) n[s].value.apply(t, e);
  }
};
function Yg(i, t) {
  for (var e = 0, n = i.length, s; e < n; ++e)
    if ((s = i[e]).name === t)
      return s.value;
}
function Vr(i, t, e) {
  for (var n = 0, s = i.length; n < s; ++n)
    if (i[n].name === t) {
      i[n] = Wg, i = i.slice(0, n).concat(i.slice(n + 1));
      break;
    }
  return e != null && i.push({ name: t, value: e }), i;
}
const Zg = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
  __proto__: null,
  dispatch: jo
}, Symbol.toStringTag, { value: "Module" })), qg = /* @__PURE__ */ Fg(Zg);
var ci, Gr;
function jg() {
  if (Gr) return ci;
  Gr = 1;
  const i = qg.dispatch, t = Math.PI / 180, e = {
    archimedean: g,
    rectangular: m
  }, n = 64, s = 2048;
  ci = function() {
    var E = [256, 256], x = a, b = r, _ = c, k = o, G = o, R = l, A = h, H = g, N = [], M = 1 / 0, O = i("word", "end"), P = null, $ = Math.random, C = {}, V = S;
    C.canvas = function(F) {
      return arguments.length ? (V = v(F), C) : V;
    }, C.start = function() {
      var F = q(V()), Z = y((E[0] >> 5) * E[1]), rt = null, j = N.length, Y = -1, K = [], ot = N.map(function(st, it) {
        return st.text = x.call(this, st, it), st.font = b.call(this, st, it), st.style = k.call(this, st, it), st.weight = G.call(this, st, it), st.rotate = R.call(this, st, it), st.size = ~~_.call(this, st, it), st.padding = A.call(this, st, it), st;
      }).sort(function(st, it) {
        return it.size - st.size;
      });
      return P && clearInterval(P), P = setInterval(ct, 0), ct(), C;
      function ct() {
        for (var st = Date.now(); Date.now() - st < M && ++Y < j && P; ) {
          var it = ot[Y];
          it.x = E[0] * ($() + 0.5) >> 1, it.y = E[1] * ($() + 0.5) >> 1, d(F, it, ot, Y), it.hasText && X(Z, it, rt) && (K.push(it), O.call("word", C, it), rt ? p(rt, it) : rt = [{ x: it.x + it.x0, y: it.y + it.y0 }, { x: it.x + it.x1, y: it.y + it.y1 }], it.x -= E[0] >> 1, it.y -= E[1] >> 1);
        }
        Y >= j && (C.stop(), O.call("end", C, K, rt));
      }
    }, C.stop = function() {
      P && (clearInterval(P), P = null);
      for (const F of N)
        delete F.sprite;
      return C;
    };
    function q(F) {
      const Z = F.getContext("2d", { willReadFrequently: !0 });
      F.width = F.height = 1;
      const rt = Math.sqrt(Z.getImageData(0, 0, 1, 1).data.length >> 2);
      return F.width = (n << 5) / rt, F.height = s / rt, Z.fillStyle = Z.strokeStyle = "red", { context: Z, ratio: rt };
    }
    function X(F, Z, rt) {
      E[0], E[1];
      for (var j = Z.x, Y = Z.y, K = Math.sqrt(E[0] * E[0] + E[1] * E[1]), ot = H(E), ct = $() < 0.5 ? 1 : -1, st = -ct, it, B, z; (it = ot(st += ct)) && (B = ~~it[0], z = ~~it[1], !(Math.min(Math.abs(B), Math.abs(z)) >= K)); )
        if (Z.x = j + B, Z.y = Y + z, !(Z.x + Z.x0 < 0 || Z.y + Z.y0 < 0 || Z.x + Z.x1 > E[0] || Z.y + Z.y1 > E[1]) && (!rt || f(Z, rt)) && !u(Z, F, E[0])) {
          for (var U = Z.sprite, Mt = Z.width >> 5, Se = E[0] >> 5, et = Z.x - (Mt << 4), yt = et & 127, Zt = 32 - yt, Wt = Z.y1 - Z.y0, rn = (Z.y + Z.y0) * Se + (et >> 5), on, Oe = 0; Oe < Wt; Oe++) {
            on = 0;
            for (var ne = 0; ne <= Mt; ne++)
              F[rn + ne] |= on << Zt | (ne < Mt ? (on = U[Oe * Mt + ne]) >>> yt : 0);
            rn += Se;
          }
          return !0;
        }
      return !1;
    }
    return C.timeInterval = function(F) {
      return arguments.length ? (M = F ?? 1 / 0, C) : M;
    }, C.words = function(F) {
      return arguments.length ? (N = F, C) : N;
    }, C.size = function(F) {
      return arguments.length ? (E = [+F[0], +F[1]], C) : E;
    }, C.font = function(F) {
      return arguments.length ? (b = v(F), C) : b;
    }, C.fontStyle = function(F) {
      return arguments.length ? (k = v(F), C) : k;
    }, C.fontWeight = function(F) {
      return arguments.length ? (G = v(F), C) : G;
    }, C.rotate = function(F) {
      return arguments.length ? (R = v(F), C) : R;
    }, C.text = function(F) {
      return arguments.length ? (x = v(F), C) : x;
    }, C.spiral = function(F) {
      return arguments.length ? (H = e[F] || F, C) : H;
    }, C.fontSize = function(F) {
      return arguments.length ? (_ = v(F), C) : _;
    }, C.padding = function(F) {
      return arguments.length ? (A = v(F), C) : A;
    }, C.random = function(F) {
      return arguments.length ? ($ = F, C) : $;
    }, C.on = function() {
      var F = O.on.apply(O, arguments);
      return F === O ? C : F;
    }, C;
  };
  function a(E) {
    return E.text;
  }
  function r() {
    return "serif";
  }
  function o() {
    return "normal";
  }
  function c(E) {
    return Math.sqrt(E.value);
  }
  function l() {
    return (~~(random() * 6) - 3) * 30;
  }
  function h() {
    return 1;
  }
  function d(E, x, b, _) {
    if (!x.sprite) {
      var k = E.context, G = E.ratio;
      k.clearRect(0, 0, (n << 5) / G, s / G);
      var R = 0, A = 0, H = 0, N = b.length;
      for (--_; ++_ < N; ) {
        x = b[_], k.save(), k.font = x.style + " " + x.weight + " " + ~~((x.size + 1) / G) + "px " + x.font;
        const it = k.measureText(x.text), B = -Math.floor(it.width / 2);
        let z = (it.width + 1) * G, U = x.size << 1;
        if (x.rotate) {
          var M = Math.sin(x.rotate * t), O = Math.cos(x.rotate * t), P = z * O, $ = z * M, C = U * O, V = U * M;
          z = Math.max(Math.abs(P + V), Math.abs(P - V)) + 31 >> 5 << 5, U = ~~Math.max(Math.abs($ + C), Math.abs($ - C));
        } else
          z = z + 31 >> 5 << 5;
        if (U > H && (H = U), R + z >= n << 5 && (R = 0, A += H, H = 0), A + U >= s) break;
        k.translate((R + (z >> 1)) / G, (A + (U >> 1)) / G), x.rotate && k.rotate(x.rotate * t), k.fillText(x.text, B, 0), x.padding && (k.lineWidth = 2 * x.padding, k.strokeText(x.text, B, 0)), k.restore(), x.width = z, x.height = U, x.xoff = R, x.yoff = A, x.x1 = z >> 1, x.y1 = U >> 1, x.x0 = -x.x1, x.y0 = -x.y1, x.hasText = !0, R += z;
      }
      for (var q = k.getImageData(0, 0, (n << 5) / G, s / G).data, X = []; --_ >= 0; )
        if (x = b[_], !!x.hasText) {
          for (var F = x.width, Z = F >> 5, rt = x.y1 - x.y0, j = 0; j < rt * Z; j++) X[j] = 0;
          if (R = x.xoff, R == null) return;
          A = x.yoff;
          for (var Y = 0, K = -1, ot = 0; ot < rt; ot++) {
            for (var j = 0; j < F; j++) {
              var ct = Z * ot + (j >> 5), st = q[(A + ot) * (n << 5) + (R + j) << 2] ? 1 << 31 - j % 32 : 0;
              X[ct] |= st, Y |= st;
            }
            Y ? K = ot : (x.y0++, rt--, ot--, A++);
          }
          x.y1 = x.y0 + K, x.sprite = X.slice(0, (x.y1 - x.y0) * Z);
        }
    }
  }
  function u(E, x, b) {
    b >>= 5;
    for (var _ = E.sprite, k = E.width >> 5, G = E.x - (k << 4), R = G & 127, A = 32 - R, H = E.y1 - E.y0, N = (E.y + E.y0) * b + (G >> 5), M, O = 0; O < H; O++) {
      M = 0;
      for (var P = 0; P <= k; P++)
        if ((M << A | (P < k ? (M = _[O * k + P]) >>> R : 0)) & x[N + P]) return !0;
      N += b;
    }
    return !1;
  }
  function p(E, x) {
    var b = E[0], _ = E[1];
    x.x + x.x0 < b.x && (b.x = x.x + x.x0), x.y + x.y0 < b.y && (b.y = x.y + x.y0), x.x + x.x1 > _.x && (_.x = x.x + x.x1), x.y + x.y1 > _.y && (_.y = x.y + x.y1);
  }
  function f(E, x) {
    return E.x + E.x1 > x[0].x && E.x + E.x0 < x[1].x && E.y + E.y1 > x[0].y && E.y + E.y0 < x[1].y;
  }
  function g(E) {
    var x = E[0] / E[1];
    return function(b) {
      return [x * (b *= 0.1) * Math.cos(b), b * Math.sin(b)];
    };
  }
  function m(E) {
    var x = 4, b = x * E[0] / E[1], _ = 0, k = 0;
    return function(G) {
      var R = G < 0 ? -1 : 1;
      switch (Math.sqrt(1 + 4 * R * G) - R & 3) {
        case 0:
          _ += b;
          break;
        case 1:
          k += x;
          break;
        case 2:
          _ -= b;
          break;
        default:
          k -= x;
          break;
      }
      return [_, k];
    };
  }
  function y(E) {
    for (var x = [], b = -1; ++b < E; ) x[b] = 0;
    return x;
  }
  function S() {
    return document.createElement("canvas");
  }
  function v(E) {
    return typeof E == "function" ? E : function() {
      return E;
    };
  }
  return ci;
}
var Kg = jg();
const Jg = /* @__PURE__ */ Ug(Kg);
class Km extends dt {
  constructor() {
    super(...arguments), this.type = "wordcloud", this.renderType = at.SVG, this.handleLegendOnHover = (t) => {
      const { hoveredElement: e } = t.detail, { groupMapsTo: n } = this.getOptions().data;
      this.parent.selectAll("text.word").transition("legend-hover-wordcloud").call(
        (s) => this.services.transitions.setupTransition({
          transition: s,
          name: "legend-hover-wordcloud"
        })
      ).attr("opacity", (s) => s[n] !== e.datum().name ? 0.3 : 1);
    }, this.handleLegendMouseOut = () => {
      this.parent.selectAll("text.word").transition("legend-mouseout-wordcloud").call(
        (t) => this.services.transitions.setupTransition({
          transition: t,
          name: "legend-mouseout-wordcloud"
        })
      ).attr("opacity", 1);
    };
  }
  init() {
    const t = this.services.events;
    t.addEventListener(T.Legend.ITEM_HOVER, this.handleLegendOnHover), t.addEventListener(T.Legend.ITEM_MOUSEOUT, this.handleLegendMouseOut);
  }
  render(t = !0) {
    const e = this, n = this.getComponentContainer({
      ariaLabel: "word cloud"
    }).attr("width", "100%").attr("height", "100%"), s = this.model.getDisplayData(), a = this.getFontSizeScale(s), r = this.getOptions(), { fontSizeMapsTo: o, wordMapsTo: c } = r.wordCloud, { groupMapsTo: l } = r.data, { width: h, height: d } = I.getSVGElementSize(n, {
      useAttrs: !0
    });
    if (h === 0 || d === 0)
      return;
    const u = Jg().size([h, d]).words(
      s.map(function(f) {
        const g = f[o];
        if (typeof f[o] != "number")
          throw Error(
            "Badly formatted WordCloud data. `value` should only be an integer or float"
          );
        return {
          [l]: f[l],
          text: f[c],
          size: g,
          value: g
        };
      })
    ).padding(5).rotate(0).fontSize((f) => a(f.size)).on("end", p);
    u.start();
    function p(f) {
      const g = I.appendOrSelect(n, "g.words");
      g.attr("transform", `translate(${u.size()[0] / 2}, ${u.size()[1] / 2})`);
      const m = g.selectAll("text").data(f, (S) => `${S[l]}-${S.text}`);
      m.exit().attr("opacity", 0).remove(), m.enter().append("text").attr("opacity", 0).merge(m).style("font-size", (S) => `${S.size}px`).text(function(S) {
        return S.text;
      }).attr(
        "class",
        (S) => e.model.getColorClassName({
          classNameTypes: [nt.FILL],
          dataGroupName: S[l],
          originalClassName: `word ${S.size > 32 ? "light" : ""}`
        })
      ).style("fill", (S) => e.model.getFillColor(S[l], S.text, S)).attr("text-anchor", "middle").transition().call(
        (S) => e.services.transitions.setupTransition({
          transition: S,
          name: "wordcloud-text-update-enter",
          animate: t
        })
      ).attr("transform", (S) => `translate(${S.x}, ${S.y})`).attr("opacity", 1);
    }
    this.addEventListeners();
  }
  getFontSizeScale(t) {
    const e = this.getOptions(), { fontSizeMapsTo: n } = e.wordCloud, s = t.map((c) => c[n]).filter((c) => c), a = I.getHTMLElementSize(this.services.domUtils.getMainContainer()), r = s.length > 0, o = r ? Os(s) : [1, 1];
    return Re().domain(o).range(r ? e.wordCloud.fontSizeRange(a, t) : [4, 4]);
  }
  addEventListeners() {
    const t = this.getOptions(), { groupMapsTo: e } = t.data, n = this, s = pi((a) => {
      const r = n.parent.selectAll("text.word").transition("wordcloud-word-mouse-highlight").call(
        (o) => n.services.transitions.setupTransition({
          transition: o,
          name: "wordcloud-word-mouse-highlight"
        })
      );
      a === null ? r.attr("opacity", 1) : r.attr("opacity", function() {
        return a === this ? 1 : 0.3;
      });
    }, 6);
    this.parent.selectAll("text.word").on("mouseover", function(a, r) {
      const o = this;
      s(o), n.services.events.dispatchEvent(T.WordCloud.WORD_MOUSEOVER, {
        event: a,
        element: D(this),
        datum: r
      }), n.services.events.dispatchEvent(T.Tooltip.SHOW, {
        event: a,
        hoveredElement: o,
        items: [
          {
            label: t.tooltip.wordLabel,
            value: r.text
          },
          {
            label: t.tooltip.valueLabel,
            value: r.value
          },
          {
            label: xt(t, "locale.translations.group") || xt(t, "tooltip.groupLabel") || "Group",
            value: r[e],
            class: n.model.getColorClassName({
              classNameTypes: [nt.TOOLTIP],
              dataGroupName: r[e]
            })
          }
        ]
      });
    }).on("mousemove", function(a, r) {
      const o = D(this);
      n.services.events.dispatchEvent(T.WordCloud.WORD_MOUSEMOVE, {
        element: o,
        datum: r
      }), n.services.events.dispatchEvent(T.Tooltip.MOVE, {
        event: a
      });
    }).on("click", function(a, r) {
      n.services.events.dispatchEvent(T.WordCloud.WORD_CLICK, {
        event: a,
        element: D(this),
        datum: r
      });
    }).on("mouseout", function(a, r) {
      const o = D(this);
      s(null), n.services.events.dispatchEvent(T.WordCloud.WORD_MOUSEOUT, {
        event: a,
        element: o,
        datum: r
      }), n.services.events.dispatchEvent(T.Tooltip.HIDE, {
        hoveredElement: o
      });
    });
  }
}
class Qg extends dt {
  constructor() {
    super(...arguments), this.type = "geo", this.renderType = at.SVG;
  }
  render() {
    const t = this.getComponentContainer({ withinChartClip: !0 }), { width: e, height: n } = I.getSVGElementSize(t, {
      useAttrs: !0
    });
    if (e < 1 || n < 1)
      return;
    const s = this.getProjection(), a = L(this.getOptions(), "geoData"), r = this.model.getCombinedData(), o = {}, c = {};
    Object.keys(r).forEach((y) => {
      typeof r[y].value == "number" ? o[y] = r[y] : c[y] = r[y];
    });
    const l = up(a, Object.values(c)), h = op(a, {
      // We need to specify that we are converting geometry collections
      type: "GeometryCollection",
      geometries: Object.values(o)
    }), d = s.fitSize([e, n], h), u = Lu().projection(d);
    I.appendOrSelect(t, "g.geo").selectAll("path").data(h.features).join("path").attr("d", u);
    const f = this.services.domUtils.generateElementIDString("geo-pattern-stripes"), g = I.appendOrSelect(t, "defs");
    I.appendOrSelect(g, "pattern").attr("id", f).attr("width", 5).attr("height", 10).attr("patternUnits", "userSpaceOnUse").attr("patternTransform", "rotate(45)").append("path").classed("pattern-fill", !0).attr(
      "d",
      Dn()([
        [0, 0],
        [0, 10]
      ])
    );
    const m = I.appendOrSelect(t, "g.missing-data");
    I.appendOrSelect(m, "path").datum(l).attr("d", u).style("fill", `url(#${f})`);
  }
  /**
   * Retrieves the D3 geographic projection based on the options provided.
   *
   * This method selects a geographic projection from the available D3 projections
   * based on the `projection` property in the `thematic` options. If the projection
   * is not supported or is missing, an error is thrown.
   *
   * @returns {d3.GeoProjection} - The D3 geographic projection corresponding to the selected option.
   * @throws {Error} If the projection is not supported or is missing.
   */
  getProjection() {
    let t = null;
    switch (L(this.getOptions(), "thematic", "projection")) {
      // Azimuthal Projections
      case Me.geoEqualEarth:
        t = Fu();
        break;
      // Conic Projections
      case Me.geoAlbers:
        t = $u();
        break;
      case Me.geoConicEqualArea:
        t = Ro();
        break;
      case Me.geoConicEquidistant:
        t = zu();
        break;
      // Cyndrical projections
      case Me.geoEquirectangular:
        t = Hu();
        break;
      case Me.geoMercator:
        t = Vu();
        break;
      case Me.geoNaturalEarth1:
        t = Wu();
        break;
      default:
        throw new Error("Projection is not supported.");
    }
    return t;
  }
}
class Jm extends Qg {
  constructor() {
    super(...arguments), this.type = "choropleth";
  }
  // eslint-disable-next-line @typescript-eslint/ban-ts-comment
  // @ts-ignore
  // eslint-disable-next-line @typescript-eslint/no-unused-vars
  render(t = !0) {
    super.render();
    const e = this.model.getCombinedData();
    this.getComponentContainer({ ariaLabel: "map", withinChartClip: !0 }).select("g.geo").selectAll("path").classed("border", !0).attr("class", (a) => this.model.getColorClassName({
      value: e[a.properties.NAME].value,
      originalClassName: "border"
    })), this.addCountryAreaEventListener();
  }
  addCountryAreaEventListener() {
    const t = this, e = this.model.getCombinedData();
    this.parent.selectAll("path.border").on("mouseover", function(n, s) {
      const a = D(this);
      t.services.events.dispatchEvent(Un.CHOROPLETH_MOUSEOVER, {
        event: n,
        element: a,
        datum: e[s.properties.NAME]
      }), t.services.events.dispatchEvent(Bs.SHOW, {
        event: n,
        hoveredElement: a,
        items: [
          {
            label: s.properties.NAME,
            value: e[s.properties.NAME].value
          }
        ]
      });
    }).on("mousemove", function(n, s) {
      t.services.events.dispatchEvent(Un.CHOROPLETH_MOUSEMOVE, {
        event: n,
        element: D(this),
        datum: e[s.properties.NAME]
      }), t.services.events.dispatchEvent(Bs.MOVE, {
        event: n
      });
    }).on("click", function(n, s) {
      t.services.events.dispatchEvent(Un.CHOROPLETH_CLICK, {
        event: n,
        element: D(this),
        datum: e[s.properties.NAME]
      });
    }).on("mouseout", function(n, s) {
      const a = D(this);
      t.services.events.dispatchEvent(Un.CHOROPLETH_MOUSEOUT, {
        event: n,
        element: a,
        datum: e[s.properties.NAME]
      }), t.services.events.dispatchEvent(Bs.HIDE, {
        event: n,
        hoveredElement: a
      });
    });
  }
}
export {
  wm as $,
  dm as A,
  ym as B,
  lm as C,
  Pm as D,
  Gm as E,
  Tm as F,
  fm as G,
  hm as H,
  Hm as I,
  Wm as J,
  Bm as K,
  Rd as L,
  om as M,
  Dm as N,
  zm as O,
  pp as P,
  Um as Q,
  Zo as R,
  rm as S,
  Id as T,
  qm as U,
  jm as V,
  Km as W,
  qo as X,
  np as Y,
  cm as Z,
  Mm as _,
  Sr as a,
  Am as a0,
  Lm as a1,
  Om as a2,
  Cm as a3,
  km as a4,
  _m as a5,
  Im as a6,
  Qg as a7,
  ta as a8,
  dt as a9,
  Tr as b,
  vc as c,
  Nd as d,
  Dd as e,
  Lr as f,
  um as g,
  pm as h,
  vm as i,
  mm as j,
  gm as k,
  Ji as l,
  sp as m,
  Em as n,
  xm as o,
  Sm as p,
  Rm as q,
  Jm as r,
  Nm as s,
  Ym as t,
  bm as u,
  Vm as v,
  Fm as w,
  Xm as x,
  Zm as y,
  $m as z
};
//# sourceMappingURL=choropleth-r6V_Qswb.mjs.map
