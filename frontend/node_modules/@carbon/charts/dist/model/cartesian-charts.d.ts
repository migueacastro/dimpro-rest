import { ChartModel } from './model';
import { AxisFlavor } from '../interfaces/enums';
/**
 * This supports adding X and Y Cartesian[2D] zoom data to a ChartModel
 * */
export declare class ChartModelCartesian extends ChartModel {
    axisFlavor: AxisFlavor;
    constructor(services: any);
    protected assignRangeAndDomains(): {
        primaryDomain: any;
        primaryRange: any;
        secondaryDomain: any;
        secondaryRange: any;
    };
    getTabularDataArray(): any[];
    setData(newData: any): any;
    /**
     * Sets the zoom bar data for the current instance.
     *
     * This method sanitizes the provided zoom bar data or uses the display data if no explicit
     * zoom data is provided. It normalizes the zoom bar data by aggregating values based on unique
     * dates and updates the instance's state with the normalized data.
     *
     * @param {any} [newZoomBarData] - The new zoom bar data to be set. If not provided, the display data will be used.
     */
    setZoomBarData(newZoomBarData?: any): void;
    getZoomBarData(): any;
    protected sanitizeDateValues(data: any): any;
    protected sanitize(data: any): any;
}
