import { AxisFlavor } from '../interfaces/enums';
import { ChartModelCartesian } from './cartesian-charts';
/** The gauge chart model layer */
export declare class HeatmapModel extends ChartModelCartesian {
    axisFlavor: AxisFlavor;
    private _colorScale;
    private _domains;
    private _ranges;
    private _matrix;
    constructor(services: any);
    /**
     * Get min and maximum value of the display data
     * @returns Array consisting of smallest and largest values in  data
     */
    getValueDomain(): number[];
    /**
     * @override
     * @param value
     * @returns string
     */
    getFillColor(value: number): any;
    /**
     * Generate a list of all unique domains
     * @returns String[]
     */
    getUniqueDomain(): string[];
    /**
     * Generates a list of all unique ranges
     * @returns String[]
     */
    getUniqueRanges(): string[];
    /**
     * Generates a matrix (If doesn't exist) and returns it
     * @returns Object
     */
    getMatrix(): any;
    /**
     * Sets the data for the current instance.
     *
     * This method sanitizes the provided data, generates data groups,
     * and updates the instance's state with the sanitized data and data groups.
     * It also resets the `_domains`, `_ranges`, and `_matrix` attributes to their empty states.
     *
     * @param {any} newData - The new data to be set. This data will be cloned and sanitized.
     * @returns {any} - The sanitized version of the provided data.
     */
    setData(newData: any): any;
    /**
     * Converts Object matrix into a single array
     * @returns object[]
     */
    getMatrixAsArray(): object[];
    /**
     * Generate tabular data from display data
     * @returns Array<Object>
     */
    getTabularDataArray(): any[];
    getColorClassName(configs: {
        value?: number;
        originalClassName?: string;
    }): string;
    protected setColorClassNames(): void;
}
